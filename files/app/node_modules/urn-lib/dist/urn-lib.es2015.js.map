{"version":3,"file":"urn-lib.es2015.js","sources":["../src/lib/validate.js","../src/lib/format.js","../src/lib/tokenize.js","../src/schemes/rfc2141.js","../src/main.js"],"sourcesContent":["export const RFC2141_NID_VALID = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-';\n\nexport function isRfc2141NidString(str, strictMode) {\n  if (true === strictMode) {\n    if (!isString(str)) return false;\n    // https://www.ietf.org/rfc/rfc2141.txt Section 2.1\n    if (str.length < 1) {\n      return false;\n    }\n    if (str.length > 31) {\n      return false;\n    }\n    // To avoid confusion with the \"urn:\" identifier, the NID \"urn\" is\n    // reserved and MUST NOT be used.\n    if ('urn' === str.toLowerCase()) {\n      return false;\n    }\n  }\n  if (null === str) str = '';\n  else if (!isString(str)) return false;\n  if (str[0] === '-') return false;\n  for (let chr of str) {\n    if (RFC2141_NID_VALID.indexOf(chr) < 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isString(str) {\n  return typeof str === 'string';\n}\n\nexport function isProtocol(protocol, parsed) {\n  let value = parsed.protocol;\n  if (!isString(value)) return false;\n  return protocol.toLowerCase() === value.toLowerCase();\n}\n\nexport function isValid(parsed, propertyName, allowZeroLength) {\n  let value = parsed[propertyName];\n  return propertyName in parsed && isString(value) && (allowZeroLength || value.length > 0);\n}\n\nexport function urnObject(protocol, customRules, allowZeroLength, parsed) {\n  let errors    = [];\n  Object.keys(parsed).forEach((propertyName, index) => {\n    if (!isValid(parsed, propertyName, allowZeroLength)) {\n      errors.push(`validation failed for ${propertyName}: invalid value`);\n    }\n  });\n  if (!isProtocol(protocol, parsed)) {\n    errors.push(`validation failed for protocol: expected ${protocol} but got ${parsed.protocol}`);\n  }\n  customRules.forEach(rule => {\n    let [propertyName,errorMessage,validator] = rule;\n    try {\n      let value = parsed[propertyName];\n      if (true !== validator(value)) {\n        errors.push(`validation failed for ${propertyName}: ${errorMessage}`);\n      }\n    }\n    catch(err) {\n      errors.push(`validation error for ${propertyName}: ${err.message}`);\n    }\n  });\n  return errors.length ? errors : null;\n}\n","import { isString } from './validate.js';\n\nexport default function(protocol, components, separator, parsed) {\n  protocol = parsed && 'protocol' in parsed ? parsed.protocol : protocol;\n  if (!isString(protocol)) throw new Error('protocol is missing or invalid');\n  return protocol + separator + components.map(name => !isString(parsed[name]) ? '' : parsed[name]).join(separator);\n}\n","import { isString } from './validate.js';\n\nexport default function(components, separator, str) {\n  if (!Array.isArray(components) || components.length < 1) throw new Error('components not valid');\n  if (!isString(str)) return null;\n  let parts     = str.split(separator);\n  if (parts.length < 2) return null;\n  let protocol  = parts.shift(); // all schemes have a protocol\n  let parsed    = { protocol };\n  let len       = components.length - 1; // last component treated differently\n  for (let i=0; i < len; i++) {\n    let name = components[i];\n    parsed[name] = parts.length ? parts.shift() : null;\n  }\n  // concat last component.  anything beyond what's defined in components\n  // is a single string that belongs to last part\n  let lastPartName      = components[len];\n  parsed[lastPartName]  = parts.length ? parts.join(separator) : null;\n  return parsed;\n}\n","export const PREFIX = 'urn';\nexport const SEPARATOR = ':';\n\nexport const COMPONENTS = [\n  'nid',\n  'nss',\n];\n","import format from './lib/format.js';\nimport tokenize from './lib/tokenize.js';\nimport { urnObject, isRfc2141NidString } from './lib/validate.js';\nimport { PREFIX as RFC2141_PREFIX, SEPARATOR as RFC2141_SEPARATOR, COMPONENTS as RFC2141_COMPONENTS } from './schemes/rfc2141.js';\n\n// generates an array of rules that treats all but the last component\n// as an nid string (with limited valid charset)\nexport function generateDefaultValidationRules(components) {\n  let lastIndex = components.length - 1;\n  let rules = [];\n  for (let i=0; i < lastIndex; i++) {\n    let name = components[i];\n    rules.push([ name, 'invalid characters', (value) => isRfc2141NidString(value, false) ]);\n  }\n  return rules;\n}\n\nfunction build(protocol, components, data) {\n  data = data || {};\n  let built = { protocol };\n  components.forEach(name => built[name] = data[name] || null);\n  return built;\n}\n\nexport function create(protocol, options) {\n  options = options || {};\n  let components        = options.components || RFC2141_COMPONENTS;\n  let allowEmpty        = 'allowEmpty' in options ? options.allowEmpty : false;\n  let separator         = options.separator || RFC2141_SEPARATOR;\n  let validationRules   = options.validationRules || generateDefaultValidationRules(components);\n  return {\n    validate:   urnObject.bind(null, protocol, validationRules, allowEmpty),\n    format:     format.bind(null, protocol, components, separator),\n    parse:      tokenize.bind(null, components, separator),\n    build:      build.bind(null, protocol, components),\n  };\n}\n\nexport const RFC2141 = create(RFC2141_PREFIX, {\n  components:       RFC2141_COMPONENTS,\n  separator:        RFC2141_SEPARATOR,\n  allowEmpty:       false,\n});\n"],"names":["RFC2141_NID_VALID","isRfc2141NidString","str","strictMode","isString","length","toLowerCase","chr","indexOf","isProtocol","protocol","parsed","value","isValid","propertyName","allowZeroLength","urnObject","customRules","errors","keys","forEach","index","push","rule","errorMessage","validator","err","message","components","separator","Error","map","name","join","Array","isArray","parts","split","shift","len","i","lastPartName","PREFIX","SEPARATOR","COMPONENTS","generateDefaultValidationRules","lastIndex","rules","build","data","built","create","options","RFC2141_COMPONENTS","allowEmpty","RFC2141_SEPARATOR","validationRules","bind","format","tokenize","RFC2141","RFC2141_PREFIX"],"mappings":"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"}