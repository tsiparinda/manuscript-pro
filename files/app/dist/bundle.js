var app = (function (AWS$1, jQuery) {
  'use strict'

  function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : { default: e }
  }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e
    var n = Object.create(null)
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k)
          Object.defineProperty(
            n,
            k,
            d.get
              ? d
              : {
                  enumerable: true,
                  get: function () {
                    return e[k]
                  },
                }
          )
        }
      })
    }
    n['default'] = e
    return Object.freeze(n)
  }

  var AWS__namespace = /*#__PURE__*/ _interopNamespace(AWS$1)
  var jQuery__default = /*#__PURE__*/ _interopDefaultLegacy(jQuery)

  function noop() {}
  const identity = (x) => x
  function assign(tar, src) {
    // @ts-ignore
    for (const k in src) tar[k] = src[k]
    return tar
  }
  function add_location(element, file, line, column, char) {
    element.__svelte_meta = {
      loc: { file, line, column, char },
    }
  }
  function run(fn) {
    return fn()
  }
  function blank_object() {
    return Object.create(null)
  }
  function run_all(fns) {
    fns.forEach(run)
  }
  function is_function(thing) {
    return typeof thing === 'function'
  }
  function safe_not_equal(a, b) {
    return a != a
      ? b == b
      : a !== b || (a && typeof a === 'object') || typeof a === 'function'
  }
  let src_url_equal_anchor
  function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
      src_url_equal_anchor = document.createElement('a')
    }
    src_url_equal_anchor.href = url
    return element_src === src_url_equal_anchor.href
  }
  function is_empty(obj) {
    return Object.keys(obj).length === 0
  }
  function validate_store(store, name) {
    if (store != null && typeof store.subscribe !== 'function') {
      throw new Error(`'${name}' is not a store with a 'subscribe' method`)
    }
  }
  function subscribe(store, ...callbacks) {
    if (store == null) {
      return noop
    }
    const unsub = store.subscribe(...callbacks)
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub
  }
  function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback))
  }
  function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
      const slot_ctx = get_slot_context(definition, ctx, $$scope, fn)
      return definition[0](slot_ctx)
    }
  }
  function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
      ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
      : $$scope.ctx
  }
  function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
      const lets = definition[2](fn(dirty))
      if ($$scope.dirty === undefined) {
        return lets
      }
      if (typeof lets === 'object') {
        const merged = []
        const len = Math.max($$scope.dirty.length, lets.length)
        for (let i = 0; i < len; i += 1) {
          merged[i] = $$scope.dirty[i] | lets[i]
        }
        return merged
      }
      return $$scope.dirty | lets
    }
    return $$scope.dirty
  }
  function update_slot_base(
    slot,
    slot_definition,
    ctx,
    $$scope,
    slot_changes,
    get_slot_context_fn
  ) {
    if (slot_changes) {
      const slot_context = get_slot_context(
        slot_definition,
        ctx,
        $$scope,
        get_slot_context_fn
      )
      slot.p(slot_context, slot_changes)
    }
  }
  function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
      const dirty = []
      const length = $$scope.ctx.length / 32
      for (let i = 0; i < length; i++) {
        dirty[i] = -1
      }
      return dirty
    }
    return -1
  }
  function exclude_internal_props(props) {
    const result = {}
    for (const k in props) if (k[0] !== '$') result[k] = props[k]
    return result
  }
  function compute_rest_props(props, keys) {
    const rest = {}
    keys = new Set(keys)
    for (const k in props) if (!keys.has(k) && k[0] !== '$') rest[k] = props[k]
    return rest
  }
  function null_to_empty(value) {
    return value == null ? '' : value
  }
  function split_css_unit(value) {
    const split =
      typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/)
    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px']
  }
  const contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable']

  const is_client = typeof window !== 'undefined'
  let now = is_client ? () => window.performance.now() : () => Date.now()
  let raf = is_client ? (cb) => requestAnimationFrame(cb) : noop

  const tasks = new Set()
  function run_tasks(now) {
    tasks.forEach((task) => {
      if (!task.c(now)) {
        tasks.delete(task)
        task.f()
      }
    })
    if (tasks.size !== 0) raf(run_tasks)
  }
  /**
   * Creates a new task that runs on each raf frame
   * until it returns a falsy value or is aborted
   */
  function loop(callback) {
    let task
    if (tasks.size === 0) raf(run_tasks)
    return {
      promise: new Promise((fulfill) => {
        tasks.add((task = { c: callback, f: fulfill }))
      }),
      abort() {
        tasks.delete(task)
      },
    }
  }
  function append(target, node) {
    target.appendChild(node)
  }
  function get_root_for_style(node) {
    if (!node) return document
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument
    if (root && root.host) {
      return root
    }
    return node.ownerDocument
  }
  function append_empty_stylesheet(node) {
    const style_element = element('style')
    append_stylesheet(get_root_for_style(node), style_element)
    return style_element.sheet
  }
  function append_stylesheet(node, style) {
    append(node.head || node, style)
    return style.sheet
  }
  function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null)
  }
  function detach(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node)
    }
  }
  function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
      if (iterations[i]) iterations[i].d(detaching)
    }
  }
  function element(name) {
    return document.createElement(name)
  }
  function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name)
  }
  function text(data) {
    return document.createTextNode(data)
  }
  function space() {
    return text(' ')
  }
  function empty() {
    return text('')
  }
  function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options)
    return () => node.removeEventListener(event, handler, options)
  }
  function prevent_default(fn) {
    return function (event) {
      event.preventDefault()
      // @ts-ignore
      return fn.call(this, event)
    }
  }
  function stop_propagation(fn) {
    return function (event) {
      event.stopPropagation()
      // @ts-ignore
      return fn.call(this, event)
    }
  }
  function self$1(fn) {
    return function (event) {
      // @ts-ignore
      if (event.target === this) fn.call(this, event)
    }
  }
  function attr(node, attribute, value) {
    if (value == null) node.removeAttribute(attribute)
    else if (node.getAttribute(attribute) !== value)
      node.setAttribute(attribute, value)
  }
  function set_attributes(node, attributes) {
    // @ts-ignore
    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__)
    for (const key in attributes) {
      if (attributes[key] == null) {
        node.removeAttribute(key)
      } else if (key === 'style') {
        node.style.cssText = attributes[key]
      } else if (key === '__value') {
        node.value = node[key] = attributes[key]
      } else if (descriptors[key] && descriptors[key].set) {
        node[key] = attributes[key]
      } else {
        attr(node, key, attributes[key])
      }
    }
  }
  function children(element) {
    return Array.from(element.childNodes)
  }
  function set_input_value(input, value) {
    input.value = value == null ? '' : value
  }
  function set_style(node, key, value, important) {
    if (value === null) {
      node.style.removeProperty(key)
    } else {
      node.style.setProperty(key, value, important ? 'important' : '')
    }
  }
  function select_option(select, value, mounting) {
    for (let i = 0; i < select.options.length; i += 1) {
      const option = select.options[i]
      if (option.__value === value) {
        option.selected = true
        return
      }
    }
    if (!mounting || value !== undefined) {
      select.selectedIndex = -1 // no option should be selected
    }
  }
  function select_value(select) {
    const selected_option = select.querySelector(':checked')
    return selected_option && selected_option.__value
  }
  function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name)
  }
  function custom_event(
    type,
    detail,
    { bubbles = false, cancelable = false } = {}
  ) {
    const e = document.createEvent('CustomEvent')
    e.initCustomEvent(type, bubbles, cancelable, detail)
    return e
  }
  class HtmlTag {
    constructor(is_svg = false) {
      this.is_svg = false
      this.is_svg = is_svg
      this.e = this.n = null
    }
    c(html) {
      this.h(html)
    }
    m(html, target, anchor = null) {
      if (!this.e) {
        if (this.is_svg) this.e = svg_element(target.nodeName)
        /** #7364  target for <template> may be provided as #document-fragment(11) */ else
          this.e = element(
            target.nodeType === 11 ? 'TEMPLATE' : target.nodeName
          )
        this.t = target.tagName !== 'TEMPLATE' ? target : target.content
        this.c(html)
      }
      this.i(anchor)
    }
    h(html) {
      this.e.innerHTML = html
      this.n = Array.from(
        this.e.nodeName === 'TEMPLATE'
          ? this.e.content.childNodes
          : this.e.childNodes
      )
    }
    i(anchor) {
      for (let i = 0; i < this.n.length; i += 1) {
        insert(this.t, this.n[i], anchor)
      }
    }
    p(html) {
      this.d()
      this.h(html)
      this.i(this.a)
    }
    d() {
      this.n.forEach(detach)
    }
  }

  // we need to store the information for multiple documents because a Svelte application could also contain iframes
  // https://github.com/sveltejs/svelte/issues/3624
  const managed_styles = new Map()
  let active = 0
  // https://github.com/darkskyapp/string-hash/blob/master/index.js
  function hash(str) {
    let hash = 5381
    let i = str.length
    while (i--) hash = ((hash << 5) - hash) ^ str.charCodeAt(i)
    return hash >>> 0
  }
  function create_style_information(doc, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} }
    managed_styles.set(doc, info)
    return info
  }
  function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration
    let keyframes = '{\n'
    for (let p = 0; p <= 1; p += step) {
      const t = a + (b - a) * ease(p)
      keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`
    const name = `__svelte_${hash(rule)}_${uid}`
    const doc = get_root_for_style(node)
    const { stylesheet, rules } =
      managed_styles.get(doc) || create_style_information(doc, node)
    if (!rules[name]) {
      rules[name] = true
      stylesheet.insertRule(
        `@keyframes ${name} ${rule}`,
        stylesheet.cssRules.length
      )
    }
    const animation = node.style.animation || ''
    node.style.animation = `${
      animation ? `${animation}, ` : ''
    }${name} ${duration}ms linear ${delay}ms 1 both`
    active += 1
    return name
  }
  function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ')
    const next = previous.filter(
      name
        ? (anim) => anim.indexOf(name) < 0 // remove specific animation
        : (anim) => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    )
    const deleted = previous.length - next.length
    if (deleted) {
      node.style.animation = next.join(', ')
      active -= deleted
      if (!active) clear_rules()
    }
  }
  function clear_rules() {
    raf(() => {
      if (active) return
      managed_styles.forEach((info) => {
        const { ownerNode } = info.stylesheet
        // there is no ownerNode if it runs on jsdom.
        if (ownerNode) detach(ownerNode)
      })
      managed_styles.clear()
    })
  }

  let current_component
  function set_current_component(component) {
    current_component = component
  }
  function get_current_component() {
    if (!current_component)
      throw new Error('Function called outside component initialization')
    return current_component
  }
  /**
   * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
   * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
   * it can be called from an external module).
   *
   * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
   *
   * https://svelte.dev/docs#run-time-svelte-onmount
   */
  function onMount(fn) {
    get_current_component().$$.on_mount.push(fn)
  }
  /**
   * Schedules a callback to run immediately after the component has been updated.
   *
   * The first time the callback runs will be after the initial `onMount`
   */
  function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn)
  }
  /**
   * Schedules a callback to run immediately before the component is unmounted.
   *
   * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
   * only one that runs inside a server-side component.
   *
   * https://svelte.dev/docs#run-time-svelte-ondestroy
   */
  function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn)
  }
  /**
   * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
   * Event dispatchers are functions that can take two arguments: `name` and `detail`.
   *
   * Component events created with `createEventDispatcher` create a
   * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
   * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
   * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
   * property and can contain any type of data.
   *
   * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
   */
  function createEventDispatcher() {
    const component = get_current_component()
    return (type, detail, { cancelable = false } = {}) => {
      const callbacks = component.$$.callbacks[type]
      if (callbacks) {
        // TODO are there situations where events could be dispatched
        // in a server (non-DOM) environment?
        const event = custom_event(type, detail, { cancelable })
        callbacks.slice().forEach((fn) => {
          fn.call(component, event)
        })
        return !event.defaultPrevented
      }
      return true
    }
  }
  /**
   * Associates an arbitrary `context` object with the current component and the specified `key`
   * and returns that object. The context is then available to children of the component
   * (including slotted content) with `getContext`.
   *
   * Like lifecycle functions, this must be called during component initialisation.
   *
   * https://svelte.dev/docs#run-time-svelte-setcontext
   */
  function setContext(key, context) {
    get_current_component().$$.context.set(key, context)
    return context
  }
  /**
   * Retrieves the context that belongs to the closest parent component with the specified `key`.
   * Must be called during component initialisation.
   *
   * https://svelte.dev/docs#run-time-svelte-getcontext
   */
  function getContext(key) {
    return get_current_component().$$.context.get(key)
  }
  // TODO figure out if we still want to support
  // shorthand events, or if we want to implement
  // a real bubbling mechanism
  function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type]
    if (callbacks) {
      // @ts-ignore
      callbacks.slice().forEach((fn) => fn.call(this, event))
    }
  }

  const dirty_components = []
  const binding_callbacks = []
  let render_callbacks = []
  const flush_callbacks = []
  const resolved_promise = /* @__PURE__ */ Promise.resolve()
  let update_scheduled = false
  function schedule_update() {
    if (!update_scheduled) {
      update_scheduled = true
      resolved_promise.then(flush)
    }
  }
  function add_render_callback(fn) {
    render_callbacks.push(fn)
  }
  function add_flush_callback(fn) {
    flush_callbacks.push(fn)
  }
  // flush() calls callbacks in this order:
  // 1. All beforeUpdate callbacks, in order: parents before children
  // 2. All bind:this callbacks, in reverse order: children before parents.
  // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
  //    for afterUpdates called during the initial onMount, which are called in
  //    reverse order: children before parents.
  // Since callbacks might update component values, which could trigger another
  // call to flush(), the following steps guard against this:
  // 1. During beforeUpdate, any updated components will be added to the
  //    dirty_components array and will cause a reentrant call to flush(). Because
  //    the flush index is kept outside the function, the reentrant call will pick
  //    up where the earlier call left off and go through all dirty components. The
  //    current_component value is saved and restored so that the reentrant call will
  //    not interfere with the "parent" flush() call.
  // 2. bind:this callbacks cannot trigger new flush() calls.
  // 3. During afterUpdate, any updated components will NOT have their afterUpdate
  //    callback called a second time; the seen_callbacks set, outside the flush()
  //    function, guarantees this behavior.
  const seen_callbacks = new Set()
  let flushidx = 0 // Do *not* move this inside the flush() function
  function flush() {
    // Do not reenter flush while dirty components are updated, as this can
    // result in an infinite loop. Instead, let the inner flush handle it.
    // Reentrancy is ok afterwards for bindings etc.
    if (flushidx !== 0) {
      return
    }
    const saved_component = current_component
    do {
      // first, call beforeUpdate functions
      // and update components
      try {
        while (flushidx < dirty_components.length) {
          const component = dirty_components[flushidx]
          flushidx++
          set_current_component(component)
          update(component.$$)
        }
      } catch (e) {
        // reset dirty state to not end up in a deadlocked state and then rethrow
        dirty_components.length = 0
        flushidx = 0
        throw e
      }
      set_current_component(null)
      dirty_components.length = 0
      flushidx = 0
      while (binding_callbacks.length) binding_callbacks.pop()()
      // then, once components are updated, call
      // afterUpdate functions. This may cause
      // subsequent updates...
      for (let i = 0; i < render_callbacks.length; i += 1) {
        const callback = render_callbacks[i]
        if (!seen_callbacks.has(callback)) {
          // ...so guard against infinite loops
          seen_callbacks.add(callback)
          callback()
        }
      }
      render_callbacks.length = 0
    } while (dirty_components.length)
    while (flush_callbacks.length) {
      flush_callbacks.pop()()
    }
    update_scheduled = false
    seen_callbacks.clear()
    set_current_component(saved_component)
  }
  function update($$) {
    if ($$.fragment !== null) {
      $$.update()
      run_all($$.before_update)
      const dirty = $$.dirty
      $$.dirty = [-1]
      $$.fragment && $$.fragment.p($$.ctx, dirty)
      $$.after_update.forEach(add_render_callback)
    }
  }
  /**
   * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
   */
  function flush_render_callbacks(fns) {
    const filtered = []
    const targets = []
    render_callbacks.forEach((c) =>
      fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)
    )
    targets.forEach((c) => c())
    render_callbacks = filtered
  }

  let promise
  function wait() {
    if (!promise) {
      promise = Promise.resolve()
      promise.then(() => {
        promise = null
      })
    }
    return promise
  }
  function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`))
  }
  const outroing = new Set()
  let outros
  function group_outros() {
    outros = {
      r: 0,
      c: [],
      p: outros, // parent group
    }
  }
  function check_outros() {
    if (!outros.r) {
      run_all(outros.c)
    }
    outros = outros.p
  }
  function transition_in(block, local) {
    if (block && block.i) {
      outroing.delete(block)
      block.i(local)
    }
  }
  function transition_out(block, local, detach, callback) {
    if (block && block.o) {
      if (outroing.has(block)) return
      outroing.add(block)
      outros.c.push(() => {
        outroing.delete(block)
        if (callback) {
          if (detach) block.d(1)
          callback()
        }
      })
      block.o(local)
    } else if (callback) {
      callback()
    }
  }
  const null_transition = { duration: 0 }
  function create_in_transition(node, fn, params) {
    const options = { direction: 'in' }
    let config = fn(node, params, options)
    let running = false
    let animation_name
    let task
    let uid = 0
    function cleanup() {
      if (animation_name) delete_rule(node, animation_name)
    }
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick = noop,
        css,
      } = config || null_transition
      if (css)
        animation_name = create_rule(
          node,
          0,
          1,
          duration,
          delay,
          easing,
          css,
          uid++
        )
      tick(0, 1)
      const start_time = now() + delay
      const end_time = start_time + duration
      if (task) task.abort()
      running = true
      add_render_callback(() => dispatch(node, true, 'start'))
      task = loop((now) => {
        if (running) {
          if (now >= end_time) {
            tick(1, 0)
            dispatch(node, true, 'end')
            cleanup()
            return (running = false)
          }
          if (now >= start_time) {
            const t = easing((now - start_time) / duration)
            tick(t, 1 - t)
          }
        }
        return running
      })
    }
    let started = false
    return {
      start() {
        if (started) return
        started = true
        delete_rule(node)
        if (is_function(config)) {
          config = config(options)
          wait().then(go)
        } else {
          go()
        }
      },
      invalidate() {
        started = false
      },
      end() {
        if (running) {
          cleanup()
          running = false
        }
      },
    }
  }
  function create_out_transition(node, fn, params) {
    const options = { direction: 'out' }
    let config = fn(node, params, options)
    let running = true
    let animation_name
    const group = outros
    group.r += 1
    function go() {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick = noop,
        css,
      } = config || null_transition
      if (css)
        animation_name = create_rule(node, 1, 0, duration, delay, easing, css)
      const start_time = now() + delay
      const end_time = start_time + duration
      add_render_callback(() => dispatch(node, false, 'start'))
      loop((now) => {
        if (running) {
          if (now >= end_time) {
            tick(0, 1)
            dispatch(node, false, 'end')
            if (!--group.r) {
              // this will result in `end()` being called,
              // so we don't need to clean up here
              run_all(group.c)
            }
            return false
          }
          if (now >= start_time) {
            const t = easing((now - start_time) / duration)
            tick(1 - t, t)
          }
        }
        return running
      })
    }
    if (is_function(config)) {
      wait().then(() => {
        // @ts-ignore
        config = config(options)
        go()
      })
    } else {
      go()
    }
    return {
      end(reset) {
        if (reset && config.tick) {
          config.tick(1, 0)
        }
        if (running) {
          if (animation_name) delete_rule(node, animation_name)
          running = false
        }
      },
    }
  }
  function create_bidirectional_transition(node, fn, params, intro) {
    const options = { direction: 'both' }
    let config = fn(node, params, options)
    let t = intro ? 0 : 1
    let running_program = null
    let pending_program = null
    let animation_name = null
    function clear_animation() {
      if (animation_name) delete_rule(node, animation_name)
    }
    function init(program, duration) {
      const d = program.b - t
      duration *= Math.abs(d)
      return {
        a: t,
        b: program.b,
        d,
        duration,
        start: program.start,
        end: program.start + duration,
        group: program.group,
      }
    }
    function go(b) {
      const {
        delay = 0,
        duration = 300,
        easing = identity,
        tick = noop,
        css,
      } = config || null_transition
      const program = {
        start: now() + delay,
        b,
      }
      if (!b) {
        // @ts-ignore todo: improve typings
        program.group = outros
        outros.r += 1
      }
      if (running_program || pending_program) {
        pending_program = program
      } else {
        // if this is an intro, and there's a delay, we need to do
        // an initial tick and/or apply CSS animation immediately
        if (css) {
          clear_animation()
          animation_name = create_rule(node, t, b, duration, delay, easing, css)
        }
        if (b) tick(0, 1)
        running_program = init(program, duration)
        add_render_callback(() => dispatch(node, b, 'start'))
        loop((now) => {
          if (pending_program && now > pending_program.start) {
            running_program = init(pending_program, duration)
            pending_program = null
            dispatch(node, running_program.b, 'start')
            if (css) {
              clear_animation()
              animation_name = create_rule(
                node,
                t,
                running_program.b,
                running_program.duration,
                0,
                easing,
                config.css
              )
            }
          }
          if (running_program) {
            if (now >= running_program.end) {
              tick((t = running_program.b), 1 - t)
              dispatch(node, running_program.b, 'end')
              if (!pending_program) {
                // we're done
                if (running_program.b) {
                  // intro — we can tidy up immediately
                  clear_animation()
                } else {
                  // outro — needs to be coordinated
                  if (!--running_program.group.r)
                    run_all(running_program.group.c)
                }
              }
              running_program = null
            } else if (now >= running_program.start) {
              const p = now - running_program.start
              t =
                running_program.a +
                running_program.d * easing(p / running_program.duration)
              tick(t, 1 - t)
            }
          }
          return !!(running_program || pending_program)
        })
      }
    }
    return {
      run(b) {
        if (is_function(config)) {
          wait().then(() => {
            // @ts-ignore
            config = config(options)
            go(b)
          })
        } else {
          go(b)
        }
      },
      end() {
        clear_animation()
        running_program = pending_program = null
      },
    }
  }

  const globals =
    typeof window !== 'undefined'
      ? window
      : typeof globalThis !== 'undefined'
      ? globalThis
      : global

  function destroy_block(block, lookup) {
    block.d(1)
    lookup.delete(block.key)
  }
  function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
      lookup.delete(block.key)
    })
  }
  function update_keyed_each(
    old_blocks,
    dirty,
    get_key,
    dynamic,
    ctx,
    list,
    lookup,
    node,
    destroy,
    create_each_block,
    next,
    get_context
  ) {
    let o = old_blocks.length
    let n = list.length
    let i = o
    const old_indexes = {}
    while (i--) old_indexes[old_blocks[i].key] = i
    const new_blocks = []
    const new_lookup = new Map()
    const deltas = new Map()
    const updates = []
    i = n
    while (i--) {
      const child_ctx = get_context(ctx, list, i)
      const key = get_key(child_ctx)
      let block = lookup.get(key)
      if (!block) {
        block = create_each_block(key, child_ctx)
        block.c()
      } else if (dynamic) {
        // defer updates until all the DOM shuffling is done
        updates.push(() => block.p(child_ctx, dirty))
      }
      new_lookup.set(key, (new_blocks[i] = block))
      if (key in old_indexes) deltas.set(key, Math.abs(i - old_indexes[key]))
    }
    const will_move = new Set()
    const did_move = new Set()
    function insert(block) {
      transition_in(block, 1)
      block.m(node, next)
      lookup.set(block.key, block)
      next = block.first
      n--
    }
    while (o && n) {
      const new_block = new_blocks[n - 1]
      const old_block = old_blocks[o - 1]
      const new_key = new_block.key
      const old_key = old_block.key
      if (new_block === old_block) {
        // do nothing
        next = new_block.first
        o--
        n--
      } else if (!new_lookup.has(old_key)) {
        // remove old block
        destroy(old_block, lookup)
        o--
      } else if (!lookup.has(new_key) || will_move.has(new_key)) {
        insert(new_block)
      } else if (did_move.has(old_key)) {
        o--
      } else if (deltas.get(new_key) > deltas.get(old_key)) {
        did_move.add(new_key)
        insert(new_block)
      } else {
        will_move.add(old_key)
        o--
      }
    }
    while (o--) {
      const old_block = old_blocks[o]
      if (!new_lookup.has(old_block.key)) destroy(old_block, lookup)
    }
    while (n) insert(new_blocks[n - 1])
    run_all(updates)
    return new_blocks
  }
  function validate_each_keys(ctx, list, get_context, get_key) {
    const keys = new Set()
    for (let i = 0; i < list.length; i++) {
      const key = get_key(get_context(ctx, list, i))
      if (keys.has(key)) {
        throw new Error('Cannot have duplicate keys in a keyed each')
      }
      keys.add(key)
    }
  }

  function get_spread_update(levels, updates) {
    const update = {}
    const to_null_out = {}
    const accounted_for = { $$scope: 1 }
    let i = levels.length
    while (i--) {
      const o = levels[i]
      const n = updates[i]
      if (n) {
        for (const key in o) {
          if (!(key in n)) to_null_out[key] = 1
        }
        for (const key in n) {
          if (!accounted_for[key]) {
            update[key] = n[key]
            accounted_for[key] = 1
          }
        }
        levels[i] = n
      } else {
        for (const key in o) {
          accounted_for[key] = 1
        }
      }
    }
    for (const key in to_null_out) {
      if (!(key in update)) update[key] = undefined
    }
    return update
  }
  function get_spread_object(spread_props) {
    return typeof spread_props === 'object' && spread_props !== null
      ? spread_props
      : {}
  }

  function bind(component, name, callback) {
    const index = component.$$.props[name]
    if (index !== undefined) {
      component.$$.bound[index] = callback
      callback(component.$$.ctx[index])
    }
  }
  function create_component(block) {
    block && block.c()
  }
  function mount_component(component, target, anchor, customElement) {
    const { fragment, after_update } = component.$$
    fragment && fragment.m(target, anchor)
    if (!customElement) {
      // onMount happens before the initial afterUpdate
      add_render_callback(() => {
        const new_on_destroy = component.$$.on_mount
          .map(run)
          .filter(is_function)
        // if the component was destroyed immediately
        // it will update the `$$.on_destroy` reference to `null`.
        // the destructured on_destroy may still reference to the old array
        if (component.$$.on_destroy) {
          component.$$.on_destroy.push(...new_on_destroy)
        } else {
          // Edge case - component was destroyed immediately,
          // most likely as a result of a binding initialising
          run_all(new_on_destroy)
        }
        component.$$.on_mount = []
      })
    }
    after_update.forEach(add_render_callback)
  }
  function destroy_component(component, detaching) {
    const $$ = component.$$
    if ($$.fragment !== null) {
      flush_render_callbacks($$.after_update)
      run_all($$.on_destroy)
      $$.fragment && $$.fragment.d(detaching)
      // TODO null out other refs, including component.$$ (but need to
      // preserve final state?)
      $$.on_destroy = $$.fragment = null
      $$.ctx = []
    }
  }
  function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
      dirty_components.push(component)
      schedule_update()
      component.$$.dirty.fill(0)
    }
    component.$$.dirty[(i / 31) | 0] |= 1 << i % 31
  }
  function init(
    component,
    options,
    instance,
    create_fragment,
    not_equal,
    props,
    append_styles,
    dirty = [-1]
  ) {
    const parent_component = current_component
    set_current_component(component)
    const $$ = (component.$$ = {
      fragment: null,
      ctx: [],
      // state
      props,
      update: noop,
      not_equal,
      bound: blank_object(),
      // lifecycle
      on_mount: [],
      on_destroy: [],
      on_disconnect: [],
      before_update: [],
      after_update: [],
      context: new Map(
        options.context || (parent_component ? parent_component.$$.context : [])
      ),
      // everything else
      callbacks: blank_object(),
      dirty,
      skip_bound: false,
      root: options.target || parent_component.$$.root,
    })
    append_styles && append_styles($$.root)
    let ready = false
    $$.ctx = instance
      ? instance(component, options.props || {}, (i, ret, ...rest) => {
          const value = rest.length ? rest[0] : ret
          if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
            if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value)
            if (ready) make_dirty(component, i)
          }
          return ret
        })
      : []
    $$.update()
    ready = true
    run_all($$.before_update)
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false
    if (options.target) {
      if (options.hydrate) {
        const nodes = children(options.target)
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.l(nodes)
        nodes.forEach(detach)
      } else {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        $$.fragment && $$.fragment.c()
      }
      if (options.intro) transition_in(component.$$.fragment)
      mount_component(
        component,
        options.target,
        options.anchor,
        options.customElement
      )
      flush()
    }
    set_current_component(parent_component)
  }
  /**
   * Base class for Svelte components. Used when dev=false.
   */
  class SvelteComponent {
    $destroy() {
      destroy_component(this, 1)
      this.$destroy = noop
    }
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop
      }
      const callbacks =
        this.$$.callbacks[type] || (this.$$.callbacks[type] = [])
      callbacks.push(callback)
      return () => {
        const index = callbacks.indexOf(callback)
        if (index !== -1) callbacks.splice(index, 1)
      }
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true
        this.$$set($$props)
        this.$$.skip_bound = false
      }
    }
  }

  function dispatch_dev(type, detail) {
    document.dispatchEvent(
      custom_event(type, Object.assign({ version: '3.58.0' }, detail), {
        bubbles: true,
      })
    )
  }
  function append_dev(target, node) {
    dispatch_dev('SvelteDOMInsert', { target, node })
    append(target, node)
  }
  function insert_dev(target, node, anchor) {
    dispatch_dev('SvelteDOMInsert', { target, node, anchor })
    insert(target, node, anchor)
  }
  function detach_dev(node) {
    dispatch_dev('SvelteDOMRemove', { node })
    detach(node)
  }
  function listen_dev(
    node,
    event,
    handler,
    options,
    has_prevent_default,
    has_stop_propagation,
    has_stop_immediate_propagation
  ) {
    const modifiers =
      options === true
        ? ['capture']
        : options
        ? Array.from(Object.keys(options))
        : []
    if (has_prevent_default) modifiers.push('preventDefault')
    if (has_stop_propagation) modifiers.push('stopPropagation')
    if (has_stop_immediate_propagation)
      modifiers.push('stopImmediatePropagation')
    dispatch_dev('SvelteDOMAddEventListener', {
      node,
      event,
      handler,
      modifiers,
    })
    const dispose = listen(node, event, handler, options)
    return () => {
      dispatch_dev('SvelteDOMRemoveEventListener', {
        node,
        event,
        handler,
        modifiers,
      })
      dispose()
    }
  }
  function attr_dev(node, attribute, value) {
    attr(node, attribute, value)
    if (value == null)
      dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute })
    else dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value })
  }
  function prop_dev(node, property, value) {
    node[property] = value
    dispatch_dev('SvelteDOMSetProperty', { node, property, value })
  }
  function set_data_dev(text, data) {
    data = '' + data
    if (text.data === data) return
    dispatch_dev('SvelteDOMSetData', { node: text, data })
    text.data = data
  }
  function set_data_contenteditable_dev(text, data) {
    data = '' + data
    if (text.wholeText === data) return
    dispatch_dev('SvelteDOMSetData', { node: text, data })
    text.data = data
  }
  function set_data_maybe_contenteditable_dev(text, data, attr_value) {
    if (~contenteditable_truthy_values.indexOf(attr_value)) {
      set_data_contenteditable_dev(text, data)
    } else {
      set_data_dev(text, data)
    }
  }
  function validate_each_argument(arg) {
    if (
      typeof arg !== 'string' &&
      !(arg && typeof arg === 'object' && 'length' in arg)
    ) {
      let msg = '{#each} only iterates over array-like objects.'
      if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
        msg += ' You can use a spread to convert this iterable into an array.'
      }
      throw new Error(msg)
    }
  }
  function validate_slots(name, slot, keys) {
    for (const slot_key of Object.keys(slot)) {
      if (!~keys.indexOf(slot_key)) {
        console.warn(`<${name}> received an unexpected slot "${slot_key}".`)
      }
    }
  }
  function construct_svelte_component_dev(component, props) {
    const error_message =
      'this={...} of <svelte:component> should specify a Svelte component.'
    try {
      const instance = new component(props)
      if (
        !instance.$$ ||
        !instance.$set ||
        !instance.$on ||
        !instance.$destroy
      ) {
        throw new Error(error_message)
      }
      return instance
    } catch (err) {
      const { message } = err
      if (
        typeof message === 'string' &&
        message.indexOf('is not a constructor') !== -1
      ) {
        throw new Error(error_message)
      } else {
        throw err
      }
    }
  }
  /**
   * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
   */
  class SvelteComponentDev extends SvelteComponent {
    constructor(options) {
      if (!options || (!options.target && !options.$$inline)) {
        throw new Error("'target' is a required option")
      }
      super()
    }
    $destroy() {
      super.$destroy()
      this.$destroy = () => {
        console.warn('Component was already destroyed') // eslint-disable-line no-console
      }
    }
    $capture_state() {}
    $inject_state() {}
  }

  const subscriber_queue = []
  /**
   * Creates a `Readable` store that allows reading by subscription.
   * @param value initial value
   * @param {StartStopNotifier}start start and stop notifications for subscriptions
   */
  function readable(value, start) {
    return {
      subscribe: writable(value, start).subscribe,
    }
  }
  /**
   * Create a `Writable` store that allows both updating and reading by subscription.
   * @param {*=}value initial value
   * @param {StartStopNotifier=}start start and stop notifications for subscriptions
   */
  function writable(value, start = noop) {
    let stop
    const subscribers = new Set()
    function set(new_value) {
      if (safe_not_equal(value, new_value)) {
        value = new_value
        if (stop) {
          // store is ready
          const run_queue = !subscriber_queue.length
          for (const subscriber of subscribers) {
            subscriber[1]()
            subscriber_queue.push(subscriber, value)
          }
          if (run_queue) {
            for (let i = 0; i < subscriber_queue.length; i += 2) {
              subscriber_queue[i][0](subscriber_queue[i + 1])
            }
            subscriber_queue.length = 0
          }
        }
      }
    }
    function update(fn) {
      set(fn(value))
    }
    function subscribe(run, invalidate = noop) {
      const subscriber = [run, invalidate]
      subscribers.add(subscriber)
      if (subscribers.size === 1) {
        stop = start(set) || noop
      }
      run(value)
      return () => {
        subscribers.delete(subscriber)
        if (subscribers.size === 0 && stop) {
          stop()
          stop = null
        }
      }
    }
    return { set, update, subscribe }
  }
  function derived(stores, fn, initial_value) {
    const single = !Array.isArray(stores)
    const stores_array = single ? [stores] : stores
    const auto = fn.length < 2
    return readable(initial_value, (set) => {
      let started = false
      const values = []
      let pending = 0
      let cleanup = noop
      const sync = () => {
        if (pending) {
          return
        }
        cleanup()
        const result = fn(single ? values[0] : values, set)
        if (auto) {
          set(result)
        } else {
          cleanup = is_function(result) ? result : noop
        }
      }
      const unsubscribers = stores_array.map((store, i) =>
        subscribe(
          store,
          (value) => {
            values[i] = value
            pending &= ~(1 << i)
            if (started) {
              sync()
            }
          },
          () => {
            pending |= 1 << i
          }
        )
      )
      started = true
      sync()
      return function stop() {
        run_all(unsubscribers)
        cleanup()
        // We need to set this to false because callbacks can still happen despite having unsubscribed:
        // Callbacks might already be placed in the queue which doesn't know it should no longer
        // invoke this derived store.
        started = false
      }
    })
  }

  const LOCATION = {}
  const ROUTER = {}

  /**
   * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/history.js
   *
   * https://github.com/reach/router/blob/master/LICENSE
   * */

  function getLocation(source) {
    return {
      ...source.location,
      state: source.history.state,
      key: (source.history.state && source.history.state.key) || 'initial',
    }
  }

  function createHistory(source, options) {
    const listeners = []
    let location = getLocation(source)

    return {
      get location() {
        return location
      },

      listen(listener) {
        listeners.push(listener)

        const popstateListener = () => {
          location = getLocation(source)
          listener({ location, action: 'POP' })
        }

        source.addEventListener('popstate', popstateListener)

        return () => {
          source.removeEventListener('popstate', popstateListener)

          const index = listeners.indexOf(listener)
          listeners.splice(index, 1)
        }
      },

      navigate(to, { state, replace = false } = {}) {
        state = { ...state, key: Date.now() + '' }
        // try...catch iOS Safari limits to 100 pushState calls
        try {
          if (replace) {
            source.history.replaceState(state, null, to)
          } else {
            source.history.pushState(state, null, to)
          }
        } catch (e) {
          source.location[replace ? 'replace' : 'assign'](to)
        }

        location = getLocation(source)
        listeners.forEach((listener) => listener({ location, action: 'PUSH' }))
      },
    }
  }

  // Stores history entries in memory for testing or other platforms like Native
  function createMemorySource(initialPathname = '/') {
    let index = 0
    const stack = [{ pathname: initialPathname, search: '' }]
    const states = []

    return {
      get location() {
        return stack[index]
      },
      addEventListener(name, fn) {},
      removeEventListener(name, fn) {},
      history: {
        get entries() {
          return stack
        },
        get index() {
          return index
        },
        get state() {
          return states[index]
        },
        pushState(state, _, uri) {
          const [pathname, search = ''] = uri.split('?')
          index++
          stack.push({ pathname, search })
          states.push(state)
        },
        replaceState(state, _, uri) {
          const [pathname, search = ''] = uri.split('?')
          stack[index] = { pathname, search }
          states[index] = state
        },
      },
    }
  }

  // Global history uses window.history as the source if available,
  // otherwise a memory history
  const canUseDOM = Boolean(
    typeof window !== 'undefined' &&
      window.document &&
      window.document.createElement
  )
  const globalHistory = createHistory(canUseDOM ? window : createMemorySource())
  const { navigate } = globalHistory

  /**
   * Adapted from https://github.com/reach/router/blob/b60e6dd781d5d3a4bdaaf4de665649c0f6a7e78d/src/lib/utils.js
   *
   * https://github.com/reach/router/blob/master/LICENSE
   * */

  const paramRe = /^:(.+)/

  const SEGMENT_POINTS = 4
  const STATIC_POINTS = 3
  const DYNAMIC_POINTS = 2
  const SPLAT_PENALTY = 1
  const ROOT_POINTS = 1

  /**
   * Check if `string` starts with `search`
   * @param {string} string
   * @param {string} search
   * @return {boolean}
   */
  function startsWith(string, search) {
    return string.substr(0, search.length) === search
  }

  /**
   * Check if `segment` is a root segment
   * @param {string} segment
   * @return {boolean}
   */
  function isRootSegment(segment) {
    return segment === ''
  }

  /**
   * Check if `segment` is a dynamic segment
   * @param {string} segment
   * @return {boolean}
   */
  function isDynamic(segment) {
    return paramRe.test(segment)
  }

  /**
   * Check if `segment` is a splat
   * @param {string} segment
   * @return {boolean}
   */
  function isSplat(segment) {
    return segment[0] === '*'
  }

  /**
   * Split up the URI into segments delimited by `/`
   * @param {string} uri
   * @return {string[]}
   */
  function segmentize(uri) {
    return (
      uri
        // Strip starting/ending `/`
        .replace(/(^\/+|\/+$)/g, '')
        .split('/')
    )
  }

  /**
   * Strip `str` of potential start and end `/`
   * @param {string} str
   * @return {string}
   */
  function stripSlashes(str) {
    return str.replace(/(^\/+|\/+$)/g, '')
  }

  /**
   * Score a route depending on how its individual segments look
   * @param {object} route
   * @param {number} index
   * @return {object}
   */
  function rankRoute(route, index) {
    const score = route.default
      ? 0
      : segmentize(route.path).reduce((score, segment) => {
          score += SEGMENT_POINTS

          if (isRootSegment(segment)) {
            score += ROOT_POINTS
          } else if (isDynamic(segment)) {
            score += DYNAMIC_POINTS
          } else if (isSplat(segment)) {
            score -= SEGMENT_POINTS + SPLAT_PENALTY
          } else {
            score += STATIC_POINTS
          }

          return score
        }, 0)

    return { route, score, index }
  }

  /**
   * Give a score to all routes and sort them on that
   * @param {object[]} routes
   * @return {object[]}
   */
  function rankRoutes(routes) {
    return (
      routes
        .map(rankRoute)
        // If two routes have the exact same score, we go by index instead
        .sort((a, b) =>
          a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
        )
    )
  }

  /**
   * Ranks and picks the best route to match. Each segment gets the highest
   * amount of points, then the type of segment gets an additional amount of
   * points where
   *
   *  static > dynamic > splat > root
   *
   * This way we don't have to worry about the order of our routes, let the
   * computers do it.
   *
   * A route looks like this
   *
   *  { path, default, value }
   *
   * And a returned match looks like:
   *
   *  { route, params, uri }
   *
   * @param {object[]} routes
   * @param {string} uri
   * @return {?object}
   */
  function pick(routes, uri) {
    let match
    let default_

    const [uriPathname] = uri.split('?')
    const uriSegments = segmentize(uriPathname)
    const isRootUri = uriSegments[0] === ''
    const ranked = rankRoutes(routes)

    for (let i = 0, l = ranked.length; i < l; i++) {
      const route = ranked[i].route
      let missed = false

      if (route.default) {
        default_ = {
          route,
          params: {},
          uri,
        }
        continue
      }

      const routeSegments = segmentize(route.path)
      const params = {}
      const max = Math.max(uriSegments.length, routeSegments.length)
      let index = 0

      for (; index < max; index++) {
        const routeSegment = routeSegments[index]
        const uriSegment = uriSegments[index]

        if (routeSegment !== undefined && isSplat(routeSegment)) {
          // Hit a splat, just grab the rest, and return a match
          // uri:   /files/documents/work
          // route: /files/* or /files/*splatname
          const splatName = routeSegment === '*' ? '*' : routeSegment.slice(1)

          params[splatName] = uriSegments
            .slice(index)
            .map(decodeURIComponent)
            .join('/')
          break
        }

        if (uriSegment === undefined) {
          // URI is shorter than the route, no match
          // uri:   /users
          // route: /users/:userId
          missed = true
          break
        }

        let dynamicMatch = paramRe.exec(routeSegment)

        if (dynamicMatch && !isRootUri) {
          const value = decodeURIComponent(uriSegment)
          params[dynamicMatch[1]] = value
        } else if (routeSegment !== uriSegment) {
          // Current segments don't match, not dynamic, not splat, so no match
          // uri:   /users/123/settings
          // route: /users/:id/profile
          missed = true
          break
        }
      }

      if (!missed) {
        match = {
          route,
          params,
          uri: '/' + uriSegments.slice(0, index).join('/'),
        }
        break
      }
    }

    return match || default_ || null
  }

  /**
   * Check if the `path` matches the `uri`.
   * @param {string} path
   * @param {string} uri
   * @return {?object}
   */
  function match(route, uri) {
    return pick([route], uri)
  }

  /**
   * Add the query to the pathname if a query is given
   * @param {string} pathname
   * @param {string} [query]
   * @return {string}
   */
  function addQuery(pathname, query) {
    return pathname + (query ? `?${query}` : '')
  }

  /**
   * Resolve URIs as though every path is a directory, no files. Relative URIs
   * in the browser can feel awkward because not only can you be "in a directory",
   * you can be "at a file", too. For example:
   *
   *  browserSpecResolve('foo', '/bar/') => /bar/foo
   *  browserSpecResolve('foo', '/bar') => /foo
   *
   * But on the command line of a file system, it's not as complicated. You can't
   * `cd` from a file, only directories. This way, links have to know less about
   * their current path. To go deeper you can do this:
   *
   *  <Link to="deeper"/>
   *  // instead of
   *  <Link to=`{${props.uri}/deeper}`/>
   *
   * Just like `cd`, if you want to go deeper from the command line, you do this:
   *
   *  cd deeper
   *  # not
   *  cd $(pwd)/deeper
   *
   * By treating every path as a directory, linking to relative paths should
   * require less contextual information and (fingers crossed) be more intuitive.
   * @param {string} to
   * @param {string} base
   * @return {string}
   */
  function resolve(to, base) {
    // /foo/bar, /baz/qux => /foo/bar
    if (startsWith(to, '/')) {
      return to
    }

    const [toPathname, toQuery] = to.split('?')
    const [basePathname] = base.split('?')
    const toSegments = segmentize(toPathname)
    const baseSegments = segmentize(basePathname)

    // ?a=b, /users?b=c => /users?a=b
    if (toSegments[0] === '') {
      return addQuery(basePathname, toQuery)
    }

    // profile, /users/789 => /users/789/profile
    if (!startsWith(toSegments[0], '.')) {
      const pathname = baseSegments.concat(toSegments).join('/')

      return addQuery((basePathname === '/' ? '' : '/') + pathname, toQuery)
    }

    // ./       , /users/123 => /users/123
    // ../      , /users/123 => /users
    // ../..    , /users/123 => /
    // ../../one, /a/b/c/d   => /a/b/one
    // .././one , /a/b/c/d   => /a/b/c/one
    const allSegments = baseSegments.concat(toSegments)
    const segments = []

    allSegments.forEach((segment) => {
      if (segment === '..') {
        segments.pop()
      } else if (segment !== '.') {
        segments.push(segment)
      }
    })

    return addQuery('/' + segments.join('/'), toQuery)
  }

  /**
   * Combines the `basepath` and the `path` into one path.
   * @param {string} basepath
   * @param {string} path
   */
  function combinePaths(basepath, path) {
    return `${stripSlashes(
      path === '/'
        ? basepath
        : `${stripSlashes(basepath)}/${stripSlashes(path)}`
    )}/`
  }

  /**
   * Decides whether a given `event` should result in a navigation or not.
   * @param {object} event
   */
  function shouldNavigate(event) {
    return (
      !event.defaultPrevented &&
      event.button === 0 &&
      !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
    )
  }

  /* node_modules/svelte-routing/src/Router.svelte generated by Svelte v3.58.0 */

  function create_fragment$o(ctx) {
    let current
    const default_slot_template = /*#slots*/ ctx[9].default
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/ ctx[8],
      null
    )

    const block = {
      c: function create() {
        if (default_slot) default_slot.c()
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor)
        }

        current = true
      },
      p: function update(ctx, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/ 256)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx,
              /*$$scope*/ ctx[8],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[8])
                : get_slot_changes(
                    default_slot_template,
                    /*$$scope*/ ctx[8],
                    dirty,
                    null
                  ),
              null
            )
          }
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(default_slot, local)
        current = true
      },
      o: function outro(local) {
        transition_out(default_slot, local)
        current = false
      },
      d: function destroy(detaching) {
        if (default_slot) default_slot.d(detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$o.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$o($$self, $$props, $$invalidate) {
    let $location
    let $routes
    let $base
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Router', slots, ['default'])
    let { basepath = '/' } = $$props
    let { url = null } = $$props
    const locationContext = getContext(LOCATION)
    const routerContext = getContext(ROUTER)
    const routes = writable([])
    validate_store(routes, 'routes')
    component_subscribe($$self, routes, (value) =>
      $$invalidate(6, ($routes = value))
    )
    const activeRoute = writable(null)
    let hasActiveRoute = false // Used in SSR to synchronously set that a Route is active.

    // If locationContext is not set, this is the topmost Router in the tree.
    // If the `url` prop is given we force the location to it.
    const location =
      locationContext ||
      writable(url ? { pathname: url } : globalHistory.location)

    validate_store(location, 'location')
    component_subscribe($$self, location, (value) =>
      $$invalidate(5, ($location = value))
    )

    // If routerContext is set, the routerBase of the parent Router
    // will be the base for this Router's descendants.
    // If routerContext is not set, the path and resolved uri will both
    // have the value of the basepath prop.
    const base = routerContext
      ? routerContext.routerBase
      : writable({ path: basepath, uri: basepath })

    validate_store(base, 'base')
    component_subscribe($$self, base, (value) =>
      $$invalidate(7, ($base = value))
    )

    const routerBase = derived([base, activeRoute], ([base, activeRoute]) => {
      // If there is no activeRoute, the routerBase will be identical to the base.
      if (activeRoute === null) {
        return base
      }

      const { path: basepath } = base
      const { route, uri } = activeRoute

      // Remove the potential /* or /*splatname from
      // the end of the child Routes relative paths.
      const path = route.default ? basepath : route.path.replace(/\*.*$/, '')

      return { path, uri }
    })

    function registerRoute(route) {
      const { path: basepath } = $base
      let { path } = route

      // We store the original path in the _path property so we can reuse
      // it when the basepath changes. The only thing that matters is that
      // the route reference is intact, so mutation is fine.
      route._path = path

      route.path = combinePaths(basepath, path)

      if (typeof window === 'undefined') {
        // In SSR we should set the activeRoute immediately if it is a match.
        // If there are more Routes being registered after a match is found,
        // we just skip them.
        if (hasActiveRoute) {
          return
        }

        const matchingRoute = match(route, $location.pathname)

        if (matchingRoute) {
          activeRoute.set(matchingRoute)
          hasActiveRoute = true
        }
      } else {
        routes.update((rs) => {
          rs.push(route)
          return rs
        })
      }
    }

    function unregisterRoute(route) {
      routes.update((rs) => {
        const index = rs.indexOf(route)
        rs.splice(index, 1)
        return rs
      })
    }

    if (!locationContext) {
      // The topmost Router in the tree is responsible for updating
      // the location store and supplying it through context.
      onMount(() => {
        const unlisten = globalHistory.listen((history) => {
          location.set(history.location)
        })

        return unlisten
      })

      setContext(LOCATION, location)
    }

    setContext(ROUTER, {
      activeRoute,
      base,
      routerBase,
      registerRoute,
      unregisterRoute,
    })

    const writable_props = ['basepath', 'url']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<Router> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('basepath' in $$props) $$invalidate(3, (basepath = $$props.basepath))
      if ('url' in $$props) $$invalidate(4, (url = $$props.url))
      if ('$$scope' in $$props) $$invalidate(8, ($$scope = $$props.$$scope))
    }

    $$self.$capture_state = () => ({
      getContext,
      setContext,
      onMount,
      writable,
      derived,
      LOCATION,
      ROUTER,
      globalHistory,
      pick,
      match,
      stripSlashes,
      combinePaths,
      basepath,
      url,
      locationContext,
      routerContext,
      routes,
      activeRoute,
      hasActiveRoute,
      location,
      base,
      routerBase,
      registerRoute,
      unregisterRoute,
      $location,
      $routes,
      $base,
    })

    $$self.$inject_state = ($$props) => {
      if ('basepath' in $$props) $$invalidate(3, (basepath = $$props.basepath))
      if ('url' in $$props) $$invalidate(4, (url = $$props.url))
      if ('hasActiveRoute' in $$props) hasActiveRoute = $$props.hasActiveRoute
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*$base*/ 128) {
        // This reactive statement will update all the Routes' path when
        // the basepath changes.
        {
          const { path: basepath } = $base

          routes.update((rs) => {
            rs.forEach((r) => (r.path = combinePaths(basepath, r._path)))
            return rs
          })
        }
      }

      if ($$self.$$.dirty & /*$routes, $location*/ 96) {
        // This reactive statement will be run when the Router is created
        // when there are no Routes and then again the following tick, so it
        // will not find an active Route in SSR and in the browser it will only
        // pick an active Route after all Routes have been registered.
        {
          const bestMatch = pick($routes, $location.pathname)
          activeRoute.set(bestMatch)
        }
      }
    }

    return [
      routes,
      location,
      base,
      basepath,
      url,
      $location,
      $routes,
      $base,
      $$scope,
      slots,
    ]
  }

  class Router extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$o, create_fragment$o, safe_not_equal, {
        basepath: 3,
        url: 4,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Router',
        options,
        id: create_fragment$o.name,
      })
    }

    get basepath() {
      throw new Error(
        "<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set basepath(value) {
      throw new Error(
        "<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get url() {
      throw new Error(
        "<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set url(value) {
      throw new Error(
        "<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* node_modules/svelte-routing/src/Route.svelte generated by Svelte v3.58.0 */

  const get_default_slot_changes = (dirty) => ({
    params: dirty & /*routeParams*/ 4,
    location: dirty & /*$location*/ 16,
  })

  const get_default_slot_context = (ctx) => ({
    params: /*routeParams*/ ctx[2],
    location: /*$location*/ ctx[4],
  })

  // (40:0) {#if $activeRoute !== null && $activeRoute.route === route}
  function create_if_block$c(ctx) {
    let current_block_type_index
    let if_block
    let if_block_anchor
    let current
    const if_block_creators = [create_if_block_1$8, create_else_block$5]
    const if_blocks = []

    function select_block_type(ctx, dirty) {
      if (/*component*/ ctx[0] !== null) return 0
      return 1
    }

    current_block_type_index = select_block_type(ctx)
    if_block = if_blocks[current_block_type_index] =
      if_block_creators[current_block_type_index](ctx)

    const block = {
      c: function create() {
        if_block.c()
        if_block_anchor = empty()
      },
      m: function mount(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type(ctx)

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null
          })

          check_outros()
          if_block = if_blocks[current_block_type_index]

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] =
              if_block_creators[current_block_type_index](ctx)
            if_block.c()
          } else {
            if_block.p(ctx, dirty)
          }

          transition_in(if_block, 1)
          if_block.m(if_block_anchor.parentNode, if_block_anchor)
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if_blocks[current_block_type_index].d(detaching)
        if (detaching) detach_dev(if_block_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$c.name,
      type: 'if',
      source:
        '(40:0) {#if $activeRoute !== null && $activeRoute.route === route}',
      ctx,
    })

    return block
  }

  // (43:2) {:else}
  function create_else_block$5(ctx) {
    let current
    const default_slot_template = /*#slots*/ ctx[10].default
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/ ctx[9],
      get_default_slot_context
    )

    const block = {
      c: function create() {
        if (default_slot) default_slot.c()
      },
      m: function mount(target, anchor) {
        if (default_slot) {
          default_slot.m(target, anchor)
        }

        current = true
      },
      p: function update(ctx, dirty) {
        if (default_slot) {
          if (
            default_slot.p &&
            (!current || dirty & /*$$scope, routeParams, $location*/ 532)
          ) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx,
              /*$$scope*/ ctx[9],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
                : get_slot_changes(
                    default_slot_template,
                    /*$$scope*/ ctx[9],
                    dirty,
                    get_default_slot_changes
                  ),
              get_default_slot_context
            )
          }
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(default_slot, local)
        current = true
      },
      o: function outro(local) {
        transition_out(default_slot, local)
        current = false
      },
      d: function destroy(detaching) {
        if (default_slot) default_slot.d(detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block$5.name,
      type: 'else',
      source: '(43:2) {:else}',
      ctx,
    })

    return block
  }

  // (41:2) {#if component !== null}
  function create_if_block_1$8(ctx) {
    let switch_instance
    let switch_instance_anchor
    let current

    const switch_instance_spread_levels = [
      { location: /*$location*/ ctx[4] },
      /*routeParams*/ ctx[2],
      /*routeProps*/ ctx[3],
    ]

    var switch_value = /*component*/ ctx[0]

    function switch_props(ctx) {
      let switch_instance_props = {}

      for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
        switch_instance_props = assign(
          switch_instance_props,
          switch_instance_spread_levels[i]
        )
      }

      return {
        props: switch_instance_props,
        $$inline: true,
      }
    }

    if (switch_value) {
      switch_instance = construct_svelte_component_dev(
        switch_value,
        switch_props()
      )
    }

    const block = {
      c: function create() {
        if (switch_instance) create_component(switch_instance.$$.fragment)
        switch_instance_anchor = empty()
      },
      m: function mount(target, anchor) {
        if (switch_instance) mount_component(switch_instance, target, anchor)
        insert_dev(target, switch_instance_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const switch_instance_changes =
          dirty & /*$location, routeParams, routeProps*/ 28
            ? get_spread_update(switch_instance_spread_levels, [
                dirty & /*$location*/ 16 && { location: /*$location*/ ctx[4] },
                dirty & /*routeParams*/ 4 &&
                  get_spread_object(/*routeParams*/ ctx[2]),
                dirty & /*routeProps*/ 8 &&
                  get_spread_object(/*routeProps*/ ctx[3]),
              ])
            : {}

        if (
          dirty & /*component*/ 1 &&
          switch_value !== (switch_value = /*component*/ ctx[0])
        ) {
          if (switch_instance) {
            group_outros()
            const old_component = switch_instance

            transition_out(old_component.$$.fragment, 1, 0, () => {
              destroy_component(old_component, 1)
            })

            check_outros()
          }

          if (switch_value) {
            switch_instance = construct_svelte_component_dev(
              switch_value,
              switch_props()
            )
            create_component(switch_instance.$$.fragment)
            transition_in(switch_instance.$$.fragment, 1)
            mount_component(
              switch_instance,
              switch_instance_anchor.parentNode,
              switch_instance_anchor
            )
          } else {
            switch_instance = null
          }
        } else if (switch_value) {
          switch_instance.$set(switch_instance_changes)
        }
      },
      i: function intro(local) {
        if (current) return
        if (switch_instance) transition_in(switch_instance.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        if (switch_instance) transition_out(switch_instance.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(switch_instance_anchor)
        if (switch_instance) destroy_component(switch_instance, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$8.name,
      type: 'if',
      source: '(41:2) {#if component !== null}',
      ctx,
    })

    return block
  }

  function create_fragment$n(ctx) {
    let if_block_anchor
    let current
    let if_block =
      /*$activeRoute*/ ctx[1] !== null &&
      /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7] &&
      create_if_block$c(ctx)

    const block = {
      c: function create() {
        if (if_block) if_block.c()
        if_block_anchor = empty()
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true
      },
      p: function update(ctx, [dirty]) {
        if (
          /*$activeRoute*/ ctx[1] !== null &&
          /*$activeRoute*/ ctx[1].route === /*route*/ ctx[7]
        ) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty & /*$activeRoute*/ 2) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block$c(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$n.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$n($$self, $$props, $$invalidate) {
    let $activeRoute
    let $location
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Route', slots, ['default'])
    let { path = '' } = $$props
    let { component = null } = $$props
    const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER)
    validate_store(activeRoute, 'activeRoute')
    component_subscribe($$self, activeRoute, (value) =>
      $$invalidate(1, ($activeRoute = value))
    )
    const location = getContext(LOCATION)
    validate_store(location, 'location')
    component_subscribe($$self, location, (value) =>
      $$invalidate(4, ($location = value))
    )

    const route = {
      path,
      // If no path prop is given, this Route will act as the default Route
      // that is rendered if no other Route in the Router is a match.
      default: path === '',
    }

    let routeParams = {}
    let routeProps = {}
    registerRoute(route)

    // There is no need to unregister Routes in SSR since it will all be
    // thrown away anyway.
    if (typeof window !== 'undefined') {
      onDestroy(() => {
        unregisterRoute(route)
      })
    }

    $$self.$$set = ($$new_props) => {
      $$invalidate(
        13,
        ($$props = assign(
          assign({}, $$props),
          exclude_internal_props($$new_props)
        ))
      )
      if ('path' in $$new_props) $$invalidate(8, (path = $$new_props.path))
      if ('component' in $$new_props)
        $$invalidate(0, (component = $$new_props.component))
      if ('$$scope' in $$new_props)
        $$invalidate(9, ($$scope = $$new_props.$$scope))
    }

    $$self.$capture_state = () => ({
      getContext,
      onDestroy,
      ROUTER,
      LOCATION,
      path,
      component,
      registerRoute,
      unregisterRoute,
      activeRoute,
      location,
      route,
      routeParams,
      routeProps,
      $activeRoute,
      $location,
    })

    $$self.$inject_state = ($$new_props) => {
      $$invalidate(13, ($$props = assign(assign({}, $$props), $$new_props)))
      if ('path' in $$props) $$invalidate(8, (path = $$new_props.path))
      if ('component' in $$props)
        $$invalidate(0, (component = $$new_props.component))
      if ('routeParams' in $$props)
        $$invalidate(2, (routeParams = $$new_props.routeParams))
      if ('routeProps' in $$props)
        $$invalidate(3, (routeProps = $$new_props.routeProps))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*$activeRoute*/ 2) {
        if ($activeRoute && $activeRoute.route === route) {
          $$invalidate(2, (routeParams = $activeRoute.params))
        }
      }

      {
        const { path, component, ...rest } = $$props
        $$invalidate(3, (routeProps = rest))
      }
    }

    $$props = exclude_internal_props($$props)

    return [
      component,
      $activeRoute,
      routeParams,
      routeProps,
      $location,
      activeRoute,
      location,
      route,
      path,
      $$scope,
      slots,
    ]
  }

  class Route extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$n, create_fragment$n, safe_not_equal, {
        path: 8,
        component: 0,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Route',
        options,
        id: create_fragment$n.name,
      })
    }

    get path() {
      throw new Error(
        "<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set path(value) {
      throw new Error(
        "<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get component() {
      throw new Error(
        "<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set component(value) {
      throw new Error(
        "<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* node_modules/svelte-routing/src/Link.svelte generated by Svelte v3.58.0 */
  const file$l = 'node_modules/svelte-routing/src/Link.svelte'

  function create_fragment$m(ctx) {
    let a
    let current
    let mounted
    let dispose
    const default_slot_template = /*#slots*/ ctx[16].default
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/ ctx[15],
      null
    )

    let a_levels = [
      { href: /*href*/ ctx[0] },
      { 'aria-current': /*ariaCurrent*/ ctx[2] },
      /*props*/ ctx[1],
      /*$$restProps*/ ctx[6],
    ]

    let a_data = {}

    for (let i = 0; i < a_levels.length; i += 1) {
      a_data = assign(a_data, a_levels[i])
    }

    const block = {
      c: function create() {
        a = element('a')
        if (default_slot) default_slot.c()
        set_attributes(a, a_data)
        add_location(a, file$l, 40, 0, 1249)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, a, anchor)

        if (default_slot) {
          default_slot.m(a, null)
        }

        current = true

        if (!mounted) {
          dispose = listen_dev(
            a,
            'click',
            /*onClick*/ ctx[5],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/ 32768)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx,
              /*$$scope*/ ctx[15],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[15])
                : get_slot_changes(
                    default_slot_template,
                    /*$$scope*/ ctx[15],
                    dirty,
                    null
                  ),
              null
            )
          }
        }

        set_attributes(
          a,
          (a_data = get_spread_update(a_levels, [
            (!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
            (!current || dirty & /*ariaCurrent*/ 4) && {
              'aria-current': /*ariaCurrent*/ ctx[2],
            },
            dirty & /*props*/ 2 && /*props*/ ctx[1],
            dirty & /*$$restProps*/ 64 && /*$$restProps*/ ctx[6],
          ]))
        )
      },
      i: function intro(local) {
        if (current) return
        transition_in(default_slot, local)
        current = true
      },
      o: function outro(local) {
        transition_out(default_slot, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(a)
        if (default_slot) default_slot.d(detaching)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$m.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$m($$self, $$props, $$invalidate) {
    let ariaCurrent
    const omit_props_names = ['to', 'replace', 'state', 'getProps']
    let $$restProps = compute_rest_props($$props, omit_props_names)
    let $location
    let $base
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Link', slots, ['default'])
    let { to = '#' } = $$props
    let { replace = false } = $$props
    let { state = {} } = $$props
    let { getProps = () => ({}) } = $$props
    const { base } = getContext(ROUTER)
    validate_store(base, 'base')
    component_subscribe($$self, base, (value) =>
      $$invalidate(14, ($base = value))
    )
    const location = getContext(LOCATION)
    validate_store(location, 'location')
    component_subscribe($$self, location, (value) =>
      $$invalidate(13, ($location = value))
    )
    const dispatch = createEventDispatcher()
    let href, isPartiallyCurrent, isCurrent, props

    function onClick(event) {
      dispatch('click', event)

      if (shouldNavigate(event)) {
        event.preventDefault()

        // Don't push another entry to the history stack when the user
        // clicks on a Link to the page they are currently on.
        const shouldReplace = $location.pathname === href || replace

        navigate(href, { state, replace: shouldReplace })
      }
    }

    $$self.$$set = ($$new_props) => {
      $$props = assign(assign({}, $$props), exclude_internal_props($$new_props))
      $$invalidate(
        6,
        ($$restProps = compute_rest_props($$props, omit_props_names))
      )
      if ('to' in $$new_props) $$invalidate(7, (to = $$new_props.to))
      if ('replace' in $$new_props)
        $$invalidate(8, (replace = $$new_props.replace))
      if ('state' in $$new_props) $$invalidate(9, (state = $$new_props.state))
      if ('getProps' in $$new_props)
        $$invalidate(10, (getProps = $$new_props.getProps))
      if ('$$scope' in $$new_props)
        $$invalidate(15, ($$scope = $$new_props.$$scope))
    }

    $$self.$capture_state = () => ({
      getContext,
      createEventDispatcher,
      ROUTER,
      LOCATION,
      navigate,
      startsWith,
      resolve,
      shouldNavigate,
      to,
      replace,
      state,
      getProps,
      base,
      location,
      dispatch,
      href,
      isPartiallyCurrent,
      isCurrent,
      props,
      onClick,
      ariaCurrent,
      $location,
      $base,
    })

    $$self.$inject_state = ($$new_props) => {
      if ('to' in $$props) $$invalidate(7, (to = $$new_props.to))
      if ('replace' in $$props) $$invalidate(8, (replace = $$new_props.replace))
      if ('state' in $$props) $$invalidate(9, (state = $$new_props.state))
      if ('getProps' in $$props)
        $$invalidate(10, (getProps = $$new_props.getProps))
      if ('href' in $$props) $$invalidate(0, (href = $$new_props.href))
      if ('isPartiallyCurrent' in $$props)
        $$invalidate(11, (isPartiallyCurrent = $$new_props.isPartiallyCurrent))
      if ('isCurrent' in $$props)
        $$invalidate(12, (isCurrent = $$new_props.isCurrent))
      if ('props' in $$props) $$invalidate(1, (props = $$new_props.props))
      if ('ariaCurrent' in $$props)
        $$invalidate(2, (ariaCurrent = $$new_props.ariaCurrent))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*to, $base*/ 16512) {
        $$invalidate(
          0,
          (href = to === '/' ? $base.uri : resolve(to, $base.uri))
        )
      }

      if ($$self.$$.dirty & /*$location, href*/ 8193) {
        $$invalidate(
          11,
          (isPartiallyCurrent = startsWith($location.pathname, href))
        )
      }

      if ($$self.$$.dirty & /*href, $location*/ 8193) {
        $$invalidate(12, (isCurrent = href === $location.pathname))
      }

      if ($$self.$$.dirty & /*isCurrent*/ 4096) {
        $$invalidate(2, (ariaCurrent = isCurrent ? 'page' : undefined))
      }

      if (
        $$self.$$.dirty &
        /*getProps, $location, href, isPartiallyCurrent, isCurrent*/ 15361
      ) {
        $$invalidate(
          1,
          (props = getProps({
            location: $location,
            href,
            isPartiallyCurrent,
            isCurrent,
          }))
        )
      }
    }

    return [
      href,
      props,
      ariaCurrent,
      base,
      location,
      onClick,
      $$restProps,
      to,
      replace,
      state,
      getProps,
      isPartiallyCurrent,
      isCurrent,
      $location,
      $base,
      $$scope,
      slots,
    ]
  }

  class Link extends SvelteComponentDev {
    constructor(options) {
      super(options)

      init(this, options, instance$m, create_fragment$m, safe_not_equal, {
        to: 7,
        replace: 8,
        state: 9,
        getProps: 10,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Link',
        options,
        id: create_fragment$m.name,
      })
    }

    get to() {
      throw new Error(
        "<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set to(value) {
      throw new Error(
        "<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get replace() {
      throw new Error(
        "<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set replace(value) {
      throw new Error(
        "<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get state() {
      throw new Error(
        "<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set state(value) {
      throw new Error(
        "<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get getProps() {
      throw new Error(
        "<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set getProps(value) {
      throw new Error(
        "<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/components/Modal.svelte generated by Svelte v3.58.0 */

  const file$k = 'src/components/Modal.svelte'
  const get_header_slot_changes = (dirty) => ({})
  const get_header_slot_context = (ctx) => ({})

  function create_fragment$l(ctx) {
    let dialog_1
    let div
    let t0
    let hr0
    let t1
    let t2
    let hr1
    let t3
    let button
    let current
    let mounted
    let dispose
    const header_slot_template = /*#slots*/ ctx[3].header
    const header_slot = create_slot(
      header_slot_template,
      ctx,
      /*$$scope*/ ctx[2],
      get_header_slot_context
    )
    const default_slot_template = /*#slots*/ ctx[3].default
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/ ctx[2],
      null
    )

    const block = {
      c: function create() {
        dialog_1 = element('dialog')
        div = element('div')
        if (header_slot) header_slot.c()
        t0 = space()
        hr0 = element('hr')
        t1 = space()
        if (default_slot) default_slot.c()
        t2 = space()
        hr1 = element('hr')
        t3 = space()
        button = element('button')
        button.textContent = 'OK'
        add_location(hr0, file$k, 63, 4, 1141)
        add_location(hr1, file$k, 65, 4, 1165)
        button.autofocus = true
        attr_dev(button, 'class', 'svelte-165gxgw')
        add_location(button, file$k, 67, 4, 1218)
        attr_dev(div, 'class', 'modal-container svelte-165gxgw')
        add_location(div, file$k, 61, 2, 1055)
        attr_dev(dialog_1, 'class', 'svelte-165gxgw')
        add_location(dialog_1, file$k, 56, 0, 944)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, dialog_1, anchor)
        append_dev(dialog_1, div)

        if (header_slot) {
          header_slot.m(div, null)
        }

        append_dev(div, t0)
        append_dev(div, hr0)
        append_dev(div, t1)

        if (default_slot) {
          default_slot.m(div, null)
        }

        append_dev(div, t2)
        append_dev(div, hr1)
        append_dev(div, t3)
        append_dev(div, button)
        /*dialog_1_binding*/ ctx[6](dialog_1)
        current = true
        button.focus()

        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              'click',
              /*click_handler_1*/ ctx[5],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              div,
              'click',
              stop_propagation(/*click_handler*/ ctx[4]),
              false,
              false,
              true,
              false
            ),
            listen_dev(
              dialog_1,
              'close',
              /*close_handler*/ ctx[7],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              dialog_1,
              'click',
              self$1(/*click_handler_2*/ ctx[8]),
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (header_slot) {
          if (header_slot.p && (!current || dirty & /*$$scope*/ 4)) {
            update_slot_base(
              header_slot,
              header_slot_template,
              ctx,
              /*$$scope*/ ctx[2],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
                : get_slot_changes(
                    header_slot_template,
                    /*$$scope*/ ctx[2],
                    dirty,
                    get_header_slot_changes
                  ),
              get_header_slot_context
            )
          }
        }

        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/ 4)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx,
              /*$$scope*/ ctx[2],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[2])
                : get_slot_changes(
                    default_slot_template,
                    /*$$scope*/ ctx[2],
                    dirty,
                    null
                  ),
              null
            )
          }
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(header_slot, local)
        transition_in(default_slot, local)
        current = true
      },
      o: function outro(local) {
        transition_out(header_slot, local)
        transition_out(default_slot, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(dialog_1)
        if (header_slot) header_slot.d(detaching)
        if (default_slot) default_slot.d(detaching)
        /*dialog_1_binding*/ ctx[6](null)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$l.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$l($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Modal', slots, ['header', 'default'])
    let { showModal } = $$props // boolean
    let dialog // HTMLDialogElement

    $$self.$$.on_mount.push(function () {
      if (
        showModal === undefined &&
        !(
          'showModal' in $$props ||
          $$self.$$.bound[$$self.$$.props['showModal']]
        )
      ) {
        console.warn("<Modal> was created without expected prop 'showModal'")
      }
    })

    const writable_props = ['showModal']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<Modal> was created with unknown prop '${key}'`)
    })

    function click_handler(event) {
      bubble.call(this, $$self, event)
    }

    const click_handler_1 = () => dialog.close()

    function dialog_1_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        dialog = $$value
        $$invalidate(1, dialog)
      })
    }

    const close_handler = () => $$invalidate(0, (showModal = false))
    const click_handler_2 = () => dialog.close()

    $$self.$$set = ($$props) => {
      if ('showModal' in $$props)
        $$invalidate(0, (showModal = $$props.showModal))
      if ('$$scope' in $$props) $$invalidate(2, ($$scope = $$props.$$scope))
    }

    $$self.$capture_state = () => ({ showModal, dialog })

    $$self.$inject_state = ($$props) => {
      if ('showModal' in $$props)
        $$invalidate(0, (showModal = $$props.showModal))
      if ('dialog' in $$props) $$invalidate(1, (dialog = $$props.dialog))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*dialog, showModal*/ 3) {
        if (dialog && showModal) dialog.showModal()
      }
    }

    return [
      showModal,
      dialog,
      $$scope,
      slots,
      click_handler,
      click_handler_1,
      dialog_1_binding,
      close_handler,
      click_handler_2,
    ]
  }

  class Modal extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$l, create_fragment$l, safe_not_equal, {
        showModal: 0,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Modal',
        options,
        id: create_fragment$l.name,
      })
    }

    get showModal() {
      throw new Error(
        "<Modal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set showModal(value) {
      throw new Error(
        "<Modal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/IngestCex.svelte generated by Svelte v3.58.0 */
  const file$j = 'src/routes/IngestCex.svelte'

  // (213:10) {#if loading}
  function create_if_block_1$7(ctx) {
    let div1
    let div0

    const block = {
      c: function create() {
        div1 = element('div')
        div0 = element('div')
        attr_dev(div0, 'class', 'spinner svelte-153z0p7')
        add_location(div0, file$j, 214, 14, 5300)
        attr_dev(div1, 'class', 'spinner-container svelte-153z0p7')
        add_location(div1, file$j, 213, 12, 5254)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor)
        append_dev(div1, div0)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$7.name,
      type: 'if',
      source: '(213:10) {#if loading}',
      ctx,
    })

    return block
  }

  // (224:0) {#if showModal}
  function create_if_block$b(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[15](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot$5],
        default: [create_default_slot$6],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[6] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[6]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (dirty & /*$$scope, modalHeader, modalText*/ 131456) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty & /*showModal*/ 64) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[6]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$b.name,
      type: 'if',
      source: '(224:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (225:2) <Modal bind:showModal>
  function create_default_slot$6(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[8])
        add_location(h4, file$j, 227, 6, 5515)
        add_location(body, file$j, 226, 4, 5502)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalText*/ 256) set_data_dev(t, /*modalText*/ ctx[8])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$6.name,
      type: 'slot',
      source: '(225:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (226:4)
  function create_header_slot$5(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[7])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$j, 225, 4, 5461)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalHeader*/ 128) set_data_dev(t, /*modalHeader*/ ctx[7])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot$5.name,
      type: 'slot',
      source: '(226:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$k(ctx) {
    let div6
    let div5
    let div4
    let form
    let div0
    let h5
    let t1
    let div1
    let label0
    let t3
    let input0
    let t4
    let div2
    let label1
    let t6
    let input1
    let t7
    let h6
    let t8
    let t9
    let button0
    let t11
    let div3
    let button1
    let t12
    let button1_disabled_value
    let t13
    let t14
    let if_block1_anchor
    let current
    let mounted
    let dispose
    let if_block0 = /*loading*/ ctx[4] && create_if_block_1$7(ctx)
    let if_block1 = /*showModal*/ ctx[6] && create_if_block$b(ctx)

    const block = {
      c: function create() {
        div6 = element('div')
        div5 = element('div')
        div4 = element('div')
        form = element('form')
        div0 = element('div')
        h5 = element('h5')
        h5.textContent = 'Add a new collection (CEX file) to Brucheion.'
        t1 = space()
        div1 = element('div')
        label0 = element('label')
        label0.textContent = 'Title:'
        t3 = space()
        input0 = element('input')
        t4 = space()
        div2 = element('div')
        label1 = element('label')
        label1.textContent = 'CEX-File:'
        t6 = space()
        input1 = element('input')
        t7 = space()
        h6 = element('h6')
        t8 = text(/*cexFile*/ ctx[0])
        t9 = space()
        button0 = element('button')
        button0.textContent = 'Browse'
        t11 = space()
        div3 = element('div')
        button1 = element('button')
        t12 = text('Submit')
        t13 = space()
        if (if_block0) if_block0.c()
        t14 = space()
        if (if_block1) if_block1.c()
        if_block1_anchor = empty()
        add_location(h5, file$j, 181, 10, 4231)
        attr_dev(div0, 'class', 'form-group text-center svelte-153z0p7')
        add_location(div0, file$j, 180, 8, 4184)
        attr_dev(label0, 'for', 'title')
        add_location(label0, file$j, 184, 10, 4344)
        attr_dev(input0, 'type', 'text')
        attr_dev(input0, 'class', 'form-control')
        attr_dev(input0, 'id', 'title')
        add_location(input0, file$j, 185, 10, 4388)
        attr_dev(div1, 'class', 'form-group svelte-153z0p7')
        add_location(div1, file$j, 183, 8, 4309)
        attr_dev(label1, 'for', 'cex-file')
        add_location(label1, file$j, 192, 10, 4567)
        attr_dev(input1, 'id', 'cex-file')
        attr_dev(input1, 'type', 'file')
        attr_dev(input1, 'accept', '.cex')
        attr_dev(input1, 'class', 'input-file svelte-153z0p7')
        add_location(input1, file$j, 193, 10, 4617)
        add_location(h6, file$j, 200, 10, 4810)
        attr_dev(button0, 'class', 'custom-button svelte-153z0p7')
        add_location(button0, file$j, 201, 10, 4839)
        attr_dev(div2, 'class', 'form-group svelte-153z0p7')
        add_location(div2, file$j, 191, 8, 4532)
        attr_dev(button1, 'class', 'btn btn-primary is-success')
        attr_dev(button1, 'type', 'submit')
        button1.disabled = button1_disabled_value =
          !(/*complete*/ ctx[3]) || /*loading*/ ctx[4]
        toggle_class(button1, 'is-loading', /*loading*/ ctx[4])
        add_location(button1, file$j, 204, 10, 4978)
        attr_dev(div3, 'class', 'form-group text-left svelte-153z0p7')
        add_location(div3, file$j, 203, 8, 4933)
        add_location(form, file$j, 179, 6, 4124)
        attr_dev(div4, 'class', 'col-4 mx-auto ')
        add_location(div4, file$j, 178, 4, 4089)
        attr_dev(div5, 'class', 'row')
        add_location(div5, file$j, 177, 2, 4067)
        attr_dev(div6, 'class', 'container-fluid')
        add_location(div6, file$j, 176, 0, 4035)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div6, anchor)
        append_dev(div6, div5)
        append_dev(div5, div4)
        append_dev(div4, form)
        append_dev(form, div0)
        append_dev(div0, h5)
        append_dev(form, t1)
        append_dev(form, div1)
        append_dev(div1, label0)
        append_dev(div1, t3)
        append_dev(div1, input0)
        set_input_value(input0, /*title*/ ctx[5])
        append_dev(form, t4)
        append_dev(form, div2)
        append_dev(div2, label1)
        append_dev(div2, t6)
        append_dev(div2, input1)
        /*input1_binding*/ ctx[13](input1)
        append_dev(div2, t7)
        append_dev(div2, h6)
        append_dev(h6, t8)
        append_dev(div2, t9)
        append_dev(div2, button0)
        append_dev(form, t11)
        append_dev(form, div3)
        append_dev(div3, button1)
        append_dev(button1, t12)
        append_dev(div3, t13)
        if (if_block0) if_block0.m(div3, null)
        /*form_binding*/ ctx[14](form)
        insert_dev(target, t14, anchor)
        if (if_block1) if_block1.m(target, anchor)
        insert_dev(target, if_block1_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(input0, 'input', /*input0_input_handler*/ ctx[11]),
            listen_dev(input1, 'change', /*input1_change_handler*/ ctx[12]),
            listen_dev(
              button0,
              'click',
              /*onButtonClick*/ ctx[10],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              'click',
              /*handleSubmit*/ ctx[9],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              form,
              'submit',
              /*handleSubmit*/ ctx[9],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*title*/ 32 && input0.value !== /*title*/ ctx[5]) {
          set_input_value(input0, /*title*/ ctx[5])
        }

        if (!current || dirty & /*cexFile*/ 1)
          set_data_dev(t8, /*cexFile*/ ctx[0])

        if (
          !current ||
          (dirty & /*complete, loading*/ 24 &&
            button1_disabled_value !==
              (button1_disabled_value =
                !(/*complete*/ ctx[3]) || /*loading*/ ctx[4]))
        ) {
          prop_dev(button1, 'disabled', button1_disabled_value)
        }

        if (!current || dirty & /*loading*/ 16) {
          toggle_class(button1, 'is-loading', /*loading*/ ctx[4])
        }

        if (/*loading*/ ctx[4]) {
          if (if_block0);
          else {
            if_block0 = create_if_block_1$7(ctx)
            if_block0.c()
            if_block0.m(div3, null)
          }
        } else if (if_block0) {
          if_block0.d(1)
          if_block0 = null
        }

        if (/*showModal*/ ctx[6]) {
          if (if_block1) {
            if_block1.p(ctx, dirty)

            if (dirty & /*showModal*/ 64) {
              transition_in(if_block1, 1)
            }
          } else {
            if_block1 = create_if_block$b(ctx)
            if_block1.c()
            transition_in(if_block1, 1)
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor)
          }
        } else if (if_block1) {
          group_outros()

          transition_out(if_block1, 1, 1, () => {
            if_block1 = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block1)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block1)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div6)
        /*input1_binding*/ ctx[13](null)
        if (if_block0) if_block0.d()
        /*form_binding*/ ctx[14](null)
        if (detaching) detach_dev(t14)
        if (if_block1) if_block1.d(detaching)
        if (detaching) detach_dev(if_block1_anchor)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$k.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function getFileName(fullPath) {
    var startIndex =
      fullPath.indexOf('\\') >= 0
        ? fullPath.lastIndexOf('\\')
        : fullPath.lastIndexOf('/')

    var filename = fullPath.substring(startIndex)

    if (filename.indexOf('\\') === 0 || filename.indexOf('/') === 0) {
      filename = filename.substring(1)
    }

    return filename
  }

  function instance$k($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('IngestCex', slots, [])
    let inputRef, formRef
    let cexFile = ''
    let complete = false
    let loading = false
    let title = ''
    let showModal = false,
      modalHeader,
      modalText

    const errorMessages = {
      bad_file_ext:
        'The submitted file did not have the corresponding .cex file extension.',
      bad_file_body: 'The submitted file could not be read.',
      file_not_found: 'The submitted file could not be read.',
      bad_cex_data:
        'The CEX data contained erroneous data and could not be processed.',
      null_title: 'Type the title!',
      unknown:
        'An unknown error occurred. This is not necessarily due to the uploaded CEX data. Please try again and log in again if necessary.',
    }

    async function handleSubmit(event) {
      event.preventDefault()

      if (!complete) {
        return
      }

      if (inputRef.files.length < 1) {
        $$invalidate(7, (modalHeader = 'Failure'))
        $$invalidate(8, (modalText = errorMessages.file_not_found))
        $$invalidate(6, (showModal = true))
        return
      }

      //console.log('title', title.length)
      if (title.length == 0) {
        $$invalidate(4, (loading = false))
        $$invalidate(7, (modalHeader = 'Failure'))
        $$invalidate(8, (modalText = errorMessages.null_title))
        $$invalidate(6, (showModal = true))
        return
      }

      const file = inputRef.files[0]
      const formData = new FormData()
      formData.append('title', title)
      formData.append('files', file)
      let res
      $$invalidate(4, (loading = true))

      try {
        res = await fetch('/api/v2/cexupload', {
          method: 'POST',
          body: formData,
          redirect: 'error',
          credentials: 'same-origin',
        })
      } catch (err) {
        $$invalidate(4, (loading = false))
        $$invalidate(7, (modalHeader = 'Failure'))
        $$invalidate(8, (modalText = '1.' + errorMessages.unknown))
        $$invalidate(6, (showModal = true))
        return
      }

      $$invalidate(4, (loading = false))
      const data = await res.json()

      if (res.status !== 200) {
        try {
          if (typeof errorMessages[data.message] != 'undefined') {
            $$invalidate(8, (modalText = errorMessages[data.message]))
          } else {
            $$invalidate(7, (modalHeader = 'Warning'))
            $$invalidate(8, (modalText = data.message))
          }

          $$invalidate(6, (showModal = true))
          return
        } catch (err) {
          $$invalidate(7, (modalHeader = 'Failure'))
          $$invalidate(8, (modalText = '3.' + errorMessages.unknown))
          $$invalidate(6, (showModal = true))
          return
        }
      } else {
        //  console.log('!!!!!!!!!!!!!!!!!!!!data', data)
        formRef.reset()
      }

      // const data = await res.json()
      // console.log('data', data.message)
      $$invalidate(8, (modalText = data.message))

      $$invalidate(7, (modalHeader = 'Success'))
      $$invalidate(6, (showModal = true))
      window.location.href = '/view/' + data.data + '/default'
    }

    function onButtonClick() {
      inputRef.addEventListener('change', (event) => {
        const file = event.target.files[0]

        if (file) {
          const fileName = getFileName(file.name)
          $$invalidate(0, (cexFile = fileName))
        }
      })

      inputRef.click()
    }

    const writable_props = []

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<IngestCex> was created with unknown prop '${key}'`)
    })

    function input0_input_handler() {
      title = this.value
      $$invalidate(5, title)
    }

    function input1_change_handler() {
      cexFile = this.value
      $$invalidate(0, cexFile)
    }

    function input1_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        inputRef = $$value
        $$invalidate(1, inputRef)
      })
    }

    function form_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        formRef = $$value
        $$invalidate(2, formRef)
      })
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(6, showModal)
    }

    $$self.$capture_state = () => ({
      Modal,
      inputRef,
      formRef,
      cexFile,
      complete,
      loading,
      title,
      showModal,
      modalHeader,
      modalText,
      errorMessages,
      handleSubmit,
      onButtonClick,
      getFileName,
    })

    $$self.$inject_state = ($$props) => {
      if ('inputRef' in $$props) $$invalidate(1, (inputRef = $$props.inputRef))
      if ('formRef' in $$props) $$invalidate(2, (formRef = $$props.formRef))
      if ('cexFile' in $$props) $$invalidate(0, (cexFile = $$props.cexFile))
      if ('complete' in $$props) $$invalidate(3, (complete = $$props.complete))
      if ('loading' in $$props) $$invalidate(4, (loading = $$props.loading))
      if ('title' in $$props) $$invalidate(5, (title = $$props.title))
      if ('showModal' in $$props)
        $$invalidate(6, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(7, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(8, (modalText = $$props.modalText))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*cexFile*/ 1) {
        $$invalidate(3, (complete = !!cexFile))
      }
    }

    return [
      cexFile,
      inputRef,
      formRef,
      complete,
      loading,
      title,
      showModal,
      modalHeader,
      modalText,
      handleSubmit,
      onButtonClick,
      input0_input_handler,
      input1_change_handler,
      input1_binding,
      form_binding,
      modal_showModal_binding,
    ]
  }

  class IngestCex extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$k, create_fragment$k, safe_not_equal, {})

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'IngestCex',
        options,
        id: create_fragment$k.name,
      })
    }
  }

  /* src/routes/AddCollection.svelte generated by Svelte v3.58.0 */

  const { console: console_1$7 } = globals
  const file$i = 'src/routes/AddCollection.svelte'

  // (155:0) {#if showModal}
  function create_if_block$a(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[8](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot$4],
        default: [create_default_slot$5],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[2] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[2]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (dirty & /*$$scope, modalHeader, modalText*/ 4120) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty & /*showModal*/ 4) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[2]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$a.name,
      type: 'if',
      source: '(155:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (156:2) <Modal bind:showModal>
  function create_default_slot$5(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[4])
        add_location(h4, file$i, 158, 6, 3656)
        add_location(body, file$i, 157, 4, 3643)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalText*/ 16) set_data_dev(t, /*modalText*/ ctx[4])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$5.name,
      type: 'slot',
      source: '(156:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (157:4)
  function create_header_slot$4(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[3])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$i, 156, 4, 3602)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalHeader*/ 8) set_data_dev(t, /*modalHeader*/ ctx[3])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot$4.name,
      type: 'slot',
      source: '(157:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$j(ctx) {
    let div5
    let div4
    let div3
    let form
    let div0
    let h5
    let t1
    let div1
    let label
    let t3
    let input
    let t4
    let div2
    let button
    let t6
    let if_block_anchor
    let current
    let mounted
    let dispose
    let if_block = /*showModal*/ ctx[2] && create_if_block$a(ctx)

    const block = {
      c: function create() {
        div5 = element('div')
        div4 = element('div')
        div3 = element('div')
        form = element('form')
        div0 = element('div')
        h5 = element('h5')
        h5.textContent = 'Add a new collection to Brucheion.'
        t1 = space()
        div1 = element('div')
        label = element('label')
        label.textContent = 'Title:'
        t3 = space()
        input = element('input')
        t4 = space()
        div2 = element('div')
        button = element('button')
        button.textContent = 'Submit'
        t6 = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
        add_location(h5, file$i, 132, 10, 3009)
        attr_dev(div0, 'class', 'form-group text-center svelte-153z0p7')
        add_location(div0, file$i, 131, 8, 2962)
        attr_dev(label, 'for', 'title')
        add_location(label, file$i, 135, 10, 3111)
        attr_dev(input, 'type', 'text')
        attr_dev(input, 'class', 'form-control')
        attr_dev(input, 'id', 'title')
        add_location(input, file$i, 136, 10, 3155)
        attr_dev(div1, 'class', 'form-group svelte-153z0p7')
        add_location(div1, file$i, 134, 8, 3076)
        attr_dev(button, 'class', 'btn btn-primary is-success')
        attr_dev(button, 'type', 'submit')
        add_location(button, file$i, 143, 10, 3344)
        attr_dev(div2, 'class', 'form-group text-left svelte-153z0p7')
        add_location(div2, file$i, 142, 8, 3299)
        add_location(form, file$i, 130, 6, 2902)
        attr_dev(div3, 'class', 'col-4 mx-auto ')
        add_location(div3, file$i, 129, 4, 2867)
        attr_dev(div4, 'class', 'row')
        add_location(div4, file$i, 128, 2, 2845)
        attr_dev(div5, 'class', 'container-fluid')
        add_location(div5, file$i, 127, 0, 2813)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div5, anchor)
        append_dev(div5, div4)
        append_dev(div4, div3)
        append_dev(div3, form)
        append_dev(form, div0)
        append_dev(div0, h5)
        append_dev(form, t1)
        append_dev(form, div1)
        append_dev(div1, label)
        append_dev(div1, t3)
        append_dev(div1, input)
        set_input_value(input, /*title*/ ctx[1])
        append_dev(form, t4)
        append_dev(form, div2)
        append_dev(div2, button)
        /*form_binding*/ ctx[7](form)
        insert_dev(target, t6, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(input, 'input', /*input_input_handler*/ ctx[6]),
            listen_dev(
              button,
              'click',
              /*handleSubmit*/ ctx[5],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              form,
              'submit',
              /*handleSubmit*/ ctx[5],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*title*/ 2 && input.value !== /*title*/ ctx[1]) {
          set_input_value(input, /*title*/ ctx[1])
        }

        if (/*showModal*/ ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty & /*showModal*/ 4) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block$a(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div5)
        /*form_binding*/ ctx[7](null)
        if (detaching) detach_dev(t6)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$j.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$j($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('AddCollection', slots, [])
    let inputRef, formRef
    let errorMessage = null
    let title = ''
    let showModal = false,
      modalHeader,
      modalText

    const errorMessages = {
      bad_file_ext:
        'The submitted file did not have the corresponding .cex file extension.',
      bad_file_body: 'The submitted file could not be read.',
      file_not_found: 'The submitted file could not be read.',
      bad_cex_data:
        'The CEX data contained erroneous data and could not be processed.',
      null_title: 'Type the title!',
      unknown:
        'An unknown error occurred. This is not necessarily due to the uploaded CEX data. Please try again and log in again if necessary.',
    }

    async function handleSubmit(event) {
      event.preventDefault()
      console.log('title', title.length)

      if (title.length == 0) {
        $$invalidate(3, (modalHeader = 'Failure'))
        $$invalidate(4, (modalText = errorMessages.null_title))
        $$invalidate(2, (showModal = true))
        return
      }

      const formData = new FormData()
      formData.append('title', title)
      let res

      try {
        res = await fetch('/api/v2/addcollection', {
          method: 'POST',
          body: formData,
          redirect: 'error',
          credentials: 'same-origin',
        })
      } catch (err) {
        $$invalidate(3, (modalHeader = 'Failure'))
        $$invalidate(4, (modalText = errorMessages.unknown + '1'))
        $$invalidate(2, (showModal = true))
        return
      }

      const data = await res.json()

      if (res.status !== 200) {
        try {
          if (typeof errorMessages[data.Message] != 'undefined') {
            errorMessage = errorMessages[data.Message]
          } else {
            errorMessage = data.Message
          }
        } catch (err) {
          $$invalidate(3, (modalHeader = 'Failure'))
          $$invalidate(4, (modalText = errorMessages.unknown + '3'))
          $$invalidate(2, (showModal = true))
          return
        }
      } else {
        formRef.reset()
      }

      $$invalidate(3, (modalHeader = 'Success'))
      $$invalidate(4, (modalText = 'Collection added'))
      $$invalidate(2, (showModal = true))
      window.location.href = '/view/' + data.data + '/default'
    }

    const writable_props = []

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$7.warn(
          `<AddCollection> was created with unknown prop '${key}'`
        )
    })

    function input_input_handler() {
      title = this.value
      $$invalidate(1, title)
    }

    function form_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        formRef = $$value
        $$invalidate(0, formRef)
      })
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(2, showModal)
    }

    $$self.$capture_state = () => ({
      Modal,
      inputRef,
      formRef,
      errorMessage,
      title,
      showModal,
      modalHeader,
      modalText,
      errorMessages,
      handleSubmit,
    })

    $$self.$inject_state = ($$props) => {
      if ('inputRef' in $$props) inputRef = $$props.inputRef
      if ('formRef' in $$props) $$invalidate(0, (formRef = $$props.formRef))
      if ('errorMessage' in $$props) errorMessage = $$props.errorMessage
      if ('title' in $$props) $$invalidate(1, (title = $$props.title))
      if ('showModal' in $$props)
        $$invalidate(2, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(3, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(4, (modalText = $$props.modalText))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [
      formRef,
      title,
      showModal,
      modalHeader,
      modalText,
      handleSubmit,
      input_input_handler,
      form_binding,
      modal_showModal_binding,
    ]
  }

  class AddCollection extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$j, create_fragment$j, safe_not_equal, {})

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'AddCollection',
        options,
        id: create_fragment$j.name,
      })
    }
  }

  var commonjsGlobal =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : typeof self !== 'undefined'
      ? self
      : {}

  function createCommonjsModule(fn, basedir, module) {
    return (
      (module = {
        path: basedir,
        exports: {},
        require: function (path, base) {
          return commonjsRequire(
            path,
            base === undefined || base === null ? module.path : base
          )
        },
      }),
      fn(module, module.exports),
      module.exports
    )
  }

  function commonjsRequire() {
    throw new Error(
      'Dynamic requires are not currently supported by @rollup/plugin-commonjs'
    )
  }

  var openseadragon = createCommonjsModule(function (module) {
    //! openseadragon 4.0.0
    //! Built on 2022-12-16
    //! Git commit: v4.0.0-0-8e6196a
    //! http://openseadragon.github.io
    //! License: http://openseadragon.github.io/license/

    /*
     * OpenSeadragon
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    /*
     * Portions of this source file taken from jQuery:
     *
     * Copyright 2011 John Resig
     *
     * Permission is hereby granted, free of charge, to any person obtaining
     * a copy of this software and associated documentation files (the
     * "Software"), to deal in the Software without restriction, including
     * without limitation the rights to use, copy, modify, merge, publish,
     * distribute, sublicense, and/or sell copies of the Software, and to
     * permit persons to whom the Software is furnished to do so, subject to
     * the following conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
     * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
     * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
     * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */

    /*
     * Portions of this source file taken from mattsnider.com:
     *
     * Copyright (c) 2006-2022 Matt Snider
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included
     * in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
     * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
     * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
     * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
     * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
     * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR
     * THE USE OR OTHER DEALINGS IN THE SOFTWARE.
     */

    /**
     * @namespace OpenSeadragon
     * @version openseadragon 4.0.0
     * @classdesc The root namespace for OpenSeadragon.  All utility methods
     * and classes are defined on or below this namespace.
     *
     */

    // Typedefs

    /**
      * All required and optional settings for instantiating a new instance of an OpenSeadragon image viewer.
      *
      * @typedef {Object} Options
      * @memberof OpenSeadragon
      *
      * @property {String} id
      *     Id of the element to append the viewer's container element to. If not provided, the 'element' property must be provided.
      *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
      *
      * @property {Element} element
      *     The element to append the viewer's container element to. If not provided, the 'id' property must be provided.
      *     If both the element and id properties are specified, the viewer is appended to the element provided in the element property.
      *
      * @property {Array|String|Function|Object} [tileSources=null]
      *     Tile source(s) to open initially. This is a complex parameter; see
      *     {@link OpenSeadragon.Viewer#open} for details.
      *
      * @property {Number} [tabIndex=0]
      *     Tabbing order index to assign to the viewer element. Positive values are selected in increasing order. When tabIndex is 0
      *     source order is used. A negative value omits the viewer from the tabbing order.
      *
      * @property {Array} overlays Array of objects defining permanent overlays of
      *     the viewer. The overlays added via this option and later removed with
      *     {@link OpenSeadragon.Viewer#removeOverlay} will be added back when a new
      *     image is opened.
      *     To add overlays which can be definitively removed, one must use
      *     {@link OpenSeadragon.Viewer#addOverlay}
      *     If displaying a sequence of images, the overlays can be associated
      *     with a specific page by passing the overlays array to the page's
      *     tile source configuration.
      *     Expected properties:
      *     * x, y, (or px, py for pixel coordinates) to define the location.
      *     * width, height in point if using x,y or in pixels if using px,py. If width
      *       and height are specified, the overlay size is adjusted when zooming,
      *       otherwise the size stays the size of the content (or the size defined by CSS).
      *     * className to associate a class to the overlay
      *     * id to set the overlay element. If an element with this id already exists,
      *       it is reused, otherwise it is created. If not specified, a new element is
      *       created.
      *     * placement a string to define the relative position to the viewport.
      *       Only used if no width and height are specified. Default: 'TOP_LEFT'.
      *       See {@link OpenSeadragon.Placement} for possible values.
      *
      * @property {String} [xmlPath=null]
      *     <strong>DEPRECATED</strong>. A relative path to load a DZI file from the server.
      *     Prefer the newer Options.tileSources.
      *
      * @property {String} [prefixUrl='/images/']
      *     Prepends the prefixUrl to navImages paths, which is very useful
      *     since the default paths are rarely useful for production
      *     environments.
      *
      * @property {OpenSeadragon.NavImages} [navImages]
      *     An object with a property for each button or other built-in navigation
      *     control, eg the current 'zoomIn', 'zoomOut', 'home', and 'fullpage'.
      *     Each of those in turn provides an image path for each state of the button
      *     or navigation control, eg 'REST', 'GROUP', 'HOVER', 'PRESS'. Finally the
      *     image paths, by default assume there is a folder on the servers root path
      *     called '/images', eg '/images/zoomin_rest.png'.  If you need to adjust
      *     these paths, prefer setting the option.prefixUrl rather than overriding
      *     every image path directly through this setting.
      *
      * @property {Boolean} [debugMode=false]
      *     TODO: provide an in-screen panel providing event detail feedback.
      *
      * @property {String} [debugGridColor=['#437AB2', '#1B9E77', '#D95F02', '#7570B3', '#E7298A', '#66A61E', '#E6AB02', '#A6761D', '#666666']]
      *     The colors of grids in debug mode. Each tiled image's grid uses a consecutive color.
      *     If there are more tiled images than provided colors, the color vector is recycled.
      *
      * @property {Boolean} [silenceMultiImageWarnings=false]
      *     Silences warnings when calling viewport coordinate functions with multi-image.
      *     Useful when you're overlaying multiple images on top of one another.
      *
      * @property {Number} [blendTime=0]
      *     Specifies the duration of animation as higher or lower level tiles are
      *     replacing the existing tile.
      *
      * @property {Boolean} [alwaysBlend=false]
      *     Forces the tile to always blend.  By default the tiles skip blending
      *     when the blendTime is surpassed and the current animation frame would
      *     not complete the blend.
      *
      * @property {Boolean} [autoHideControls=true]
      *     If the user stops interacting with the viewport, fade the navigation
      *     controls.  Useful for presentation since the controls are by default
      *     floated on top of the image the user is viewing.
      *
      * @property {Boolean} [immediateRender=false]
      *     Render the best closest level first, ignoring the lowering levels which
      *     provide the effect of very blurry to sharp. It is recommended to change
      *     setting to true for mobile devices.
      *
      * @property {Number} [defaultZoomLevel=0]
      *     Zoom level to use when image is first opened or the home button is clicked.
      *     If 0, adjusts to fit viewer.
      *
      * @property {Number} [opacity=1]
      *     Default proportional opacity of the tiled images (1=opaque, 0=hidden)
      *     Hidden images do not draw and only load when preloading is allowed.
      *
      * @property {Boolean} [preload=false]
      *     Default switch for loading hidden images (true loads, false blocks)
      *
      * @property {String} [compositeOperation=null]
      *     Valid values are 'source-over', 'source-atop', 'source-in', 'source-out',
      *     'destination-over', 'destination-atop', 'destination-in', 'destination-out',
      *     'lighter', 'difference', 'copy', 'xor', etc.
      *     For complete list of modes, please @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation/ globalCompositeOperation}
      *
      * @property {Boolean} [imageSmoothingEnabled=true]
      *     Image smoothing for canvas rendering (only if canvas is used). Note: Ignored
      *     by some (especially older) browsers which do not support this canvas property.
      *     This property can be changed in {@link Viewer.Drawer.setImageSmoothingEnabled}.
      *
      * @property {String|CanvasGradient|CanvasPattern|Function} [placeholderFillStyle=null]
      *     Draws a colored rectangle behind the tile if it is not loaded yet.
      *     You can pass a CSS color value like "#FF8800".
      *     When passing a function the tiledImage and canvas context are available as argument which is useful when you draw a gradient or pattern.
      *
      * @property {Object} [subPixelRoundingForTransparency=null]
      *     Determines when subpixel rounding should be applied for tiles when rendering images that support transparency.
      *     This property is a subpixel rounding enum values dictionary [{@link BROWSERS}] --> {@link SUBPIXEL_ROUNDING_OCCURRENCES}.
      *     The key is a {@link BROWSERS} value, and the value is one of {@link SUBPIXEL_ROUNDING_OCCURRENCES},
      *     indicating, for a given browser, when to apply subpixel rounding.
      *     Key '*' is the fallback value for any browser not specified in the dictionary.
      *     This property has a simple mode, and one can set it directly to
      *     {@link SUBPIXEL_ROUNDING_OCCURRENCES.NEVER}, {@link SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST} or {@link SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS}
      *     in order to apply this rule for all browser. The values {@link SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS} would be equivalent to { '*', SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS }.
      *     The default is {@link SUBPIXEL_ROUNDING_OCCURRENCES.NEVER} for all browsers, for backward compatibility reason.
      *
      * @property {Number} [degrees=0]
      *     Initial rotation.
      *
      * @property {Boolean} [flipped=false]
      *     Initial flip state.
      *
      * @property {Number} [minZoomLevel=null]
      *
      * @property {Number} [maxZoomLevel=null]
      *
      * @property {Boolean} [homeFillsViewer=false]
      *     Make the 'home' button fill the viewer and clip the image, instead
      *     of fitting the image to the viewer and letterboxing.
      *
      * @property {Boolean} [panHorizontal=true]
      *     Allow horizontal pan.
      *
      * @property {Boolean} [panVertical=true]
      *     Allow vertical pan.
      *
      * @property {Boolean} [constrainDuringPan=false]
      *
      * @property {Boolean} [wrapHorizontal=false]
      *     Set to true to force the image to wrap horizontally within the viewport.
      *     Useful for maps or images representing the surface of a sphere or cylinder.
      *
      * @property {Boolean} [wrapVertical=false]
      *     Set to true to force the image to wrap vertically within the viewport.
      *     Useful for maps or images representing the surface of a sphere or cylinder.
      *
      * @property {Number} [minZoomImageRatio=0.9]
      *     The minimum percentage ( expressed as a number between 0 and 1 ) of
      *     the viewport height or width at which the zoom out will be constrained.
      *     Setting it to 0, for example will allow you to zoom out infinity.
      *
      * @property {Number} [maxZoomPixelRatio=1.1]
      *     The maximum ratio to allow a zoom-in to affect the highest level pixel
      *     ratio. This can be set to Infinity to allow 'infinite' zooming into the
      *     image though it is less effective visually if the HTML5 Canvas is not
      *     available on the viewing device.
      *
      * @property {Number} [smoothTileEdgesMinZoom=1.1]
      *     A zoom percentage ( where 1 is 100% ) of the highest resolution level.
      *     When zoomed in beyond this value alternative compositing will be used to
      *     smooth out the edges between tiles. This will have a performance impact.
      *     Can be set to Infinity to turn it off.
      *     Note: This setting is ignored on iOS devices due to a known bug (See {@link https://github.com/openseadragon/openseadragon/issues/952})
      *
      * @property {Boolean} [iOSDevice=?]
      *     True if running on an iOS device, false otherwise.
      *     Used to disable certain features that behave differently on iOS devices.
      *
      * @property {Boolean} [autoResize=true]
      *     Set to false to prevent polling for viewer size changes. Useful for providing custom resize behavior.
      *
      * @property {Boolean} [preserveImageSizeOnResize=false]
      *     Set to true to have the image size preserved when the viewer is resized. This requires autoResize=true (default).
      *
      * @property {Number} [minScrollDeltaTime=50]
      *     Number of milliseconds between canvas-scroll events. This value helps normalize the rate of canvas-scroll
      *     events between different devices, causing the faster devices to slow down enough to make the zoom control
      *     more manageable.
      *
      * @property {Number} [rotationIncrement=90]
      *     The number of degrees to rotate right or left when the rotate buttons or keyboard shortcuts are activated.
      *
      * @property {Number} [pixelsPerWheelLine=40]
      *     For pixel-resolution scrolling devices, the number of pixels equal to one scroll line.
      *
      * @property {Number} [pixelsPerArrowPress=40]
      *     The number of pixels viewport moves when an arrow key is pressed.
      *
      * @property {Number} [visibilityRatio=0.5]
      *     The percentage ( as a number from 0 to 1 ) of the source image which
      *     must be kept within the viewport.  If the image is dragged beyond that
      *     limit, it will 'bounce' back until the minimum visibility ratio is
      *     achieved.  Setting this to 0 and wrapHorizontal ( or wrapVertical ) to
      *     true will provide the effect of an infinitely scrolling viewport.
      *
      * @property {Object} [viewportMargins={}]
      *     Pushes the "home" region in from the sides by the specified amounts.
      *     Possible subproperties (Numbers, in screen coordinates): left, top, right, bottom.
      *
      * @property {Number} [imageLoaderLimit=0]
      *     The maximum number of image requests to make concurrently. By default
      *     it is set to 0 allowing the browser to make the maximum number of
      *     image requests in parallel as allowed by the browsers policy.
      *
      * @property {Number} [clickTimeThreshold=300]
      *      The number of milliseconds within which a pointer down-up event combination
      *      will be treated as a click gesture.
      *
      * @property {Number} [clickDistThreshold=5]
      *      The maximum distance allowed between a pointer down event and a pointer up event
      *      to be treated as a click gesture.
      *
      * @property {Number} [dblClickTimeThreshold=300]
      *      The number of milliseconds within which two pointer down-up event combinations
      *      will be treated as a double-click gesture.
      *
      * @property {Number} [dblClickDistThreshold=20]
      *      The maximum distance allowed between two pointer click events
      *      to be treated as a double-click gesture.
      *
      * @property {Number} [springStiffness=6.5]
      *
      * @property {Number} [animationTime=1.2]
      *     Specifies the animation duration per each {@link OpenSeadragon.Spring}
      *     which occur when the image is dragged, zoomed or rotated.
      *
      * @property {OpenSeadragon.GestureSettings} [gestureSettingsMouse]
      *     Settings for gestures generated by a mouse pointer device. (See {@link OpenSeadragon.GestureSettings})
      * @property {Boolean} [gestureSettingsMouse.dragToPan=true] - Pan on drag gesture
      * @property {Boolean} [gestureSettingsMouse.scrollToZoom=true] - Zoom on scroll gesture
      * @property {Boolean} [gestureSettingsMouse.clickToZoom=true] - Zoom on click gesture
      * @property {Boolean} [gestureSettingsMouse.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
      * @property {Boolean} [gestureSettingsMouse.dblClickDragToZoom=false] - Zoom on dragging through
      * double-click gesture ( single click and next click to drag).  Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
      * @property {Boolean} [gestureSettingsMouse.pinchToZoom=false] - Zoom on pinch gesture
      * @property {Boolean} [gestureSettingsMouse.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,
      *     the zoom is centered at the canvas center.
      * @property {Boolean} [gestureSettingsMouse.flickEnabled=false] - Enable flick gesture
      * @property {Number} [gestureSettingsMouse.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
      * @property {Number} [gestureSettingsMouse.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
      * @property {Boolean} [gestureSettingsMouse.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
      *
      * @property {OpenSeadragon.GestureSettings} [gestureSettingsTouch]
      *     Settings for gestures generated by a touch pointer device. (See {@link OpenSeadragon.GestureSettings})
      * @property {Boolean} [gestureSettingsTouch.dragToPan=true] - Pan on drag gesture
      * @property {Boolean} [gestureSettingsTouch.scrollToZoom=false] - Zoom on scroll gesture
      * @property {Boolean} [gestureSettingsTouch.clickToZoom=false] - Zoom on click gesture
      * @property {Boolean} [gestureSettingsTouch.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
        * @property {Boolean} [gestureSettingsTouch.dblClickDragToZoom=true] - Zoom on dragging through
      * double-click gesture ( single click and next click to drag).  Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.

      * @property {Boolean} [gestureSettingsTouch.pinchToZoom=true] - Zoom on pinch gesture
      * @property {Boolean} [gestureSettingsTouch.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,
      *     the zoom is centered at the canvas center.
      * @property {Boolean} [gestureSettingsTouch.flickEnabled=true] - Enable flick gesture
      * @property {Number} [gestureSettingsTouch.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
      * @property {Number} [gestureSettingsTouch.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
      * @property {Boolean} [gestureSettingsTouch.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
      *
      * @property {OpenSeadragon.GestureSettings} [gestureSettingsPen]
      *     Settings for gestures generated by a pen pointer device. (See {@link OpenSeadragon.GestureSettings})
      * @property {Boolean} [gestureSettingsPen.dragToPan=true] - Pan on drag gesture
      * @property {Boolean} [gestureSettingsPen.scrollToZoom=false] - Zoom on scroll gesture
      * @property {Boolean} [gestureSettingsPen.clickToZoom=true] - Zoom on click gesture
      * @property {Boolean} [gestureSettingsPen.dblClickToZoom=false] - Zoom on double-click gesture. Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
      * @property {Boolean} [gestureSettingsPen.pinchToZoom=false] - Zoom on pinch gesture
      * @property {Boolean} [gestureSettingsPen.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,
      *     the zoom is centered at the canvas center.
      * @property {Boolean} [gestureSettingsPen.flickEnabled=false] - Enable flick gesture
      * @property {Number} [gestureSettingsPen.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
      * @property {Number} [gestureSettingsPen.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
      * @property {Boolean} [gestureSettingsPen.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
      *
      * @property {OpenSeadragon.GestureSettings} [gestureSettingsUnknown]
      *     Settings for gestures generated by unknown pointer devices. (See {@link OpenSeadragon.GestureSettings})
      * @property {Boolean} [gestureSettingsUnknown.dragToPan=true] - Pan on drag gesture
      * @property {Boolean} [gestureSettingsUnknown.scrollToZoom=true] - Zoom on scroll gesture
      * @property {Boolean} [gestureSettingsUnknown.clickToZoom=false] - Zoom on click gesture
      * @property {Boolean} [gestureSettingsUnknown.dblClickToZoom=true] - Zoom on double-click gesture. Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
      * @property {Boolean} [gestureSettingsUnknown.dblClickDragToZoom=false] - Zoom on dragging through
      * double-click gesture ( single click and next click to drag).  Note: If set to true
      *     then clickToZoom should be set to false to prevent multiple zooms.
      * @property {Boolean} [gestureSettingsUnknown.pinchToZoom=true] - Zoom on pinch gesture
      * @property {Boolean} [gestureSettingsUnknown.zoomToRefPoint=true] - If zoomToRefPoint is true, the zoom is centered at the pointer position. Otherwise,
      *     the zoom is centered at the canvas center.
      * @property {Boolean} [gestureSettingsUnknown.flickEnabled=true] - Enable flick gesture
      * @property {Number} [gestureSettingsUnknown.flickMinSpeed=120] - If flickEnabled is true, the minimum speed to initiate a flick gesture (pixels-per-second)
      * @property {Number} [gestureSettingsUnknown.flickMomentum=0.25] - If flickEnabled is true, the momentum factor for the flick gesture
      * @property {Boolean} [gestureSettingsUnknown.pinchRotate=false] - If pinchRotate is true, the user will have the ability to rotate the image using their fingers.
      *
      * @property {Number} [zoomPerClick=2.0]
      *     The "zoom distance" per mouse click or touch tap. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).</em>
      *
      * @property {Number} [zoomPerScroll=1.2]
      *     The "zoom distance" per mouse scroll or touch pinch. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).</em>
      *
      * @property {Number} [zoomPerDblClickDrag=1.2]
      *     The "zoom distance" per double-click mouse drag. <em><strong>Note:</strong> Setting this to 1.0 effectively disables the double-click-drag-to-Zoom feature (also see gestureSettings[Mouse|Touch|Pen].dblClickDragToZoom).</em>
      *
      * @property {Number} [zoomPerSecond=1.0]
      *     Sets the zoom amount per second when zoomIn/zoomOut buttons are pressed and held.
      *     The value is a factor of the current zoom, so 1.0 (the default) disables zooming when the zoomIn/zoomOut buttons
      *     are held. Higher values will increase the rate of zoom when the zoomIn/zoomOut buttons are held. Note that values
      *     < 1.0 will reverse the operation of the zoomIn/zoomOut buttons (zoomIn button will decrease the zoom, zoomOut will
      *     increase the zoom).
      *
      * @property {Boolean} [showNavigator=false]
      *     Set to true to make the navigator minimap appear.
      *
      * @property {Element} [navigatorElement=null]
      *     The element to hold the navigator minimap.
      *     If an element is specified, the Id option (see navigatorId) is ignored.
      *     If no element nor ID is specified, a div element will be generated accordingly.
      *
      * @property {String} [navigatorId=navigator-GENERATED DATE]
      *     The ID of a div to hold the navigator minimap.
      *     If an ID is specified, the navigatorPosition, navigatorSizeRatio, navigatorMaintainSizeRatio, navigator[Top|Left|Height|Width] and navigatorAutoFade options will be ignored.
      *     If an ID is not specified, a div element will be generated and placed on top of the main image.
      *
      * @property {String} [navigatorPosition='TOP_RIGHT']
      *     Valid values are 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', 'BOTTOM_RIGHT', or 'ABSOLUTE'.<br>
      *     If 'ABSOLUTE' is specified, then navigator[Top|Left|Height|Width] determines the size and position of the navigator minimap in the viewer, and navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.<br>
      *     For 'TOP_LEFT', 'TOP_RIGHT', 'BOTTOM_LEFT', and 'BOTTOM_RIGHT', the navigatorSizeRatio or navigator[Height|Width] values determine the size of the navigator minimap.
      *
      * @property {Number} [navigatorSizeRatio=0.2]
      *     Ratio of navigator size to viewer size. Ignored if navigator[Height|Width] are specified.
      *
      * @property {Boolean} [navigatorMaintainSizeRatio=false]
      *     If true, the navigator minimap is resized (using navigatorSizeRatio) when the viewer size changes.
      *
      * @property {Number|String} [navigatorTop=null]
      *     Specifies the location of the navigator minimap (see navigatorPosition).
      *
      * @property {Number|String} [navigatorLeft=null]
      *     Specifies the location of the navigator minimap (see navigatorPosition).
      *
      * @property {Number|String} [navigatorHeight=null]
      *     Specifies the size of the navigator minimap (see navigatorPosition).
      *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
      *
      * @property {Number|String} [navigatorWidth=null]
      *     Specifies the size of the navigator minimap (see navigatorPosition).
      *     If specified, navigatorSizeRatio and navigatorMaintainSizeRatio are ignored.
      *
      * @property {Boolean} [navigatorAutoResize=true]
      *     Set to false to prevent polling for navigator size changes. Useful for providing custom resize behavior.
      *     Setting to false can also improve performance when the navigator is configured to a fixed size.
      *
      * @property {Boolean} [navigatorAutoFade=true]
      *     If the user stops interacting with the viewport, fade the navigator minimap.
      *     Setting to false will make the navigator minimap always visible.
      *
      * @property {Boolean} [navigatorRotate=true]
      *     If true, the navigator will be rotated together with the viewer.
      *
      * @property {String} [navigatorBackground='#000']
      *     Specifies the background color of the navigator minimap
      *
      * @property {Number} [navigatorOpacity=0.8]
      *     Specifies the opacity of the navigator minimap.
      *
      * @property {String} [navigatorBorderColor='#555']
      *     Specifies the border color of the navigator minimap
      *
      * @property {String} [navigatorDisplayRegionColor='#900']
      *     Specifies the border color of the display region rectangle of the navigator minimap
      *
      * @property {Number} [controlsFadeDelay=2000]
      *     The number of milliseconds to wait once the user has stopped interacting
      *     with the interface before beginning to fade the controls. Assumes
      *     showNavigationControl and autoHideControls are both true.
      *
      * @property {Number} [controlsFadeLength=1500]
      *     The number of milliseconds to animate the controls fading out.
      *
      * @property {Number} [maxImageCacheCount=200]
      *     The max number of images we should keep in memory (per drawer).
      *
      * @property {Number} [timeout=30000]
      *     The max number of milliseconds that an image job may take to complete.
      *
      * @property {Boolean} [useCanvas=true]
      *     Set to false to not use an HTML canvas element for image rendering even if canvas is supported.
      *
      * @property {Number} [minPixelRatio=0.5]
      *     The higher the minPixelRatio, the lower the quality of the image that
      *     is considered sufficient to stop rendering a given zoom level.  For
      *     example, if you are targeting mobile devices with less bandwidth you may
      *     try setting this to 1.5 or higher.
      *
      * @property {Boolean} [mouseNavEnabled=true]
      *     Is the user able to interact with the image via mouse or touch. Default
      *     interactions include draging the image in a plane, and zooming in toward
      *     and away from the image.
      *
      * @property {Boolean} [showNavigationControl=true]
      *     Set to false to prevent the appearance of the default navigation controls.<br>
      *     Note that if set to false, the customs buttons set by the options
      *     zoomInButton, zoomOutButton etc, are rendered inactive.
      *
      * @property {OpenSeadragon.ControlAnchor} [navigationControlAnchor=TOP_LEFT]
      *     Placement of the default navigation controls.
      *     To set the placement of the sequence controls, see the
      *     sequenceControlAnchor option.
      *
      * @property {Boolean} [showZoomControl=true]
      *     If true then + and - buttons to zoom in and out are displayed.<br>
      *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
      *     this setting when set to false.
      *
      * @property {Boolean} [showHomeControl=true]
      *     If true then the 'Go home' button is displayed to go back to the original
      *     zoom and pan.<br>
      *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
      *     this setting when set to false.
      *
      * @property {Boolean} [showFullPageControl=true]
      *     If true then the 'Toggle full page' button is displayed to switch
      *     between full page and normal mode.<br>
      *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
      *     this setting when set to false.
      *
      * @property {Boolean} [showRotationControl=false]
      *     If true then the rotate left/right controls will be displayed as part of the
      *     standard controls. This is also subject to the browser support for rotate
      *     (e.g. viewer.drawer.canRotate()).<br>
      *     Note: {@link OpenSeadragon.Options.showNavigationControl} is overriding
      *     this setting when set to false.
      *
      * @property {Boolean} [showFlipControl=false]
      *     If true then the flip controls will be displayed as part of the
      *     standard controls.
      *
      * @property {Boolean} [showSequenceControl=true]
      *     If sequenceMode is true, then provide buttons for navigating forward and
      *     backward through the images.
      *
      * @property {OpenSeadragon.ControlAnchor} [sequenceControlAnchor=TOP_LEFT]
      *     Placement of the default sequence controls.
      *
      * @property {Boolean} [navPrevNextWrap=false]
      *     If true then the 'previous' button will wrap to the last image when
      *     viewing the first image and the 'next' button will wrap to the first
      *     image when viewing the last image.
      *
      * @property {String} zoomInButton
      *     Set the id of the custom 'Zoom in' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} zoomOutButton
      *     Set the id of the custom 'Zoom out' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} homeButton
      *     Set the id of the custom 'Go home' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} fullPageButton
      *     Set the id of the custom 'Toggle full page' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} rotateLeftButton
      *     Set the id of the custom 'Rotate left' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} rotateRightButton
      *     Set the id of the custom 'Rotate right' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} previousButton
      *     Set the id of the custom 'Previous page' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {String} nextButton
      *     Set the id of the custom 'Next page' button to use.
      *     This is useful to have a custom button anywhere in the web page.<br>
      *     To only change the button images, consider using
      *     {@link OpenSeadragon.Options.navImages}
      *
      * @property {Boolean} [sequenceMode=false]
      *     Set to true to have the viewer treat your tilesources as a sequence of images to
      *     be opened one at a time rather than all at once.
      *
      * @property {Number} [initialPage=0]
      *     If sequenceMode is true, display this page initially.
      *
      * @property {Boolean} [preserveViewport=false]
      *     If sequenceMode is true, then normally navigating through each image resets the
      *     viewport to 'home' position.  If preserveViewport is set to true, then the viewport
      *     position is preserved when navigating between images in the sequence.
      *
      * @property {Boolean} [preserveOverlays=false]
      *     If sequenceMode is true, then normally navigating through each image
      *     resets the overlays.
      *     If preserveOverlays is set to true, then the overlays added with {@link OpenSeadragon.Viewer#addOverlay}
      *     are preserved when navigating between images in the sequence.
      *     Note: setting preserveOverlays overrides any overlays specified in the global
      *     "overlays" option for the Viewer. It's also not compatible with specifying
      *     per-tileSource overlays via the options, as those overlays will persist
      *     even after the tileSource is closed.
      *
      * @property {Boolean} [showReferenceStrip=false]
      *     If sequenceMode is true, then display a scrolling strip of image thumbnails for
      *     navigating through the images.
      *
      * @property {String} [referenceStripScroll='horizontal']
      *
      * @property {Element} [referenceStripElement=null]
      *
      * @property {Number} [referenceStripHeight=null]
      *
      * @property {Number} [referenceStripWidth=null]
      *
      * @property {String} [referenceStripPosition='BOTTOM_LEFT']
      *
      * @property {Number} [referenceStripSizeRatio=0.2]
      *
      * @property {Boolean} [collectionMode=false]
      *     Set to true to have the viewer arrange your TiledImages in a grid or line.
      *
      * @property {Number} [collectionRows=3]
      *     If collectionMode is true, specifies how many rows the grid should have. Use 1 to make a line.
      *     If collectionLayout is 'vertical', specifies how many columns instead.
      *
      * @property {Number} [collectionColumns=0]
      *     If collectionMode is true, specifies how many columns the grid should have. Use 1 to make a line.
      *     If collectionLayout is 'vertical', specifies how many rows instead. Ignored if collectionRows is not set to a falsy value.
      *
      * @property {String} [collectionLayout='horizontal']
      *     If collectionMode is true, specifies whether to arrange vertically or horizontally.
      *
      * @property {Number} [collectionTileSize=800]
      *     If collectionMode is true, specifies the size, in viewport coordinates, for each TiledImage to fit into.
      *     The TiledImage will be centered within a square of the specified size.
      *
      * @property {Number} [collectionTileMargin=80]
      *     If collectionMode is true, specifies the margin, in viewport coordinates, between each TiledImage.
      *
      * @property {String|Boolean} [crossOriginPolicy=false]
      *     Valid values are 'Anonymous', 'use-credentials', and false. If false, canvas requests will
      *     not use CORS, and the canvas will be tainted.
      *
      * @property {Boolean} [ajaxWithCredentials=false]
      *     Whether to set the withCredentials XHR flag for AJAX requests.
      *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.
      *
      * @property {Boolean} [loadTilesWithAjax=false]
      *     Whether to load tile data using AJAX requests.
      *     Note that this can be overridden at the {@link OpenSeadragon.TileSource} level.
      *
      * @property {Object} [ajaxHeaders={}]
      *     A set of headers to include when making AJAX requests for tile sources or tiles.
      *
      * @property {Boolean} [splitHashDataForPost=false]
      *     Allows to treat _first_ hash ('#') symbol as a separator for POST data:
      *     URL to be opened by a {@link OpenSeadragon.TileSource} can thus look like: http://some.url#postdata=here.
      *     The whole URL is used to fetch image info metadata and it is then split to 'http://some.url' and
      *     'postdata=here'; post data is given to the {@link OpenSeadragon.TileSource} of the choice and can be further
      *     used within tile requests (see TileSource methods).
      *     NOTE: {@link OpenSeadragon.TileSource.prototype.configure} return value should contain the post data
      *     if you want to use it later - so that it is given to your constructor later.
      *     NOTE: usually, post data is expected to be ampersand-separated (just like GET parameters), and is NOT USED
      *     to fetch tile image data unless explicitly programmed, or if loadTilesWithAjax=false 4
      *     (but it is still used for the initial image info request).
      *     NOTE: passing POST data from URL by this feature only supports string values, however,
      *     TileSource can send any data using POST as long as the header is correct
      *     (@see OpenSeadragon.TileSource.prototype.getTilePostData)
      */

    /**
     * Settings for gestures generated by a pointer device.
     *
     * @typedef {Object} GestureSettings
     * @memberof OpenSeadragon
     *
     * @property {Boolean} dragToPan
     *     Set to false to disable panning on drag gestures.
     *
     * @property {Boolean} scrollToZoom
     *     Set to false to disable zooming on scroll gestures.
     *
     * @property {Boolean} clickToZoom
     *     Set to false to disable zooming on click gestures.
     *
     * @property {Boolean} dblClickToZoom
     *     Set to false to disable zooming on double-click gestures. Note: If set to true
     *     then clickToZoom should be set to false to prevent multiple zooms.
     *
     * @property {Boolean} pinchToZoom
     *     Set to false to disable zooming on pinch gestures.
     *
     * @property {Boolean} flickEnabled
     *     Set to false to disable the kinetic panning effect (flick) at the end of a drag gesture.
     *
     * @property {Number} flickMinSpeed
     *     If flickEnabled is true, the minimum speed (in pixels-per-second) required to cause the kinetic panning effect (flick) at the end of a drag gesture.
     *
     * @property {Number} flickMomentum
     *     If flickEnabled is true, a constant multiplied by the velocity to determine the distance of the kinetic panning effect (flick) at the end of a drag gesture.
     *     A larger value will make the flick feel "lighter", while a smaller value will make the flick feel "heavier".
     *     Note: springStiffness and animationTime also affect the "spring" used to stop the flick animation.
     *
     */

    /**
     * The names for the image resources used for the image navigation buttons.
     *
     * @typedef {Object} NavImages
     * @memberof OpenSeadragon
     *
     * @property {Object} zoomIn - Images for the zoom-in button.
     * @property {String} zoomIn.REST
     * @property {String} zoomIn.GROUP
     * @property {String} zoomIn.HOVER
     * @property {String} zoomIn.DOWN
     *
     * @property {Object} zoomOut - Images for the zoom-out button.
     * @property {String} zoomOut.REST
     * @property {String} zoomOut.GROUP
     * @property {String} zoomOut.HOVER
     * @property {String} zoomOut.DOWN
     *
     * @property {Object} home - Images for the home button.
     * @property {String} home.REST
     * @property {String} home.GROUP
     * @property {String} home.HOVER
     * @property {String} home.DOWN
     *
     * @property {Object} fullpage - Images for the full-page button.
     * @property {String} fullpage.REST
     * @property {String} fullpage.GROUP
     * @property {String} fullpage.HOVER
     * @property {String} fullpage.DOWN
     *
     * @property {Object} rotateleft - Images for the rotate left button.
     * @property {String} rotateleft.REST
     * @property {String} rotateleft.GROUP
     * @property {String} rotateleft.HOVER
     * @property {String} rotateleft.DOWN
     *
     * @property {Object} rotateright - Images for the rotate right button.
     * @property {String} rotateright.REST
     * @property {String} rotateright.GROUP
     * @property {String} rotateright.HOVER
     * @property {String} rotateright.DOWN
     *
     * @property {Object} flip - Images for the flip button.
     * @property {String} flip.REST
     * @property {String} flip.GROUP
     * @property {String} flip.HOVER
     * @property {String} flip.DOWN
     *
     * @property {Object} previous - Images for the previous button.
     * @property {String} previous.REST
     * @property {String} previous.GROUP
     * @property {String} previous.HOVER
     * @property {String} previous.DOWN
     *
     * @property {Object} next - Images for the next button.
     * @property {String} next.REST
     * @property {String} next.GROUP
     * @property {String} next.HOVER
     * @property {String} next.DOWN
     *
     */

    /* eslint-disable no-redeclare */
    function OpenSeadragon(options) {
      return new OpenSeadragon.Viewer(options)
    }
    ;(function ($) {
      /**
       * The OpenSeadragon version.
       *
       * @member {Object} OpenSeadragon.version
       * @property {String} versionStr - The version number as a string ('major.minor.revision').
       * @property {Number} major - The major version number.
       * @property {Number} minor - The minor version number.
       * @property {Number} revision - The revision number.
       * @since 1.0.0
       */
      $.version = {
        versionStr: '4.0.0',
        major: parseInt('4', 10),
        minor: parseInt('0', 10),
        revision: parseInt('0', 10),
      }

      /**
       * Taken from jquery 1.6.1
       * [[Class]] -> type pairs
       * @private
       */
      var class2type = {
          '[object Boolean]': 'boolean',
          '[object Number]': 'number',
          '[object String]': 'string',
          '[object Function]': 'function',
          '[object Array]': 'array',
          '[object Date]': 'date',
          '[object RegExp]': 'regexp',
          '[object Object]': 'object',
        },
        // Save a reference to some core methods
        toString = Object.prototype.toString,
        hasOwn = Object.prototype.hasOwnProperty

      /**
       * Taken from jQuery 1.6.1
       * @function isFunction
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.isFunction = function (obj) {
        return $.type(obj) === 'function'
      }

      /**
       * Taken from jQuery 1.6.1
       * @function isArray
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.isArray =
        Array.isArray ||
        function (obj) {
          return $.type(obj) === 'array'
        }

      /**
       * A crude way of determining if an object is a window.
       * Taken from jQuery 1.6.1
       * @function isWindow
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.isWindow = function (obj) {
        return obj && typeof obj === 'object' && 'setInterval' in obj
      }

      /**
       * Taken from jQuery 1.6.1
       * @function type
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.type = function (obj) {
        return obj === null || obj === undefined
          ? String(obj)
          : class2type[toString.call(obj)] || 'object'
      }

      /**
       * Taken from jQuery 1.6.1
       * @function isPlainObject
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.isPlainObject = function (obj) {
        // Must be an Object.
        // Because of IE, we also have to check the presence of the constructor property.
        // Make sure that DOM nodes and window objects don't pass through, as well
        if (
          !obj ||
          OpenSeadragon.type(obj) !== 'object' ||
          obj.nodeType ||
          $.isWindow(obj)
        ) {
          return false
        }

        // Not own constructor property must be Object
        if (
          obj.constructor &&
          !hasOwn.call(obj, 'constructor') &&
          !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf')
        ) {
          return false
        }

        // Own properties are enumerated firstly, so to speed up,
        // if last one is own, then all properties are own.

        var lastKey
        for (var key in obj) {
          lastKey = key
        }

        return lastKey === undefined || hasOwn.call(obj, lastKey)
      }

      /**
       * Taken from jQuery 1.6.1
       * @function isEmptyObject
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.isEmptyObject = function (obj) {
        for (var name in obj) {
          return false
        }
        return true
      }

      /**
       * Shim around Object.freeze. Does nothing if Object.freeze is not supported.
       * @param {Object} obj The object to freeze.
       * @returns {Object} obj The frozen object.
       */
      $.freezeObject = function (obj) {
        if (Object.freeze) {
          $.freezeObject = Object.freeze
        } else {
          $.freezeObject = function (obj) {
            return obj
          }
        }
        return $.freezeObject(obj)
      }

      /**
       * True if the browser supports the HTML5 canvas element
       * @member {Boolean} supportsCanvas
       * @memberof OpenSeadragon
       */
      $.supportsCanvas = (function () {
        var canvasElement = document.createElement('canvas')
        return !!(
          $.isFunction(canvasElement.getContext) &&
          canvasElement.getContext('2d')
        )
      })()

      /**
       * Test whether the submitted canvas is tainted or not.
       * @argument {Canvas} canvas The canvas to test.
       * @returns {Boolean} True if the canvas is tainted.
       */
      $.isCanvasTainted = function (canvas) {
        var isTainted = false
        try {
          // We test if the canvas is tainted by retrieving data from it.
          // An exception will be raised if the canvas is tainted.
          canvas.getContext('2d').getImageData(0, 0, 1, 1)
        } catch (e) {
          isTainted = true
        }
        return isTainted
      }

      /**
       * True if the browser supports the EventTarget.addEventListener() method
       * @member {Boolean} supportsAddEventListener
       * @memberof OpenSeadragon
       */
      $.supportsAddEventListener = (function () {
        return !!(
          document.documentElement.addEventListener && document.addEventListener
        )
      })()

      /**
       * True if the browser supports the EventTarget.removeEventListener() method
       * @member {Boolean} supportsRemoveEventListener
       * @memberof OpenSeadragon
       */
      $.supportsRemoveEventListener = (function () {
        return !!(
          document.documentElement.removeEventListener &&
          document.removeEventListener
        )
      })()

      /**
       * True if the browser supports the newer EventTarget.addEventListener options argument
       * @member {Boolean} supportsEventListenerOptions
       * @memberof OpenSeadragon
       */
      $.supportsEventListenerOptions = (function () {
        var supported = 0

        if ($.supportsAddEventListener) {
          try {
            var options = {
              get capture() {
                supported++
                return false
              },
              get once() {
                supported++
                return false
              },
              get passive() {
                supported++
                return false
              },
            }
            window.addEventListener('test', null, options)
            window.removeEventListener('test', null, options)
          } catch (e) {
            supported = 0
          }
        }

        return supported >= 3
      })()

      /**
       * A ratio comparing the device screen's pixel density to the canvas's backing store pixel density,
       * clamped to a minimum of 1. Defaults to 1 if canvas isn't supported by the browser.
       * @member {Number} pixelDensityRatio
       * @memberof OpenSeadragon
       */
      $.getCurrentPixelDensityRatio = function () {
        if ($.supportsCanvas) {
          var context = document.createElement('canvas').getContext('2d')
          var devicePixelRatio = window.devicePixelRatio || 1
          var backingStoreRatio =
            context.webkitBackingStorePixelRatio ||
            context.mozBackingStorePixelRatio ||
            context.msBackingStorePixelRatio ||
            context.oBackingStorePixelRatio ||
            context.backingStorePixelRatio ||
            1
          return Math.max(devicePixelRatio, 1) / backingStoreRatio
        } else {
          return 1
        }
      }

      /**
       * @member {Number} pixelDensityRatio
       * @memberof OpenSeadragon
       */
      $.pixelDensityRatio = $.getCurrentPixelDensityRatio()
    })(OpenSeadragon)

    /**
     *  This closure defines all static methods available to the OpenSeadragon
     *  namespace.  Many, if not most, are taken directly from jQuery for use
     *  to simplify and reduce common programming patterns.  More static methods
     *  from jQuery may eventually make their way into this though we are
     *  attempting to avoid an explicit dependency on jQuery only because
     *  OpenSeadragon is a broadly useful code base and would be made less broad
     *  by requiring jQuery fully.
     *
     *  Some static methods have also been refactored from the original OpenSeadragon
     *  project.
     */
    ;(function ($) {
      /**
       * Taken from jQuery 1.6.1
       * @function extend
       * @memberof OpenSeadragon
       * @see {@link http://www.jquery.com/ jQuery}
       */
      $.extend = function () {
        var options,
          name,
          src,
          copy,
          copyIsArray,
          clone,
          target = arguments[0] || {},
          length = arguments.length,
          deep = false,
          i = 1

        // Handle a deep copy situation
        if (typeof target === 'boolean') {
          deep = target
          target = arguments[1] || {}
          // skip the boolean and the target
          i = 2
        }

        // Handle case when target is a string or something (possible in deep copy)
        if (typeof target !== 'object' && !OpenSeadragon.isFunction(target)) {
          target = {}
        }

        // extend jQuery itself if only one argument is passed
        if (length === i) {
          target = this
          --i
        }

        for (; i < length; i++) {
          // Only deal with non-null/undefined values
          options = arguments[i]
          if (options !== null || options !== undefined) {
            // Extend the base object
            for (name in options) {
              var descriptor = Object.getOwnPropertyDescriptor(options, name)

              if (descriptor !== undefined) {
                if (descriptor.get || descriptor.set) {
                  Object.defineProperty(target, name, descriptor)
                  continue
                }

                copy = descriptor.value
              } else {
                $.console.warn(
                  'Could not copy inherited property "' + name + '".'
                )
                continue
              }

              // Prevent never-ending loop
              if (target === copy) {
                continue
              }

              // Recurse if we're merging plain objects or arrays
              if (
                deep &&
                copy &&
                (OpenSeadragon.isPlainObject(copy) ||
                  (copyIsArray = OpenSeadragon.isArray(copy)))
              ) {
                src = target[name]

                if (copyIsArray) {
                  copyIsArray = false
                  clone = src && OpenSeadragon.isArray(src) ? src : []
                } else {
                  clone = src && OpenSeadragon.isPlainObject(src) ? src : {}
                }

                // Never move original objects, clone them
                target[name] = OpenSeadragon.extend(deep, clone, copy)

                // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy
              }
            }
          }
        }

        // Return the modified object
        return target
      }

      var isIOSDevice = function () {
        if (typeof navigator !== 'object') {
          return false
        }
        var userAgent = navigator.userAgent
        if (typeof userAgent !== 'string') {
          return false
        }
        return (
          userAgent.indexOf('iPhone') !== -1 ||
          userAgent.indexOf('iPad') !== -1 ||
          userAgent.indexOf('iPod') !== -1
        )
      }

      $.extend(
        $,
        /** @lends OpenSeadragon */ {
          /**
           * The default values for the optional settings documented at {@link OpenSeadragon.Options}.
           * @static
           * @type {Object}
           */
          DEFAULT_SETTINGS: {
            //DATA SOURCE DETAILS
            xmlPath: null,
            tileSources: null,
            tileHost: null,
            initialPage: 0,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            loadTilesWithAjax: false,
            ajaxHeaders: {},
            splitHashDataForPost: false,

            //PAN AND ZOOM SETTINGS AND CONSTRAINTS
            panHorizontal: true,
            panVertical: true,
            constrainDuringPan: false,
            wrapHorizontal: false,
            wrapVertical: false,
            visibilityRatio: 0.5, //-> how much of the viewer can be negative space
            minPixelRatio: 0.5, //->closer to 0 draws tiles meant for a higher zoom at this zoom
            defaultZoomLevel: 0,
            minZoomLevel: null,
            maxZoomLevel: null,
            homeFillsViewer: false,

            //UI RESPONSIVENESS AND FEEL
            clickTimeThreshold: 300,
            clickDistThreshold: 5,
            dblClickTimeThreshold: 300,
            dblClickDistThreshold: 20,
            springStiffness: 6.5,
            animationTime: 1.2,
            gestureSettingsMouse: {
              dragToPan: true,
              scrollToZoom: true,
              clickToZoom: true,
              dblClickToZoom: false,
              dblClickDragToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false,
            },
            gestureSettingsTouch: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              dblClickDragToZoom: true,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false,
            },
            gestureSettingsPen: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: true,
              dblClickToZoom: false,
              dblClickDragToZoom: false,
              pinchToZoom: false,
              zoomToRefPoint: true,
              flickEnabled: false,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false,
            },
            gestureSettingsUnknown: {
              dragToPan: true,
              scrollToZoom: false,
              clickToZoom: false,
              dblClickToZoom: true,
              dblClickDragToZoom: false,
              pinchToZoom: true,
              zoomToRefPoint: true,
              flickEnabled: true,
              flickMinSpeed: 120,
              flickMomentum: 0.25,
              pinchRotate: false,
            },
            zoomPerClick: 2,
            zoomPerScroll: 1.2,
            zoomPerDblClickDrag: 1.2,
            zoomPerSecond: 1.0,
            blendTime: 0,
            alwaysBlend: false,
            autoHideControls: true,
            immediateRender: false,
            minZoomImageRatio: 0.9, //-> closer to 0 allows zoom out to infinity
            maxZoomPixelRatio: 1.1, //-> higher allows 'over zoom' into pixels
            smoothTileEdgesMinZoom: 1.1, //-> higher than maxZoomPixelRatio disables it
            iOSDevice: isIOSDevice(),
            pixelsPerWheelLine: 40,
            pixelsPerArrowPress: 40,
            autoResize: true,
            preserveImageSizeOnResize: false, // requires autoResize=true
            minScrollDeltaTime: 50,
            rotationIncrement: 90,

            //DEFAULT CONTROL SETTINGS
            showSequenceControl: true, //SEQUENCE
            sequenceControlAnchor: null, //SEQUENCE
            preserveViewport: false, //SEQUENCE
            preserveOverlays: false, //SEQUENCE
            navPrevNextWrap: false, //SEQUENCE
            showNavigationControl: true, //ZOOM/HOME/FULL/ROTATION
            navigationControlAnchor: null, //ZOOM/HOME/FULL/ROTATION
            showZoomControl: true, //ZOOM
            showHomeControl: true, //HOME
            showFullPageControl: true, //FULL
            showRotationControl: true, //ROTATION
            showFlipControl: false, //FLIP
            controlsFadeDelay: 2000, //ZOOM/HOME/FULL/SEQUENCE
            controlsFadeLength: 1500, //ZOOM/HOME/FULL/SEQUENCE
            mouseNavEnabled: true, //GENERAL MOUSE INTERACTIVITY

            //VIEWPORT NAVIGATOR SETTINGS
            showNavigator: false,
            navigatorElement: null,
            navigatorId: null,
            navigatorPosition: null,
            navigatorSizeRatio: 0.2,
            navigatorMaintainSizeRatio: false,
            navigatorTop: null,
            navigatorLeft: null,
            navigatorHeight: null,
            navigatorWidth: null,
            navigatorAutoResize: true,
            navigatorAutoFade: true,
            navigatorRotate: true,
            navigatorBackground: '#000',
            navigatorOpacity: 0.8,
            navigatorBorderColor: '#555',
            navigatorDisplayRegionColor: '#900',

            // INITIAL ROTATION
            degrees: 0,

            // INITIAL FLIP STATE
            flipped: false,

            // APPEARANCE
            opacity: 1,
            preload: false,
            compositeOperation: null,
            imageSmoothingEnabled: true,
            placeholderFillStyle: null,
            subPixelRoundingForTransparency: null,

            //REFERENCE STRIP SETTINGS
            showReferenceStrip: false,
            referenceStripScroll: 'horizontal',
            referenceStripElement: null,
            referenceStripHeight: null,
            referenceStripWidth: null,
            referenceStripPosition: 'BOTTOM_LEFT',
            referenceStripSizeRatio: 0.2,

            //COLLECTION VISUALIZATION SETTINGS
            collectionRows: 3, //or columns depending on layout
            collectionColumns: 0, //columns in horizontal layout, rows in vertical layout
            collectionLayout: 'horizontal', //vertical
            collectionMode: false,
            collectionTileSize: 800,
            collectionTileMargin: 80,

            //PERFORMANCE SETTINGS
            imageLoaderLimit: 0,
            maxImageCacheCount: 200,
            timeout: 30000,
            useCanvas: true, // Use canvas element for drawing if available

            //INTERFACE RESOURCE SETTINGS
            prefixUrl: '/images/',
            navImages: {
              zoomIn: {
                REST: 'zoomin_rest.png',
                GROUP: 'zoomin_grouphover.png',
                HOVER: 'zoomin_hover.png',
                DOWN: 'zoomin_pressed.png',
              },
              zoomOut: {
                REST: 'zoomout_rest.png',
                GROUP: 'zoomout_grouphover.png',
                HOVER: 'zoomout_hover.png',
                DOWN: 'zoomout_pressed.png',
              },
              home: {
                REST: 'home_rest.png',
                GROUP: 'home_grouphover.png',
                HOVER: 'home_hover.png',
                DOWN: 'home_pressed.png',
              },
              fullpage: {
                REST: 'fullpage_rest.png',
                GROUP: 'fullpage_grouphover.png',
                HOVER: 'fullpage_hover.png',
                DOWN: 'fullpage_pressed.png',
              },
              rotateleft: {
                REST: 'rotateleft_rest.png',
                GROUP: 'rotateleft_grouphover.png',
                HOVER: 'rotateleft_hover.png',
                DOWN: 'rotateleft_pressed.png',
              },
              rotateright: {
                REST: 'rotateright_rest.png',
                GROUP: 'rotateright_grouphover.png',
                HOVER: 'rotateright_hover.png',
                DOWN: 'rotateright_pressed.png',
              },
              flip: {
                // Flip icon designed by Yaroslav Samoylov from the Noun Project and modified by Nelson Campos ncampos@criteriamarathon.com, https://thenounproject.com/term/flip/136289/
                REST: 'flip_rest.png',
                GROUP: 'flip_grouphover.png',
                HOVER: 'flip_hover.png',
                DOWN: 'flip_pressed.png',
              },
              previous: {
                REST: 'previous_rest.png',
                GROUP: 'previous_grouphover.png',
                HOVER: 'previous_hover.png',
                DOWN: 'previous_pressed.png',
              },
              next: {
                REST: 'next_rest.png',
                GROUP: 'next_grouphover.png',
                HOVER: 'next_hover.png',
                DOWN: 'next_pressed.png',
              },
            },

            //DEVELOPER SETTINGS
            debugMode: false,
            debugGridColor: [
              '#437AB2',
              '#1B9E77',
              '#D95F02',
              '#7570B3',
              '#E7298A',
              '#66A61E',
              '#E6AB02',
              '#A6761D',
              '#666666',
            ],
            silenceMultiImageWarnings: false,
          },

          /**
           * TODO: get rid of this.  I can't see how it's required at all.  Looks
           *       like an early legacy code artifact.
           * @static
           * @ignore
           */
          SIGNAL: '----seadragon----',

          /**
           * Returns a function which invokes the method as if it were a method belonging to the object.
           * @function
           * @param {Object} object
           * @param {Function} method
           * @returns {Function}
           */
          delegate: function (object, method) {
            return function () {
              var args = arguments
              if (args === undefined) {
                args = []
              }
              return method.apply(object, args)
            }
          },

          /**
           * An enumeration of Browser vendors.
           * @static
           * @type {Object}
           * @property {Number} UNKNOWN
           * @property {Number} IE
           * @property {Number} FIREFOX
           * @property {Number} SAFARI
           * @property {Number} CHROME
           * @property {Number} OPERA
           * @property {Number} EDGE
           * @property {Number} CHROMEEDGE
           */
          BROWSERS: {
            UNKNOWN: 0,
            IE: 1,
            FIREFOX: 2,
            SAFARI: 3,
            CHROME: 4,
            OPERA: 5,
            EDGE: 6,
            CHROMEEDGE: 7,
          },

          /**
           * An enumeration of when subpixel rounding should occur.
           * @static
           * @type {Object}
           * @property {Number} NEVER Never apply subpixel rounding for transparency.
           * @property {Number} ONLY_AT_REST Do not apply subpixel rounding for transparency during animation (panning, zoom, rotation) and apply it once animation is over.
           * @property {Number} ALWAYS Apply subpixel rounding for transparency during animation and when animation is over.
           */
          SUBPIXEL_ROUNDING_OCCURRENCES: {
            NEVER: 0,
            ONLY_AT_REST: 1,
            ALWAYS: 2,
          },

          /**
           * Keep track of which {@link Viewer}s have been created.
           * - Key: {@link Element} to which a Viewer is attached.
           * - Value: {@link Viewer} of the element defined by the key.
           * @private
           * @static
           * @type {Object}
           */
          _viewers: new Map(),

          /**
           * Returns the {@link Viewer} attached to a given DOM element. If there is
           * no viewer attached to the provided element, undefined is returned.
           * @function
           * @param {String|Element} element Accepts an id or element.
           * @returns {Viewer} The viewer attached to the given element, or undefined.
           */
          getViewer: function (element) {
            return $._viewers.get(this.getElement(element))
          },

          /**
           * Returns a DOM Element for the given id or element.
           * @function
           * @param {String|Element} element Accepts an id or element.
           * @returns {Element} The element with the given id, null, or the element itself.
           */
          getElement: function (element) {
            if (typeof element === 'string') {
              element = document.getElementById(element)
            }
            return element
          },

          /**
           * Determines the position of the upper-left corner of the element.
           * @function
           * @param {Element|String} element - the element we want the position for.
           * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element.
           */
          getElementPosition: function (element) {
            var result = new $.Point(),
              isFixed,
              offsetParent

            element = $.getElement(element)
            isFixed = $.getElementStyle(element).position === 'fixed'
            offsetParent = getOffsetParent(element, isFixed)

            while (offsetParent) {
              result.x += element.offsetLeft
              result.y += element.offsetTop

              if (isFixed) {
                result = result.plus($.getPageScroll())
              }

              element = offsetParent
              isFixed = $.getElementStyle(element).position === 'fixed'
              offsetParent = getOffsetParent(element, isFixed)
            }

            return result
          },

          /**
           * Determines the position of the upper-left corner of the element adjusted for current page and/or element scroll.
           * @function
           * @param {Element|String} element - the element we want the position for.
           * @returns {OpenSeadragon.Point} - the position of the upper left corner of the element adjusted for current page and/or element scroll.
           */
          getElementOffset: function (element) {
            element = $.getElement(element)

            var doc = element && element.ownerDocument,
              docElement,
              win,
              boundingRect = { top: 0, left: 0 }

            if (!doc) {
              return new $.Point()
            }

            docElement = doc.documentElement

            if (typeof element.getBoundingClientRect !== typeof undefined) {
              boundingRect = element.getBoundingClientRect()
            }

            win =
              doc === doc.window
                ? doc
                : doc.nodeType === 9
                ? doc.defaultView || doc.parentWindow
                : false

            return new $.Point(
              boundingRect.left +
                (win.pageXOffset || docElement.scrollLeft) -
                (docElement.clientLeft || 0),
              boundingRect.top +
                (win.pageYOffset || docElement.scrollTop) -
                (docElement.clientTop || 0)
            )
          },

          /**
           * Determines the height and width of the given element.
           * @function
           * @param {Element|String} element
           * @returns {OpenSeadragon.Point}
           */
          getElementSize: function (element) {
            element = $.getElement(element)

            return new $.Point(element.clientWidth, element.clientHeight)
          },

          /**
           * Returns the CSSStyle object for the given element.
           * @function
           * @param {Element|String} element
           * @returns {CSSStyle}
           */
          getElementStyle: document.documentElement.currentStyle
            ? function (element) {
                element = $.getElement(element)
                return element.currentStyle
              }
            : function (element) {
                element = $.getElement(element)
                return window.getComputedStyle(element, '')
              },

          /**
           * Returns the property with the correct vendor prefix appended.
           * @param {String} property the property name
           * @returns {String} the property with the correct prefix or null if not
           * supported.
           */
          getCssPropertyWithVendorPrefix: function (property) {
            var memo = {}

            $.getCssPropertyWithVendorPrefix = function (property) {
              if (memo[property] !== undefined) {
                return memo[property]
              }
              var style = document.createElement('div').style
              var result = null
              if (style[property] !== undefined) {
                result = property
              } else {
                var prefixes = [
                  'Webkit',
                  'Moz',
                  'MS',
                  'O',
                  'webkit',
                  'moz',
                  'ms',
                  'o',
                ]
                var suffix = $.capitalizeFirstLetter(property)
                for (var i = 0; i < prefixes.length; i++) {
                  var prop = prefixes[i] + suffix
                  if (style[prop] !== undefined) {
                    result = prop
                    break
                  }
                }
              }
              memo[property] = result
              return result
            }
            return $.getCssPropertyWithVendorPrefix(property)
          },

          /**
           * Capitalizes the first letter of a string
           * @param {String} string
           * @returns {String} The string with the first letter capitalized
           */
          capitalizeFirstLetter: function (string) {
            return string.charAt(0).toUpperCase() + string.slice(1)
          },

          /**
           * Compute the modulo of a number but makes sure to always return
           * a positive value (also known as Euclidean modulo).
           * @param {Number} number the number to compute the modulo of
           * @param {Number} modulo the modulo
           * @returns {Number} the result of the modulo of number
           */
          positiveModulo: function (number, modulo) {
            var result = number % modulo
            if (result < 0) {
              result += modulo
            }
            return result
          },

          /**
           * Determines if a point is within the bounding rectangle of the given element (hit-test).
           * @function
           * @param {Element|String} element
           * @param {OpenSeadragon.Point} point
           * @returns {Boolean}
           */
          pointInElement: function (element, point) {
            element = $.getElement(element)
            var offset = $.getElementOffset(element),
              size = $.getElementSize(element)
            return (
              point.x >= offset.x &&
              point.x < offset.x + size.x &&
              point.y < offset.y + size.y &&
              point.y >= offset.y
            )
          },

          /**
           * Gets the position of the mouse on the screen for a given event.
           * @function
           * @param {Event} [event]
           * @returns {OpenSeadragon.Point}
           */
          getMousePosition: function (event) {
            if (typeof event.pageX === 'number') {
              $.getMousePosition = function (event) {
                var result = new $.Point()

                result.x = event.pageX
                result.y = event.pageY

                return result
              }
            } else if (typeof event.clientX === 'number') {
              $.getMousePosition = function (event) {
                var result = new $.Point()

                result.x =
                  event.clientX +
                  document.body.scrollLeft +
                  document.documentElement.scrollLeft
                result.y =
                  event.clientY +
                  document.body.scrollTop +
                  document.documentElement.scrollTop

                return result
              }
            } else {
              throw new Error(
                'Unknown event mouse position, no known technique.'
              )
            }

            return $.getMousePosition(event)
          },

          /**
           * Determines the page's current scroll position.
           * @function
           * @returns {OpenSeadragon.Point}
           */
          getPageScroll: function () {
            var docElement = document.documentElement || {},
              body = document.body || {}

            if (typeof window.pageXOffset === 'number') {
              $.getPageScroll = function () {
                return new $.Point(window.pageXOffset, window.pageYOffset)
              }
            } else if (body.scrollLeft || body.scrollTop) {
              $.getPageScroll = function () {
                return new $.Point(
                  document.body.scrollLeft,
                  document.body.scrollTop
                )
              }
            } else if (docElement.scrollLeft || docElement.scrollTop) {
              $.getPageScroll = function () {
                return new $.Point(
                  document.documentElement.scrollLeft,
                  document.documentElement.scrollTop
                )
              }
            } else {
              // We can't reassign the function yet, as there was no scroll.
              return new $.Point(0, 0)
            }

            return $.getPageScroll()
          },

          /**
           * Set the page scroll position.
           * @function
           * @returns {OpenSeadragon.Point}
           */
          setPageScroll: function (scroll) {
            if (typeof window.scrollTo !== 'undefined') {
              $.setPageScroll = function (scroll) {
                window.scrollTo(scroll.x, scroll.y)
              }
            } else {
              var originalScroll = $.getPageScroll()
              if (
                originalScroll.x === scroll.x &&
                originalScroll.y === scroll.y
              ) {
                // We are already correctly positioned and there
                // is no way to detect the correct method.
                return
              }

              document.body.scrollLeft = scroll.x
              document.body.scrollTop = scroll.y
              var currentScroll = $.getPageScroll()
              if (
                currentScroll.x !== originalScroll.x &&
                currentScroll.y !== originalScroll.y
              ) {
                $.setPageScroll = function (scroll) {
                  document.body.scrollLeft = scroll.x
                  document.body.scrollTop = scroll.y
                }
                return
              }

              document.documentElement.scrollLeft = scroll.x
              document.documentElement.scrollTop = scroll.y
              currentScroll = $.getPageScroll()
              if (
                currentScroll.x !== originalScroll.x &&
                currentScroll.y !== originalScroll.y
              ) {
                $.setPageScroll = function (scroll) {
                  document.documentElement.scrollLeft = scroll.x
                  document.documentElement.scrollTop = scroll.y
                }
                return
              }

              // We can't find anything working, so we do nothing.
              $.setPageScroll = function (scroll) {}
            }

            $.setPageScroll(scroll)
          },

          /**
           * Determines the size of the browsers window.
           * @function
           * @returns {OpenSeadragon.Point}
           */
          getWindowSize: function () {
            var docElement = document.documentElement || {},
              body = document.body || {}

            if (typeof window.innerWidth === 'number') {
              $.getWindowSize = function () {
                return new $.Point(window.innerWidth, window.innerHeight)
              }
            } else if (docElement.clientWidth || docElement.clientHeight) {
              $.getWindowSize = function () {
                return new $.Point(
                  document.documentElement.clientWidth,
                  document.documentElement.clientHeight
                )
              }
            } else if (body.clientWidth || body.clientHeight) {
              $.getWindowSize = function () {
                return new $.Point(
                  document.body.clientWidth,
                  document.body.clientHeight
                )
              }
            } else {
              throw new Error('Unknown window size, no known technique.')
            }

            return $.getWindowSize()
          },

          /**
           * Wraps the given element in a nest of divs so that the element can
           * be easily centered using CSS tables
           * @function
           * @param {Element|String} element
           * @returns {Element} outermost wrapper element
           */
          makeCenteredNode: function (element) {
            // Convert a possible ID to an actual HTMLElement
            element = $.getElement(element)

            /*
                    CSS tables require you to have a display:table/row/cell hierarchy so we need to create
                    three nested wrapper divs:
                 */

            var wrappers = [
              $.makeNeutralElement('div'),
              $.makeNeutralElement('div'),
              $.makeNeutralElement('div'),
            ]

            // It feels like we should be able to pass style dicts to makeNeutralElement:
            $.extend(wrappers[0].style, {
              display: 'table',
              height: '100%',
              width: '100%',
            })

            $.extend(wrappers[1].style, {
              display: 'table-row',
            })

            $.extend(wrappers[2].style, {
              display: 'table-cell',
              verticalAlign: 'middle',
              textAlign: 'center',
            })

            wrappers[0].appendChild(wrappers[1])
            wrappers[1].appendChild(wrappers[2])
            wrappers[2].appendChild(element)

            return wrappers[0]
          },

          /**
           * Creates an easily positionable element of the given type that therefor
           * serves as an excellent container element.
           * @function
           * @param {String} tagName
           * @returns {Element}
           */
          makeNeutralElement: function (tagName) {
            var element = document.createElement(tagName),
              style = element.style

            style.background = 'transparent none'
            style.border = 'none'
            style.margin = '0px'
            style.padding = '0px'
            style.position = 'static'

            return element
          },

          /**
           * Returns the current milliseconds, using Date.now() if available
           * @function
           */
          now: function () {
            if (Date.now) {
              $.now = Date.now
            } else {
              $.now = function () {
                return new Date().getTime()
              }
            }

            return $.now()
          },

          /**
           * Ensures an image is loaded correctly to support alpha transparency.
           * @function
           * @param {String} src
           * @returns {Element}
           */
          makeTransparentImage: function (src) {
            var img = $.makeNeutralElement('img')

            img.src = src

            return img
          },

          /**
           * Sets the opacity of the specified element.
           * @function
           * @param {Element|String} element
           * @param {Number} opacity
           * @param {Boolean} [usesAlpha]
           */
          setElementOpacity: function (element, opacity, usesAlpha) {
            var ieOpacity, ieFilter

            element = $.getElement(element)

            if (usesAlpha && !$.Browser.alpha) {
              opacity = Math.round(opacity)
            }

            if ($.Browser.opacity) {
              element.style.opacity = opacity < 1 ? opacity : ''
            } else {
              if (opacity < 1) {
                ieOpacity = Math.round(100 * opacity)
                ieFilter = 'alpha(opacity=' + ieOpacity + ')'
                element.style.filter = ieFilter
              } else {
                element.style.filter = ''
              }
            }
          },

          /**
           * Sets the specified element's touch-action style attribute to 'none'.
           * @function
           * @param {Element|String} element
           */
          setElementTouchActionNone: function (element) {
            element = $.getElement(element)
            if (typeof element.style.touchAction !== 'undefined') {
              element.style.touchAction = 'none'
            } else if (typeof element.style.msTouchAction !== 'undefined') {
              element.style.msTouchAction = 'none'
            }
          },

          /**
           * Sets the specified element's pointer-events style attribute to the passed value.
           * @function
           * @param {Element|String} element
           * @param {String} value
           */
          setElementPointerEvents: function (element, value) {
            element = $.getElement(element)
            if (
              typeof element.style !== 'undefined' &&
              typeof element.style.pointerEvents !== 'undefined'
            ) {
              element.style.pointerEvents = value
            }
          },

          /**
           * Sets the specified element's pointer-events style attribute to 'none'.
           * @function
           * @param {Element|String} element
           */
          setElementPointerEventsNone: function (element) {
            $.setElementPointerEvents(element, 'none')
          },

          /**
           * Add the specified CSS class to the element if not present.
           * @function
           * @param {Element|String} element
           * @param {String} className
           */
          addClass: function (element, className) {
            element = $.getElement(element)

            if (!element.className) {
              element.className = className
            } else if (
              (' ' + element.className + ' ').indexOf(' ' + className + ' ') ===
              -1
            ) {
              element.className += ' ' + className
            }
          },

          /**
           * Find the first index at which an element is found in an array or -1
           * if not present.
           *
           * Code taken and adapted from
           * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility
           *
           * @function
           * @param {Array} array The array from which to find the element
           * @param {Object} searchElement The element to find
           * @param {Number} [fromIndex=0] Index to start research.
           * @returns {Number} The index of the element in the array.
           */
          indexOf: function (array, searchElement, fromIndex) {
            if (Array.prototype.indexOf) {
              this.indexOf = function (array, searchElement, fromIndex) {
                return array.indexOf(searchElement, fromIndex)
              }
            } else {
              this.indexOf = function (array, searchElement, fromIndex) {
                var i,
                  pivot = fromIndex ? fromIndex : 0,
                  length
                if (!array) {
                  throw new TypeError()
                }

                length = array.length
                if (length === 0 || pivot >= length) {
                  return -1
                }

                if (pivot < 0) {
                  pivot = length - Math.abs(pivot)
                }

                for (i = pivot; i < length; i++) {
                  if (array[i] === searchElement) {
                    return i
                  }
                }
                return -1
              }
            }
            return this.indexOf(array, searchElement, fromIndex)
          },

          /**
           * Remove the specified CSS class from the element.
           * @function
           * @param {Element|String} element
           * @param {String} className
           */
          removeClass: function (element, className) {
            var oldClasses,
              newClasses = [],
              i

            element = $.getElement(element)
            oldClasses = element.className.split(/\s+/)
            for (i = 0; i < oldClasses.length; i++) {
              if (oldClasses[i] && oldClasses[i] !== className) {
                newClasses.push(oldClasses[i])
              }
            }
            element.className = newClasses.join(' ')
          },

          /**
           * Convert passed addEventListener() options to boolean or options object,
           * depending on browser support.
           * @function
           * @param {Boolean|Object} [options] Boolean useCapture, or if [supportsEventListenerOptions]{@link OpenSeadragon.supportsEventListenerOptions}, can be an object
           * @param {Boolean} [options.capture]
           * @param {Boolean} [options.passive]
           * @param {Boolean} [options.once]
           * @returns {String} The protocol (http:, https:, file:, ftp: ...)
           */
          normalizeEventListenerOptions: function (options) {
            var opts
            if (typeof options !== 'undefined') {
              if (typeof options === 'boolean') {
                // Legacy Boolean useCapture
                opts = $.supportsEventListenerOptions
                  ? { capture: options }
                  : options
              } else {
                // Options object
                opts = $.supportsEventListenerOptions
                  ? options
                  : typeof options.capture !== 'undefined'
                  ? options.capture
                  : false
              }
            } else {
              // No options specified - Legacy optional useCapture argument
              //   (for IE, first supported on version 9, so we'll pass a Boolean)
              opts = $.supportsEventListenerOptions ? { capture: false } : false
            }
            return opts
          },

          /**
           * Adds an event listener for the given element, eventName and handler.
           * @function
           * @param {Element|String} element
           * @param {String} eventName
           * @param {Function} handler
           * @param {Boolean|Object} [options] Boolean useCapture, or if [supportsEventListenerOptions]{@link OpenSeadragon.supportsEventListenerOptions}, can be an object
           * @param {Boolean} [options.capture]
           * @param {Boolean} [options.passive]
           * @param {Boolean} [options.once]
           */
          addEvent: (function () {
            if ($.supportsAddEventListener) {
              return function (element, eventName, handler, options) {
                options = $.normalizeEventListenerOptions(options)
                element = $.getElement(element)
                element.addEventListener(eventName, handler, options)
              }
            } else if (
              document.documentElement.attachEvent &&
              document.attachEvent
            ) {
              return function (element, eventName, handler) {
                element = $.getElement(element)
                element.attachEvent('on' + eventName, handler)
              }
            } else {
              throw new Error('No known event model.')
            }
          })(),

          /**
           * Remove a given event listener for the given element, event type and
           * handler.
           * @function
           * @param {Element|String} element
           * @param {String} eventName
           * @param {Function} handler
           * @param {Boolean|Object} [options] Boolean useCapture, or if [supportsEventListenerOptions]{@link OpenSeadragon.supportsEventListenerOptions}, can be an object
           * @param {Boolean} [options.capture]
           */
          removeEvent: (function () {
            if ($.supportsRemoveEventListener) {
              return function (element, eventName, handler, options) {
                options = $.normalizeEventListenerOptions(options)
                element = $.getElement(element)
                element.removeEventListener(eventName, handler, options)
              }
            } else if (
              document.documentElement.detachEvent &&
              document.detachEvent
            ) {
              return function (element, eventName, handler) {
                element = $.getElement(element)
                element.detachEvent('on' + eventName, handler)
              }
            } else {
              throw new Error('No known event model.')
            }
          })(),

          /**
           * Cancels the default browser behavior had the event propagated all
           * the way up the DOM to the window object.
           * @function
           * @param {Event} [event]
           */
          cancelEvent: function (event) {
            event.preventDefault()
          },

          /**
           * Returns true if {@link OpenSeadragon.cancelEvent|cancelEvent} has been called on
           * the event, otherwise returns false.
           * @function
           * @param {Event} [event]
           */
          eventIsCanceled: function (event) {
            return event.defaultPrevented
          },

          /**
           * Stops the propagation of the event through the DOM in the capturing and bubbling phases.
           * @function
           * @param {Event} [event]
           */
          stopEvent: function (event) {
            event.stopPropagation()
          },

          /**
           * Similar to OpenSeadragon.delegate, but it does not immediately call
           * the method on the object, returning a function which can be called
           * repeatedly to delegate the method. It also allows additional arguments
           * to be passed during construction which will be added during each
           * invocation, and each invocation can add additional arguments as well.
           *
           * @function
           * @param {Object} object
           * @param {Function} method
           * @param [args] any additional arguments are passed as arguments to the
           *  created callback
           * @returns {Function}
           */
          createCallback: function (object, method) {
            //TODO: This pattern is painful to use and debug.  It's much cleaner
            //      to use pinning plus anonymous functions.  Get rid of this
            //      pattern!
            var initialArgs = [],
              i
            for (i = 2; i < arguments.length; i++) {
              initialArgs.push(arguments[i])
            }

            return function () {
              var args = initialArgs.concat([]),
                i
              for (i = 0; i < arguments.length; i++) {
                args.push(arguments[i])
              }

              return method.apply(object, args)
            }
          },

          /**
           * Retrieves the value of a url parameter from the window.location string.
           * @function
           * @param {String} key
           * @returns {String} The value of the url parameter or null if no param matches.
           */
          getUrlParameter: function (key) {
            // eslint-disable-next-line no-use-before-define
            var value = URLPARAMS[key]
            return value ? value : null
          },

          /**
           * Retrieves the protocol used by the url. The url can either be absolute
           * or relative.
           * @function
           * @private
           * @param {String} url The url to retrieve the protocol from.
           * @returns {String} The protocol (http:, https:, file:, ftp: ...)
           */
          getUrlProtocol: function (url) {
            var match = url.match(/^([a-z]+:)\/\//i)
            if (match === null) {
              // Relative URL, retrive the protocol from window.location
              return window.location.protocol
            }
            return match[1].toLowerCase()
          },

          /**
           * Create an XHR object
           * @private
           * @param {type} [local] If set to true, the XHR will be file: protocol
           * compatible if possible (but may raise a warning in the browser).
           * @returns {XMLHttpRequest}
           */
          createAjaxRequest: function (local) {
            // IE11 does not support window.ActiveXObject so we just try to
            // create one to see if it is supported.
            // See: http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx
            var supportActiveX
            try {
              /* global ActiveXObject:true */
              supportActiveX = !!new ActiveXObject('Microsoft.XMLHTTP')
            } catch (e) {
              supportActiveX = false
            }

            if (supportActiveX) {
              if (window.XMLHttpRequest) {
                $.createAjaxRequest = function (local) {
                  if (local) {
                    return new ActiveXObject('Microsoft.XMLHTTP')
                  }
                  return new XMLHttpRequest()
                }
              } else {
                $.createAjaxRequest = function () {
                  return new ActiveXObject('Microsoft.XMLHTTP')
                }
              }
            } else if (window.XMLHttpRequest) {
              $.createAjaxRequest = function () {
                return new XMLHttpRequest()
              }
            } else {
              throw new Error("Browser doesn't support XMLHttpRequest.")
            }
            return $.createAjaxRequest(local)
          },

          /**
           * Makes an AJAX request.
           * @param {Object} options
           * @param {String} options.url - the url to request
           * @param {Function} options.success - a function to call on a successful response
           * @param {Function} options.error - a function to call on when an error occurs
           * @param {Object} options.headers - headers to add to the AJAX request
           * @param {String} options.responseType - the response type of the AJAX request
           * @param {String} options.postData - HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
           *      see TileSource::getPostData), GET method used if null
           * @param {Boolean} [options.withCredentials=false] - whether to set the XHR's withCredentials
           * @throws {Error}
           * @returns {XMLHttpRequest}
           */
          makeAjaxRequest: function (url, onSuccess, onError) {
            var withCredentials
            var headers
            var responseType
            var postData

            // Note that our preferred API is that you pass in a single object; the named
            // arguments are for legacy support.
            if ($.isPlainObject(url)) {
              onSuccess = url.success
              onError = url.error
              withCredentials = url.withCredentials
              headers = url.headers
              responseType = url.responseType || null
              postData = url.postData || null
              url = url.url
            }

            var protocol = $.getUrlProtocol(url)
            var request = $.createAjaxRequest(protocol === 'file:')

            if (!$.isFunction(onSuccess)) {
              throw new Error('makeAjaxRequest requires a success callback')
            }

            request.onreadystatechange = function () {
              // 4 = DONE (https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#Properties)
              if (request.readyState === 4) {
                request.onreadystatechange = function () {}

                // With protocols other than http/https, a successful request status is in
                // the 200's on Firefox and 0 on other browsers
                if (
                  (request.status >= 200 && request.status < 300) ||
                  (request.status === 0 &&
                    protocol !== 'http:' &&
                    protocol !== 'https:')
                ) {
                  onSuccess(request)
                } else {
                  if ($.isFunction(onError)) {
                    onError(request)
                  } else {
                    $.console.error(
                      'AJAX request returned %d: %s',
                      request.status,
                      url
                    )
                  }
                }
              }
            }

            var method = postData ? 'POST' : 'GET'
            try {
              request.open(method, url, true)

              if (responseType) {
                request.responseType = responseType
              }

              if (headers) {
                for (var headerName in headers) {
                  if (
                    Object.prototype.hasOwnProperty.call(headers, headerName) &&
                    headers[headerName]
                  ) {
                    request.setRequestHeader(headerName, headers[headerName])
                  }
                }
              }

              if (withCredentials) {
                request.withCredentials = true
              }

              request.send(postData)
            } catch (e) {
              $.console.error(
                '%s while making AJAX request: %s',
                e.name,
                e.message
              )

              request.onreadystatechange = function () {}

              if ($.isFunction(onError)) {
                onError(request, e)
              }
            }

            return request
          },

          /**
           * Taken from jQuery 1.6.1
           * @function
           * @param {Object} options
           * @param {String} options.url
           * @param {Function} options.callback
           * @param {String} [options.param='callback'] The name of the url parameter
           *      to request the jsonp provider with.
           * @param {String} [options.callbackName=] The name of the callback to
           *      request the jsonp provider with.
           */
          jsonp: function (options) {
            var script,
              url = options.url,
              head =
                document.head ||
                document.getElementsByTagName('head')[0] ||
                document.documentElement,
              jsonpCallback = options.callbackName || 'openseadragon' + $.now(),
              previous = window[jsonpCallback],
              replace = '$1' + jsonpCallback + '$2',
              callbackParam = options.param || 'callback',
              callback = options.callback

            url = url.replace(/(=)\?(&|$)|\?\?/i, replace)
            // Add callback manually
            url +=
              (/\?/.test(url) ? '&' : '?') + callbackParam + '=' + jsonpCallback

            // Install callback
            window[jsonpCallback] = function (response) {
              if (!previous) {
                try {
                  delete window[jsonpCallback]
                } catch (e) {
                  //swallow
                }
              } else {
                window[jsonpCallback] = previous
              }
              if (callback && $.isFunction(callback)) {
                callback(response)
              }
            }

            script = document.createElement('script')

            //TODO: having an issue with async info requests
            if (undefined !== options.async || false !== options.async) {
              script.async = 'async'
            }

            if (options.scriptCharset) {
              script.charset = options.scriptCharset
            }

            script.src = url

            // Attach handlers for all browsers
            script.onload = script.onreadystatechange = function (_, isAbort) {
              if (
                isAbort ||
                !script.readyState ||
                /loaded|complete/.test(script.readyState)
              ) {
                // Handle memory leak in IE
                script.onload = script.onreadystatechange = null

                // Remove the script
                if (head && script.parentNode) {
                  head.removeChild(script)
                }

                // Dereference the script
                script = undefined
              }
            }
            // Use insertBefore instead of appendChild  to circumvent an IE6 bug.
            // This arises when a base node is used (#2709 and #4378).
            head.insertBefore(script, head.firstChild)
          },

          /**
           * Fully deprecated. Will throw an error.
           * @function
           * @deprecated use {@link OpenSeadragon.Viewer#open}
           */
          createFromDZI: function () {
            throw 'OpenSeadragon.createFromDZI is deprecated, use Viewer.open.'
          },

          /**
           * Parses an XML string into a DOM Document.
           * @function
           * @param {String} string
           * @returns {Document}
           */
          parseXml: function (string) {
            if (window.DOMParser) {
              $.parseXml = function (string) {
                var xmlDoc = null,
                  parser

                parser = new DOMParser()
                xmlDoc = parser.parseFromString(string, 'text/xml')
                return xmlDoc
              }
            } else if (window.ActiveXObject) {
              $.parseXml = function (string) {
                var xmlDoc = null

                xmlDoc = new ActiveXObject('Microsoft.XMLDOM')
                xmlDoc.async = false
                xmlDoc.loadXML(string)
                return xmlDoc
              }
            } else {
              throw new Error("Browser doesn't support XML DOM.")
            }

            return $.parseXml(string)
          },

          /**
           * Parses a JSON string into a Javascript object.
           * @function
           * @param {String} string
           * @returns {Object}
           */
          parseJSON: function (string) {
            $.parseJSON = window.JSON.parse
            return $.parseJSON(string)
          },

          /**
           * Reports whether the image format is supported for tiling in this
           * version.
           * @function
           * @param {String} [extension]
           * @returns {Boolean}
           */
          imageFormatSupported: function (extension) {
            extension = extension ? extension : ''
            // eslint-disable-next-line no-use-before-define
            return !!FILEFORMATS[extension.toLowerCase()]
          },

          /**
           * Updates supported image formats with user-specified values.
           * Preexisting formats that are not being updated are left unchanged.
           * By default, the defined formats are
           * <pre><code>{
           *      bmp:  false,
           *      jpeg: true,
           *      jpg:  true,
           *      png:  true,
           *      tif:  false,
           *      wdp:  false
           * }
           * </code></pre>
           * @function
           * @example
           * // sets webp as supported and png as unsupported
           * setImageFormatsSupported({webp: true, png: false});
           * @param {Object} formats An object containing format extensions as
           * keys and booleans as values.
           */
          setImageFormatsSupported: function (formats) {
            // eslint-disable-next-line no-use-before-define
            $.extend(FILEFORMATS, formats)
          },
        }
      )

      //TODO: $.console is often used inside a try/catch block which generally
      //      prevents allowings errors to occur with detection until a debugger
      //      is attached.  Although I've been guilty of the same anti-pattern
      //      I eventually was convinced that errors should naturally propagate in
      //      all but the most special cases.
      /**
       * A convenient alias for console when available, and a simple null
       * function when console is unavailable.
       * @static
       * @private
       */
      var nullfunction = function (msg) {
        //document.location.hash = msg;
      }

      $.console = window.console || {
        log: nullfunction,
        debug: nullfunction,
        info: nullfunction,
        warn: nullfunction,
        error: nullfunction,
        assert: nullfunction,
      }

      /**
       * The current browser vendor, version, and related information regarding detected features.
       * @member {Object} Browser
       * @memberof OpenSeadragon
       * @static
       * @type {Object}
       * @property {OpenSeadragon.BROWSERS} vendor - One of the {@link OpenSeadragon.BROWSERS} enumeration values.
       * @property {Number} version
       * @property {Boolean} alpha - Does the browser support image alpha transparency.
       */
      $.Browser = {
        vendor: $.BROWSERS.UNKNOWN,
        version: 0,
        alpha: true,
      }

      var FILEFORMATS = {
          bmp: false,
          jpeg: true,
          jpg: true,
          png: true,
          tif: false,
          wdp: false,
        },
        URLPARAMS = {}

      ;(function () {
        //A small auto-executing routine to determine the browser vendor,
        //version and supporting feature sets.
        var ver = navigator.appVersion,
          ua = navigator.userAgent,
          regex

        //console.error( 'appName: ' + navigator.appName );
        //console.error( 'appVersion: ' + navigator.appVersion );
        //console.error( 'userAgent: ' + navigator.userAgent );

        switch (navigator.appName) {
          case 'Microsoft Internet Explorer':
            if (!!window.attachEvent && !!window.ActiveXObject) {
              $.Browser.vendor = $.BROWSERS.IE
              $.Browser.version = parseFloat(
                ua.substring(
                  ua.indexOf('MSIE') + 5,
                  ua.indexOf(';', ua.indexOf('MSIE'))
                )
              )
            }
            break
          case 'Netscape':
            if (window.addEventListener) {
              if (ua.indexOf('Edge') >= 0) {
                $.Browser.vendor = $.BROWSERS.EDGE
                $.Browser.version = parseFloat(
                  ua.substring(ua.indexOf('Edge') + 5)
                )
              } else if (ua.indexOf('Edg') >= 0) {
                $.Browser.vendor = $.BROWSERS.CHROMEEDGE
                $.Browser.version = parseFloat(
                  ua.substring(ua.indexOf('Edg') + 4)
                )
              } else if (ua.indexOf('Firefox') >= 0) {
                $.Browser.vendor = $.BROWSERS.FIREFOX
                $.Browser.version = parseFloat(
                  ua.substring(ua.indexOf('Firefox') + 8)
                )
              } else if (ua.indexOf('Safari') >= 0) {
                $.Browser.vendor =
                  ua.indexOf('Chrome') >= 0
                    ? $.BROWSERS.CHROME
                    : $.BROWSERS.SAFARI
                $.Browser.version = parseFloat(
                  ua.substring(
                    ua.substring(0, ua.indexOf('Safari')).lastIndexOf('/') + 1,
                    ua.indexOf('Safari')
                  )
                )
              } else {
                regex = new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})')
                if (regex.exec(ua) !== null) {
                  $.Browser.vendor = $.BROWSERS.IE
                  $.Browser.version = parseFloat(RegExp.$1)
                }
              }
            }
            break
          case 'Opera':
            $.Browser.vendor = $.BROWSERS.OPERA
            $.Browser.version = parseFloat(ver)
            break
        }

        // ignore '?' portion of query string
        var query = window.location.search.substring(1),
          parts = query.split('&'),
          part,
          sep,
          i

        for (i = 0; i < parts.length; i++) {
          part = parts[i]
          sep = part.indexOf('=')

          if (sep > 0) {
            var key = part.substring(0, sep),
              value = part.substring(sep + 1)
            try {
              URLPARAMS[key] = decodeURIComponent(value)
            } catch (e) {
              $.console.error(
                'Ignoring malformed URL parameter: %s=%s',
                key,
                value
              )
            }
          }
        }

        //determine if this browser supports image alpha transparency
        $.Browser.alpha = !(
          $.Browser.vendor === $.BROWSERS.CHROME && $.Browser.version < 2
        )

        //determine if this browser supports element.style.opacity
        $.Browser.opacity = true

        if ($.Browser.vendor === $.BROWSERS.IE && $.Browser.version < 11) {
          $.console.error(
            'Internet Explorer versions < 11 are not supported by OpenSeadragon'
          )
        }
      })()

      // Adding support for HTML5's requestAnimationFrame as suggested by acdha.
      // Implementation taken from matt synder's post here:
      // http://mattsnider.com/cross-browser-and-legacy-supported-requestframeanimation/
      ;(function (w) {
        // most browsers have an implementation
        var requestAnimationFrame =
          w.requestAnimationFrame ||
          w.mozRequestAnimationFrame ||
          w.webkitRequestAnimationFrame ||
          w.msRequestAnimationFrame

        var cancelAnimationFrame =
          w.cancelAnimationFrame ||
          w.mozCancelAnimationFrame ||
          w.webkitCancelAnimationFrame ||
          w.msCancelAnimationFrame

        // polyfill, when necessary
        if (requestAnimationFrame && cancelAnimationFrame) {
          // We can't assign these window methods directly to $ because they
          // expect their "this" to be "window", so we call them in wrappers.
          $.requestAnimationFrame = function () {
            return requestAnimationFrame.apply(w, arguments)
          }
          $.cancelAnimationFrame = function () {
            return cancelAnimationFrame.apply(w, arguments)
          }
        } else {
          var aAnimQueue = [],
            processing = [],
            iRequestId = 0,
            iIntervalId

          // create a mock requestAnimationFrame function
          $.requestAnimationFrame = function (callback) {
            aAnimQueue.push([++iRequestId, callback])

            if (!iIntervalId) {
              iIntervalId = setInterval(function () {
                if (aAnimQueue.length) {
                  var time = $.now()
                  // Process all of the currently outstanding frame
                  // requests, but none that get added during the
                  // processing.
                  // Swap the arrays so we don't have to create a new
                  // array every frame.
                  var temp = processing
                  processing = aAnimQueue
                  aAnimQueue = temp
                  while (processing.length) {
                    processing.shift()[1](time)
                  }
                } else {
                  // don't continue the interval, if unnecessary
                  clearInterval(iIntervalId)
                  iIntervalId = undefined
                }
              }, 1000 / 50) // estimating support for 50 frames per second
            }

            return iRequestId
          }

          // create a mock cancelAnimationFrame function
          $.cancelAnimationFrame = function (requestId) {
            // find the request ID and remove it
            var i, j
            for (i = 0, j = aAnimQueue.length; i < j; i += 1) {
              if (aAnimQueue[i][0] === requestId) {
                aAnimQueue.splice(i, 1)
                return
              }
            }

            // If it's not in the queue, it may be in the set we're currently
            // processing (if cancelAnimationFrame is called from within a
            // requestAnimationFrame callback).
            for (i = 0, j = processing.length; i < j; i += 1) {
              if (processing[i][0] === requestId) {
                processing.splice(i, 1)
                return
              }
            }
          }
        }
      })(window)

      /**
       * @private
       * @inner
       * @function
       * @param {Element} element
       * @param {Boolean} [isFixed]
       * @returns {Element}
       */
      function getOffsetParent(element, isFixed) {
        if (isFixed && element !== document.body) {
          return document.body
        } else {
          return element.offsetParent
        }
      }
    })(OpenSeadragon)

    // Universal Module Definition, supports CommonJS, AMD and simple script tag
    ;(function (root, factory) {
      if (module.exports) {
        // expose as commonjs module
        module.exports = factory()
      } else {
        // expose as window.OpenSeadragon
        root.OpenSeadragon = factory()
      }
    })(commonjsGlobal, function () {
      return OpenSeadragon
    })

    /*
     * OpenSeadragon - full-screen support functions
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * Determine native full screen support we can get from the browser.
       * @member fullScreenApi
       * @memberof OpenSeadragon
       * @type {object}
       * @property {Boolean} supportsFullScreen Return true if full screen API is supported.
       * @property {Function} isFullScreen Return true if currently in full screen mode.
       * @property {Function} getFullScreenElement Return the element currently in full screen mode.
       * @property {Function} requestFullScreen Make a request to go in full screen mode.
       * @property {Function} exitFullScreen Make a request to exit full screen mode.
       * @property {Function} cancelFullScreen Deprecated, use exitFullScreen instead.
       * @property {String} fullScreenEventName Event fired when the full screen mode change.
       * @property {String} fullScreenErrorEventName Event fired when a request to go
       * in full screen mode failed.
       */
      var fullScreenApi = {
        supportsFullScreen: false,
        isFullScreen: function () {
          return false
        },
        getFullScreenElement: function () {
          return null
        },
        requestFullScreen: function () {},
        exitFullScreen: function () {},
        cancelFullScreen: function () {},
        fullScreenEventName: '',
        fullScreenErrorEventName: '',
      }

      // check for native support
      if (document.exitFullscreen) {
        // W3C standard
        fullScreenApi.supportsFullScreen = true
        fullScreenApi.getFullScreenElement = function () {
          return document.fullscreenElement
        }
        fullScreenApi.requestFullScreen = function (element) {
          return element.requestFullscreen()
        }
        fullScreenApi.exitFullScreen = function () {
          document.exitFullscreen()
        }
        fullScreenApi.fullScreenEventName = 'fullscreenchange'
        fullScreenApi.fullScreenErrorEventName = 'fullscreenerror'
      } else if (document.msExitFullscreen) {
        // IE 11
        fullScreenApi.supportsFullScreen = true
        fullScreenApi.getFullScreenElement = function () {
          return document.msFullscreenElement
        }
        fullScreenApi.requestFullScreen = function (element) {
          return element.msRequestFullscreen()
        }
        fullScreenApi.exitFullScreen = function () {
          document.msExitFullscreen()
        }
        fullScreenApi.fullScreenEventName = 'MSFullscreenChange'
        fullScreenApi.fullScreenErrorEventName = 'MSFullscreenError'
      } else if (document.webkitExitFullscreen) {
        // Recent webkit
        fullScreenApi.supportsFullScreen = true
        fullScreenApi.getFullScreenElement = function () {
          return document.webkitFullscreenElement
        }
        fullScreenApi.requestFullScreen = function (element) {
          return element.webkitRequestFullscreen()
        }
        fullScreenApi.exitFullScreen = function () {
          document.webkitExitFullscreen()
        }
        fullScreenApi.fullScreenEventName = 'webkitfullscreenchange'
        fullScreenApi.fullScreenErrorEventName = 'webkitfullscreenerror'
      } else if (document.webkitCancelFullScreen) {
        // Old webkit
        fullScreenApi.supportsFullScreen = true
        fullScreenApi.getFullScreenElement = function () {
          return document.webkitCurrentFullScreenElement
        }
        fullScreenApi.requestFullScreen = function (element) {
          return element.webkitRequestFullScreen()
        }
        fullScreenApi.exitFullScreen = function () {
          document.webkitCancelFullScreen()
        }
        fullScreenApi.fullScreenEventName = 'webkitfullscreenchange'
        fullScreenApi.fullScreenErrorEventName = 'webkitfullscreenerror'
      } else if (document.mozCancelFullScreen) {
        // Firefox
        fullScreenApi.supportsFullScreen = true
        fullScreenApi.getFullScreenElement = function () {
          return document.mozFullScreenElement
        }
        fullScreenApi.requestFullScreen = function (element) {
          return element.mozRequestFullScreen()
        }
        fullScreenApi.exitFullScreen = function () {
          document.mozCancelFullScreen()
        }
        fullScreenApi.fullScreenEventName = 'mozfullscreenchange'
        fullScreenApi.fullScreenErrorEventName = 'mozfullscreenerror'
      }
      fullScreenApi.isFullScreen = function () {
        return fullScreenApi.getFullScreenElement() !== null
      }
      fullScreenApi.cancelFullScreen = function () {
        $.console.error(
          'cancelFullScreen is deprecated. Use exitFullScreen instead.'
        )
        fullScreenApi.exitFullScreen()
      }

      // export api
      $.extend($, fullScreenApi)
    })(OpenSeadragon)

    /*
     * OpenSeadragon - EventSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * Event handler method signature used by all OpenSeadragon events.
       *
       * @callback EventHandler
       * @memberof OpenSeadragon
       * @param {Object} event - See individual events for event-specific properties.
       */

      /**
       * @class EventSource
       * @classdesc For use by classes which want to support custom, non-browser events.
       *
       * @memberof OpenSeadragon
       */
      $.EventSource = function () {
        this.events = {}
      }

      /** @lends OpenSeadragon.EventSource.prototype */
      $.EventSource.prototype = {
        /**
         * Add an event handler to be triggered only once (or a given number of times)
         * for a given event.
         * @function
         * @param {String} eventName - Name of event to register.
         * @param {OpenSeadragon.EventHandler} handler - Function to call when event
         * is triggered.
         * @param {Object} [userData=null] - Arbitrary object to be passed unchanged
         * to the handler.
         * @param {Number} [times=1] - The number of times to handle the event
         * before removing it.
         */
        addOnceHandler: function (eventName, handler, userData, times) {
          var self = this
          times = times || 1
          var count = 0
          var onceHandler = function (event) {
            count++
            if (count === times) {
              self.removeHandler(eventName, onceHandler)
            }
            handler(event)
          }
          this.addHandler(eventName, onceHandler, userData)
        },

        /**
         * Add an event handler for a given event.
         * @function
         * @param {String} eventName - Name of event to register.
         * @param {OpenSeadragon.EventHandler} handler - Function to call when event is triggered.
         * @param {Object} [userData=null] - Arbitrary object to be passed unchanged to the handler.
         */
        addHandler: function (eventName, handler, userData) {
          var events = this.events[eventName]
          if (!events) {
            this.events[eventName] = events = []
          }
          if (handler && $.isFunction(handler)) {
            events[events.length] = {
              handler: handler,
              userData: userData || null,
            }
          }
        },

        /**
         * Remove a specific event handler for a given event.
         * @function
         * @param {String} eventName - Name of event for which the handler is to be removed.
         * @param {OpenSeadragon.EventHandler} handler - Function to be removed.
         */
        removeHandler: function (eventName, handler) {
          var events = this.events[eventName],
            handlers = [],
            i
          if (!events) {
            return
          }
          if ($.isArray(events)) {
            for (i = 0; i < events.length; i++) {
              if (events[i].handler !== handler) {
                handlers.push(events[i])
              }
            }
            this.events[eventName] = handlers
          }
        },

        /**
         * Get the amount of handlers registered for a given event.
         * @param {String} eventName - Name of event to inspect.
         * @returns {number} amount of events
         */
        numberOfHandlers: function (eventName) {
          var events = this.events[eventName]
          if (!events) {
            return 0
          }
          return events.length
        },

        /**
         * Remove all event handlers for a given event type. If no type is given all
         * event handlers for every event type are removed.
         * @function
         * @param {String} eventName - Name of event for which all handlers are to be removed.
         */
        removeAllHandlers: function (eventName) {
          if (eventName) {
            this.events[eventName] = []
          } else {
            for (var eventType in this.events) {
              this.events[eventType] = []
            }
          }
        },

        /**
         * Get a function which iterates the list of all handlers registered for a given event, calling the handler for each.
         * @function
         * @param {String} eventName - Name of event to get handlers for.
         */
        getHandler: function (eventName) {
          var events = this.events[eventName]
          if (!events || !events.length) {
            return null
          }
          events = events.length === 1 ? [events[0]] : Array.apply(null, events)
          return function (source, args) {
            var i,
              length = events.length
            for (i = 0; i < length; i++) {
              if (events[i]) {
                args.eventSource = source
                args.userData = events[i].userData
                events[i].handler(args)
              }
            }
          }
        },

        /**
         * Trigger an event, optionally passing additional information.
         * @function
         * @param {String} eventName - Name of event to register.
         * @param {Object} eventArgs - Event-specific data.
         */
        raiseEvent: function (eventName, eventArgs) {
          //uncomment if you want to get a log of all events
          //$.console.log( eventName );
          var handler = this.getHandler(eventName)

          if (handler) {
            if (!eventArgs) {
              eventArgs = {}
            }

            handler(this, eventArgs)
          }
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - MouseTracker
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      // dictionary from hash to private properties
      var THIS = {}

      /**
       * @class MouseTracker
       * @classdesc Provides simplified handling of common pointer device (mouse, touch, pen, etc.) gestures
       *            and keyboard events on a specified element.
       * @memberof OpenSeadragon
       * @param {Object} options
       *      Allows configurable properties to be entirely specified by passing
       *      an options object to the constructor.  The constructor also supports
       *      the original positional arguments 'element', 'clickTimeThreshold',
       *      and 'clickDistThreshold' in that order.
       * @param {Element|String} options.element
       *      A reference to an element or an element id for which the pointer/key
       *      events will be monitored.
       * @param {Boolean} [options.startDisabled=false]
       *      If true, event tracking on the element will not start until
       *      {@link OpenSeadragon.MouseTracker.setTracking|setTracking} is called.
       * @param {Number} options.clickTimeThreshold
       *      The number of milliseconds within which a pointer down-up event combination
       *      will be treated as a click gesture.
       * @param {Number} options.clickDistThreshold
       *      The maximum distance allowed between a pointer down event and a pointer up event
       *      to be treated as a click gesture.
       * @param {Number} options.dblClickTimeThreshold
       *      The number of milliseconds within which two pointer down-up event combinations
       *      will be treated as a double-click gesture.
       * @param {Number} options.dblClickDistThreshold
       *      The maximum distance allowed between two pointer click events
       *      to be treated as a click gesture.
       * @param {Number} [options.stopDelay=50]
       *      The number of milliseconds without pointer move before the stop
       *      event is fired.
       * @param {OpenSeadragon.EventHandler} [options.preProcessEventHandler=null]
       *      An optional handler for controlling DOM event propagation and processing.
       * @param {OpenSeadragon.EventHandler} [options.contextMenuHandler=null]
       *      An optional handler for contextmenu.
       * @param {OpenSeadragon.EventHandler} [options.enterHandler=null]
       *      An optional handler for pointer enter.
       * @param {OpenSeadragon.EventHandler} [options.leaveHandler=null]
       *      An optional handler for pointer leave.
       * @param {OpenSeadragon.EventHandler} [options.exitHandler=null]
       *      An optional handler for pointer leave. <span style="color:red;">Deprecated. Use leaveHandler instead.</span>
       * @param {OpenSeadragon.EventHandler} [options.overHandler=null]
       *      An optional handler for pointer over.
       * @param {OpenSeadragon.EventHandler} [options.outHandler=null]
       *      An optional handler for pointer out.
       * @param {OpenSeadragon.EventHandler} [options.pressHandler=null]
       *      An optional handler for pointer press.
       * @param {OpenSeadragon.EventHandler} [options.nonPrimaryPressHandler=null]
       *      An optional handler for pointer non-primary button press.
       * @param {OpenSeadragon.EventHandler} [options.releaseHandler=null]
       *      An optional handler for pointer release.
       * @param {OpenSeadragon.EventHandler} [options.nonPrimaryReleaseHandler=null]
       *      An optional handler for pointer non-primary button release.
       * @param {OpenSeadragon.EventHandler} [options.moveHandler=null]
       *      An optional handler for pointer move.
       * @param {OpenSeadragon.EventHandler} [options.scrollHandler=null]
       *      An optional handler for mouse wheel scroll.
       * @param {OpenSeadragon.EventHandler} [options.clickHandler=null]
       *      An optional handler for pointer click.
       * @param {OpenSeadragon.EventHandler} [options.dblClickHandler=null]
       *      An optional handler for pointer double-click.
       * @param {OpenSeadragon.EventHandler} [options.dragHandler=null]
       *      An optional handler for the drag gesture.
       * @param {OpenSeadragon.EventHandler} [options.dragEndHandler=null]
       *      An optional handler for after a drag gesture.
       * @param {OpenSeadragon.EventHandler} [options.pinchHandler=null]
       *      An optional handler for the pinch gesture.
       * @param {OpenSeadragon.EventHandler} [options.keyDownHandler=null]
       *      An optional handler for keydown.
       * @param {OpenSeadragon.EventHandler} [options.keyUpHandler=null]
       *      An optional handler for keyup.
       * @param {OpenSeadragon.EventHandler} [options.keyHandler=null]
       *      An optional handler for keypress.
       * @param {OpenSeadragon.EventHandler} [options.focusHandler=null]
       *      An optional handler for focus.
       * @param {OpenSeadragon.EventHandler} [options.blurHandler=null]
       *      An optional handler for blur.
       * @param {Object} [options.userData=null]
       *      Arbitrary object to be passed unchanged to any attached handler methods.
       */
      $.MouseTracker = function (options) {
        var args = arguments

        if (!$.isPlainObject(options)) {
          options = {
            element: args[0],
            clickTimeThreshold: args[1],
            clickDistThreshold: args[2],
          }
        }

        this.hash = Math.random() // An unique hash for this tracker.
        /**
         * The element for which pointer events are being monitored.
         * @member {Element} element
         * @memberof OpenSeadragon.MouseTracker#
         */
        this.element = $.getElement(options.element)
        /**
         * The number of milliseconds within which a pointer down-up event combination
         * will be treated as a click gesture.
         * @member {Number} clickTimeThreshold
         * @memberof OpenSeadragon.MouseTracker#
         */
        this.clickTimeThreshold =
          options.clickTimeThreshold || $.DEFAULT_SETTINGS.clickTimeThreshold
        /**
         * The maximum distance allowed between a pointer down event and a pointer up event
         * to be treated as a click gesture.
         * @member {Number} clickDistThreshold
         * @memberof OpenSeadragon.MouseTracker#
         */
        this.clickDistThreshold =
          options.clickDistThreshold || $.DEFAULT_SETTINGS.clickDistThreshold
        /**
         * The number of milliseconds within which two pointer down-up event combinations
         * will be treated as a double-click gesture.
         * @member {Number} dblClickTimeThreshold
         * @memberof OpenSeadragon.MouseTracker#
         */
        this.dblClickTimeThreshold =
          options.dblClickTimeThreshold ||
          $.DEFAULT_SETTINGS.dblClickTimeThreshold
        /**
         * The maximum distance allowed between two pointer click events
         * to be treated as a double-click gesture.
         * @member {Number} dblClickDistThreshold
         * @memberof OpenSeadragon.MouseTracker#
         */
        this.dblClickDistThreshold =
          options.dblClickDistThreshold ||
          $.DEFAULT_SETTINGS.dblClickDistThreshold
        /*eslint-disable no-multi-spaces*/
        this.userData = options.userData || null
        this.stopDelay = options.stopDelay || 50

        this.preProcessEventHandler = options.preProcessEventHandler || null
        this.contextMenuHandler = options.contextMenuHandler || null
        this.enterHandler = options.enterHandler || null
        this.leaveHandler = options.leaveHandler || null
        this.exitHandler = options.exitHandler || null // Deprecated v2.5.0
        this.overHandler = options.overHandler || null
        this.outHandler = options.outHandler || null
        this.pressHandler = options.pressHandler || null
        this.nonPrimaryPressHandler = options.nonPrimaryPressHandler || null
        this.releaseHandler = options.releaseHandler || null
        this.nonPrimaryReleaseHandler = options.nonPrimaryReleaseHandler || null
        this.moveHandler = options.moveHandler || null
        this.scrollHandler = options.scrollHandler || null
        this.clickHandler = options.clickHandler || null
        this.dblClickHandler = options.dblClickHandler || null
        this.dragHandler = options.dragHandler || null
        this.dragEndHandler = options.dragEndHandler || null
        this.pinchHandler = options.pinchHandler || null
        this.stopHandler = options.stopHandler || null
        this.keyDownHandler = options.keyDownHandler || null
        this.keyUpHandler = options.keyUpHandler || null
        this.keyHandler = options.keyHandler || null
        this.focusHandler = options.focusHandler || null
        this.blurHandler = options.blurHandler || null
        /*eslint-enable no-multi-spaces*/

        //Store private properties in a scope sealed hash map
        var _this = this

        /**
         * @private
         * @property {Boolean} tracking
         *      Are we currently tracking pointer events for this element.
         */
        THIS[this.hash] = {
          click: function (event) {
            onClick(_this, event)
          },
          dblclick: function (event) {
            onDblClick(_this, event)
          },
          keydown: function (event) {
            onKeyDown(_this, event)
          },
          keyup: function (event) {
            onKeyUp(_this, event)
          },
          keypress: function (event) {
            onKeyPress(_this, event)
          },
          focus: function (event) {
            onFocus(_this, event)
          },
          blur: function (event) {
            onBlur(_this, event)
          },
          contextmenu: function (event) {
            onContextMenu(_this, event)
          },

          wheel: function (event) {
            onWheel(_this, event)
          },
          mousewheel: function (event) {
            onMouseWheel(_this, event)
          },
          DOMMouseScroll: function (event) {
            onMouseWheel(_this, event)
          },
          MozMousePixelScroll: function (event) {
            onMouseWheel(_this, event)
          },

          losecapture: function (event) {
            onLoseCapture(_this, event)
          },

          mouseenter: function (event) {
            onPointerEnter(_this, event)
          },
          mouseleave: function (event) {
            onPointerLeave(_this, event)
          },
          mouseover: function (event) {
            onPointerOver(_this, event)
          },
          mouseout: function (event) {
            onPointerOut(_this, event)
          },
          mousedown: function (event) {
            onPointerDown(_this, event)
          },
          mouseup: function (event) {
            onPointerUp(_this, event)
          },
          mousemove: function (event) {
            onPointerMove(_this, event)
          },

          touchstart: function (event) {
            onTouchStart(_this, event)
          },
          touchend: function (event) {
            onTouchEnd(_this, event)
          },
          touchmove: function (event) {
            onTouchMove(_this, event)
          },
          touchcancel: function (event) {
            onTouchCancel(_this, event)
          },

          gesturestart: function (event) {
            onGestureStart(_this, event)
          }, // Safari/Safari iOS
          gesturechange: function (event) {
            onGestureChange(_this, event)
          }, // Safari/Safari iOS

          gotpointercapture: function (event) {
            onGotPointerCapture(_this, event)
          },
          lostpointercapture: function (event) {
            onLostPointerCapture(_this, event)
          },
          pointerenter: function (event) {
            onPointerEnter(_this, event)
          },
          pointerleave: function (event) {
            onPointerLeave(_this, event)
          },
          pointerover: function (event) {
            onPointerOver(_this, event)
          },
          pointerout: function (event) {
            onPointerOut(_this, event)
          },
          pointerdown: function (event) {
            onPointerDown(_this, event)
          },
          pointerup: function (event) {
            onPointerUp(_this, event)
          },
          pointermove: function (event) {
            onPointerMove(_this, event)
          },
          pointercancel: function (event) {
            onPointerCancel(_this, event)
          },
          pointerupcaptured: function (event) {
            onPointerUpCaptured(_this, event)
          },
          pointermovecaptured: function (event) {
            onPointerMoveCaptured(_this, event)
          },

          tracking: false,

          // Active pointers lists. Array of GesturePointList objects, one for each pointer device type.
          // GesturePointList objects are added each time a pointer is tracked by a new pointer device type (see getActivePointersListByType()).
          // Active pointers are any pointer being tracked for this element which are in the hit-test area
          //     of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
          activePointersLists: [],

          // Tracking for double-click gesture
          lastClickPos: null,
          dblClickTimeOut: null,

          // Tracking for pinch gesture
          pinchGPoints: [],
          lastPinchDist: 0,
          currentPinchDist: 0,
          lastPinchCenter: null,
          currentPinchCenter: null,

          // Tracking for drag
          sentDragEvent: false,
        }

        this.hasGestureHandlers = !!(
          this.pressHandler ||
          this.nonPrimaryPressHandler ||
          this.releaseHandler ||
          this.nonPrimaryReleaseHandler ||
          this.clickHandler ||
          this.dblClickHandler ||
          this.dragHandler ||
          this.dragEndHandler ||
          this.pinchHandler
        )
        this.hasScrollHandler = !!this.scrollHandler

        if ($.MouseTracker.havePointerEvents) {
          $.setElementPointerEvents(this.element, 'auto')
        }

        if (this.exitHandler) {
          $.console.error(
            'MouseTracker.exitHandler is deprecated. Use MouseTracker.leaveHandler instead.'
          )
        }

        if (!options.startDisabled) {
          this.setTracking(true)
        }
      }

      /** @lends OpenSeadragon.MouseTracker.prototype */
      $.MouseTracker.prototype = {
        /**
         * Clean up any events or objects created by the tracker.
         * @function
         */
        destroy: function () {
          stopTracking(this)
          this.element = null

          THIS[this.hash] = null
          delete THIS[this.hash]
        },

        /**
         * Are we currently tracking events on this element.
         * @deprecated Just use this.tracking
         * @function
         * @returns {Boolean} Are we currently tracking events on this element.
         */
        isTracking: function () {
          return THIS[this.hash].tracking
        },

        /**
         * Enable or disable whether or not we are tracking events on this element.
         * @function
         * @param {Boolean} track True to start tracking, false to stop tracking.
         * @returns {OpenSeadragon.MouseTracker} Chainable.
         */
        setTracking: function (track) {
          if (track) {
            startTracking(this)
          } else {
            stopTracking(this)
          }
          //chain
          return this
        },

        /**
         * Returns the {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} for the given pointer device type,
         * creating and caching a new {@link OpenSeadragon.MouseTracker.GesturePointList|GesturePointList} if one doesn't already exist for the type.
         * @function
         * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
         * @returns {OpenSeadragon.MouseTracker.GesturePointList}
         */
        getActivePointersListByType: function (type) {
          var delegate = THIS[this.hash],
            i,
            len = delegate.activePointersLists.length,
            list

          for (i = 0; i < len; i++) {
            if (delegate.activePointersLists[i].type === type) {
              return delegate.activePointersLists[i]
            }
          }

          list = new $.MouseTracker.GesturePointList(type)
          delegate.activePointersLists.push(list)
          return list
        },

        /**
         * Returns the total number of pointers currently active on the tracked element.
         * @function
         * @returns {Number}
         */
        getActivePointerCount: function () {
          var delegate = THIS[this.hash],
            i,
            len = delegate.activePointersLists.length,
            count = 0

          for (i = 0; i < len; i++) {
            count += delegate.activePointersLists[i].getLength()
          }

          return count
        },

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
         */
        preProcessEventHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Boolean} event.preventDefault
         *      Set to true to prevent the default user-agent's handling of the contextmenu event.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        contextMenuHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Number} event.pointers
         *      Number of pointers (all types) active in the tracked element.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.buttonDownAny
         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        enterHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @since v2.5.0
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Number} event.pointers
         *      Number of pointers (all types) active in the tracked element.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.buttonDownAny
         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        leaveHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @deprecated v2.5.0 Use leaveHandler instead
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Number} event.pointers
         *      Number of pointers (all types) active in the tracked element.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.buttonDownAny
         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        exitHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @since v2.5.0
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Number} event.pointers
         *      Number of pointers (all types) active in the tracked element.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.buttonDownAny
         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        overHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @since v2.5.0
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Number} event.pointers
         *      Number of pointers (all types) active in the tracked element.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.buttonDownAny
         *      Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        outHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        pressHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.button
         *      Button which caused the event.
         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        nonPrimaryPressHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.insideElementPressed
         *      True if the left mouse button is currently being pressed and was
         *      initiated inside the tracked element, otherwise false.
         * @param {Boolean} event.insideElementReleased
         *      True if the cursor inside the tracked element when the button was released.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        releaseHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.button
         *      Button which caused the event.
         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        nonPrimaryReleaseHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        moveHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.scroll
         *      The scroll delta for the event.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead. Touch devices no longer generate scroll event.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Boolean} event.preventDefault
         *      Set to true to prevent the default user-agent's handling of the wheel event.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        scrollHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Boolean} event.quick
         *      True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for ignoring drag events.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Element} event.originalTarget
         *      The DOM element clicked on.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        clickHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        dblClickHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {OpenSeadragon.Point} event.delta
         *      The x,y components of the difference between the current position and the last drag event position.  Useful for ignoring or weighting the events.
         * @param {Number} event.speed
         *     Current computed speed, in pixels per second.
         * @param {Number} event.direction
         *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        dragHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.speed
         *     Speed at the end of a drag gesture, in pixels per second.
         * @param {Number} event.direction
         *     Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        dragEndHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {Array.<OpenSeadragon.MouseTracker.GesturePoint>} event.gesturePoints
         *      Gesture points associated with the gesture. Velocity data can be found here.
         * @param {OpenSeadragon.Point} event.lastCenter
         *      The previous center point of the two pinch contact points relative to the tracked element.
         * @param {OpenSeadragon.Point} event.center
         *      The center point of the two pinch contact points relative to the tracked element.
         * @param {Number} event.lastDistance
         *      The previous distance between the two pinch contact points in CSS pixels.
         * @param {Number} event.distance
         *      The distance between the two pinch contact points in CSS pixels.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        pinchHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {String} event.pointerType
         *     "mouse", "touch", "pen", etc.
         * @param {OpenSeadragon.Point} event.position
         *      The position of the event relative to the tracked element.
         * @param {Number} event.buttons
         *      Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @param {Boolean} event.isTouchEvent
         *      True if the original event is a touch event, otherwise false. <span style="color:red;">Deprecated. Use pointerType and/or originalEvent instead.</span>
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        stopHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {Number} event.keyCode
         *      The key code that was pressed.
         * @param {Boolean} event.ctrl
         *      True if the ctrl key was pressed during this event.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.alt
         *      True if the alt key was pressed during this event.
         * @param {Boolean} event.meta
         *      True if the meta key was pressed during this event.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Boolean} event.preventDefault
         *      Set to true to prevent the default user-agent's handling of the keydown event.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        keyDownHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {Number} event.keyCode
         *      The key code that was pressed.
         * @param {Boolean} event.ctrl
         *      True if the ctrl key was pressed during this event.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.alt
         *      True if the alt key was pressed during this event.
         * @param {Boolean} event.meta
         *      True if the meta key was pressed during this event.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Boolean} event.preventDefault
         *      Set to true to prevent the default user-agent's handling of the keyup event.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        keyUpHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {Number} event.keyCode
         *      The key code that was pressed.
         * @param {Boolean} event.ctrl
         *      True if the ctrl key was pressed during this event.
         * @param {Boolean} event.shift
         *      True if the shift key was pressed during this event.
         * @param {Boolean} event.alt
         *      True if the alt key was pressed during this event.
         * @param {Boolean} event.meta
         *      True if the meta key was pressed during this event.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Boolean} event.preventDefault
         *      Set to true to prevent the default user-agent's handling of the keypress event.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        keyHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        focusHandler: function () {},

        /**
         * Implement or assign implementation to these handlers during or after
         * calling the constructor.
         * @function
         * @param {Object} event
         * @param {OpenSeadragon.MouseTracker} event.eventSource
         *      A reference to the tracker instance.
         * @param {Object} event.originalEvent
         *      The original event object.
         * @param {Object} event.userData
         *      Arbitrary user-defined object.
         */
        blurHandler: function () {},
      }

      // https://github.com/openseadragon/openseadragon/pull/790
      /**
       * True if inside an iframe, otherwise false.
       * @member {Boolean} isInIframe
       * @private
       * @inner
       */
      var isInIframe = (function () {
        try {
          return window.self !== window.top
        } catch (e) {
          return true
        }
      })()

      // https://github.com/openseadragon/openseadragon/pull/790
      /**
       * @function
       * @private
       * @inner
       * @returns {Boolean} True if the target supports DOM Level 2 event subscription methods, otherwise false.
       */
      function canAccessEvents(target) {
        try {
          return target.addEventListener && target.removeEventListener
        } catch (e) {
          return false
        }
      }

      /**
       * Provides continuous computation of velocity (speed and direction) of active pointers.
       * This is a singleton, used by all MouseTracker instances, as it is unlikely there will ever be more than
       * two active gesture pointers at a time.
       *
       * @private
       * @member gesturePointVelocityTracker
       * @memberof OpenSeadragon.MouseTracker
       */
      $.MouseTracker.gesturePointVelocityTracker = (function () {
        var trackerPoints = [],
          intervalId = 0,
          lastTime = 0

        // Generates a unique identifier for a tracked gesture point
        var _generateGuid = function (tracker, gPoint) {
          return tracker.hash.toString() + gPoint.type + gPoint.id.toString()
        }

        // Interval timer callback. Computes velocity for all tracked gesture points.
        var _doTracking = function () {
          var i,
            len = trackerPoints.length,
            trackPoint,
            gPoint,
            now = $.now(),
            elapsedTime,
            distance,
            speed

          elapsedTime = now - lastTime
          lastTime = now

          for (i = 0; i < len; i++) {
            trackPoint = trackerPoints[i]
            gPoint = trackPoint.gPoint
            // Math.atan2 gives us just what we need for a velocity vector, as we can simply
            //   use cos()/sin() to extract the x/y velocity components.
            gPoint.direction = Math.atan2(
              gPoint.currentPos.y - trackPoint.lastPos.y,
              gPoint.currentPos.x - trackPoint.lastPos.x
            )
            // speed = distance / elapsed time
            distance = trackPoint.lastPos.distanceTo(gPoint.currentPos)
            trackPoint.lastPos = gPoint.currentPos
            speed = (1000 * distance) / (elapsedTime + 1)
            // Simple biased average, favors the most recent speed computation. Smooths out erratic gestures a bit.
            gPoint.speed = 0.75 * speed + 0.25 * gPoint.speed
          }
        }

        // Public. Add a gesture point to be tracked
        var addPoint = function (tracker, gPoint) {
          var guid = _generateGuid(tracker, gPoint)

          trackerPoints.push({
            guid: guid,
            gPoint: gPoint,
            lastPos: gPoint.currentPos,
          })

          // Only fire up the interval timer when there's gesture pointers to track
          if (trackerPoints.length === 1) {
            lastTime = $.now()
            intervalId = window.setInterval(_doTracking, 50)
          }
        }

        // Public. Stop tracking a gesture point
        var removePoint = function (tracker, gPoint) {
          var guid = _generateGuid(tracker, gPoint),
            i,
            len = trackerPoints.length
          for (i = 0; i < len; i++) {
            if (trackerPoints[i].guid === guid) {
              trackerPoints.splice(i, 1)
              // Only run the interval timer if theres gesture pointers to track
              len--
              if (len === 0) {
                window.clearInterval(intervalId)
              }
              break
            }
          }
        }

        return {
          addPoint: addPoint,
          removePoint: removePoint,
        }
      })()

      ///////////////////////////////////////////////////////////////////////////////
      // Pointer event model and feature detection
      ///////////////////////////////////////////////////////////////////////////////

      $.MouseTracker.captureElement = document

      /**
       * Detect available mouse wheel event name.
       */
      $.MouseTracker.wheelEventName =
        ($.Browser.vendor === $.BROWSERS.IE && $.Browser.version > 8) ||
        'onwheel' in document.createElement('div')
          ? 'wheel' // Modern browsers support 'wheel'
          : document.onmousewheel !== undefined
          ? 'mousewheel' // Webkit and IE support at least 'mousewheel'
          : 'DOMMouseScroll' // Assume old Firefox

      /**
       * Detect browser pointer device event model(s) and build appropriate list of events to subscribe to.
       */
      $.MouseTracker.subscribeEvents = [
        'click',
        'dblclick',
        'keydown',
        'keyup',
        'keypress',
        'focus',
        'blur',
        'contextmenu',
        $.MouseTracker.wheelEventName,
      ]

      if ($.MouseTracker.wheelEventName === 'DOMMouseScroll') {
        // Older Firefox
        $.MouseTracker.subscribeEvents.push('MozMousePixelScroll')
      }

      if (window.PointerEvent) {
        // IE11 and other W3C Pointer Event implementations (see http://www.w3.org/TR/pointerevents)
        $.MouseTracker.havePointerEvents = true
        $.MouseTracker.subscribeEvents.push(
          'pointerenter',
          'pointerleave',
          'pointerover',
          'pointerout',
          'pointerdown',
          'pointerup',
          'pointermove',
          'pointercancel'
        )
        // Pointer events capture support
        $.MouseTracker.havePointerCapture = (function () {
          var divElement = document.createElement('div')
          return (
            $.isFunction(divElement.setPointerCapture) &&
            $.isFunction(divElement.releasePointerCapture)
          )
        })()
        if ($.MouseTracker.havePointerCapture) {
          $.MouseTracker.subscribeEvents.push(
            'gotpointercapture',
            'lostpointercapture'
          )
        }
      } else {
        // Legacy W3C mouse events
        $.MouseTracker.havePointerEvents = false
        $.MouseTracker.subscribeEvents.push(
          'mouseenter',
          'mouseleave',
          'mouseover',
          'mouseout',
          'mousedown',
          'mouseup',
          'mousemove'
        )
        $.MouseTracker.mousePointerId = 'legacy-mouse'
        // Legacy mouse events capture support (IE/Firefox only?)
        $.MouseTracker.havePointerCapture = (function () {
          var divElement = document.createElement('div')
          return (
            $.isFunction(divElement.setCapture) &&
            $.isFunction(divElement.releaseCapture)
          )
        })()
        if ($.MouseTracker.havePointerCapture) {
          $.MouseTracker.subscribeEvents.push('losecapture')
        }
        // Legacy touch events
        if ('ontouchstart' in window) {
          // iOS, Android, and other W3c Touch Event implementations
          //    (see http://www.w3.org/TR/touch-events/)
          //    (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
          //    (see https://developer.apple.com/library/safari/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
          $.MouseTracker.subscribeEvents.push(
            'touchstart',
            'touchend',
            'touchmove',
            'touchcancel'
          )
        }
        if ('ongesturestart' in window) {
          // iOS (see https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html)
          //   Subscribe to these to prevent default gesture handling
          $.MouseTracker.subscribeEvents.push('gesturestart', 'gesturechange')
        }
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Classes and typedefs
      ///////////////////////////////////////////////////////////////////////////////

      /**
       * Used for the processing/disposition of DOM events (propagation, default handling, capture, etc.)
       *
       * @typedef {Object} EventProcessInfo
       * @memberof OpenSeadragon.MouseTracker
       * @since v2.5.0
       *
       * @property {OpenSeadragon.MouseTracker} eventSource
       *      A reference to the tracker instance.
       * @property {Object} originalEvent
       *      The original DOM event object.
       * @property {Number} eventPhase
       *      0 == NONE, 1 == CAPTURING_PHASE, 2 == AT_TARGET, 3 == BUBBLING_PHASE.
       * @property {String} eventType
       *     "keydown", "keyup", "keypress", "focus", "blur", "contextmenu", "gotpointercapture", "lostpointercapture", "pointerenter", "pointerleave", "pointerover", "pointerout", "pointerdown", "pointerup", "pointermove", "pointercancel", "wheel", "click", "dblclick".
       * @property {String} pointerType
       *     "mouse", "touch", "pen", etc.
       * @property {Boolean} isEmulated
       *      True if this is an emulated event. If true, originalEvent is either the event that caused
       *      the emulated event, a synthetic event object created with values from the actual DOM event,
       *      or null if no DOM event applies. Emulated events can occur on eventType "wheel" on legacy mouse-scroll
       *      event emitting user agents.
       * @property {Boolean} isStoppable
       *      True if propagation of the event (e.g. bubbling) can be stopped with stopPropagation/stopImmediatePropagation.
       * @property {Boolean} isCancelable
       *      True if the event's default handling by the browser can be prevented with preventDefault.
       * @property {Boolean} defaultPrevented
       *      True if the event's default handling has already been prevented by a descendent element.
       * @property {Boolean} preventDefault
       *      Set to true to prevent the event's default handling by the browser.
       * @property {Boolean} preventGesture
       *      Set to true to prevent this MouseTracker from generating a gesture from the event.
       *      Valid on eventType "pointerdown".
       * @property {Boolean} stopPropagation
       *      Set to true prevent the event from propagating to ancestor/descendent elements on capture/bubble phase.
       * @property {Boolean} shouldCapture
       *      (Internal Use) Set to true if the pointer should be captured (events (re)targeted to tracker element).
       * @property {Boolean} shouldReleaseCapture
       *      (Internal Use) Set to true if the captured pointer should be released.
       * @property {Object} userData
       *      Arbitrary user-defined object.
       */

      /**
       * Represents a point of contact on the screen made by a mouse cursor, pen, touch, or other pointer device.
       *
       * @typedef {Object} GesturePoint
       * @memberof OpenSeadragon.MouseTracker
       *
       * @property {Number} id
       *     Identifier unique from all other active GesturePoints for a given pointer device.
       * @property {String} type
       *     The pointer device type: "mouse", "touch", "pen", etc.
       * @property {Boolean} captured
       *     True if events for the gesture point are captured to the tracked element.
       * @property {Boolean} isPrimary
       *     True if the gesture point is a master pointer amongst the set of active pointers for each pointer type. True for mouse and primary (first) touch/pen pointers.
       * @property {Boolean} insideElementPressed
       *     True if button pressed or contact point initiated inside the screen area of the tracked element.
       * @property {Boolean} insideElement
       *     True if pointer or contact point is currently inside the bounds of the tracked element.
       * @property {Number} speed
       *     Current computed speed, in pixels per second.
       * @property {Number} direction
       *     Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
       * @property {OpenSeadragon.Point} contactPos
       *     The initial pointer contact position, relative to the page including any scrolling. Only valid if the pointer has contact (pressed, touch contact, pen contact).
       * @property {Number} contactTime
       *     The initial pointer contact time, in milliseconds. Only valid if the pointer has contact (pressed, touch contact, pen contact).
       * @property {OpenSeadragon.Point} lastPos
       *     The last pointer position, relative to the page including any scrolling.
       * @property {Number} lastTime
       *     The last pointer contact time, in milliseconds.
       * @property {OpenSeadragon.Point} currentPos
       *     The current pointer position, relative to the page including any scrolling.
       * @property {Number} currentTime
       *     The current pointer contact time, in milliseconds.
       */

      /**
       * @class GesturePointList
       * @classdesc Provides an abstraction for a set of active {@link OpenSeadragon.MouseTracker.GesturePoint|GesturePoint} objects for a given pointer device type.
       *            Active pointers are any pointer being tracked for this element which are in the hit-test area
       *            of the element (for hover-capable devices) and/or have contact or a button press initiated in the element.
       * @memberof OpenSeadragon.MouseTracker
       * @param {String} type - The pointer device type: "mouse", "touch", "pen", etc.
       */
      $.MouseTracker.GesturePointList = function (type) {
        this._gPoints = []
        /**
         * The pointer device type: "mouse", "touch", "pen", etc.
         * @member {String} type
         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
         */
        this.type = type
        /**
         * Current buttons pressed for the device.
         * Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @member {Number} buttons
         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
         */
        this.buttons = 0
        /**
         * Current number of contact points (touch points, mouse down, etc.) for the device.
         * @member {Number} contacts
         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
         */
        this.contacts = 0
        /**
         * Current number of clicks for the device. Used for multiple click gesture tracking.
         * @member {Number} clicks
         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
         */
        this.clicks = 0
        /**
         * Current number of captured pointers for the device.
         * @member {Number} captureCount
         * @memberof OpenSeadragon.MouseTracker.GesturePointList#
         */
        this.captureCount = 0
      }

      /** @lends OpenSeadragon.MouseTracker.GesturePointList.prototype */
      $.MouseTracker.GesturePointList.prototype = {
        /**
         * @function
         * @returns {Number} Number of gesture points in the list.
         */
        getLength: function () {
          return this._gPoints.length
        },
        /**
         * @function
         * @returns {Array.<OpenSeadragon.MouseTracker.GesturePoint>} The list of gesture points in the list as an array (read-only).
         */
        asArray: function () {
          return this._gPoints
        },
        /**
         * @function
         * @param {OpenSeadragon.MouseTracker.GesturePoint} gesturePoint - A gesture point to add to the list.
         * @returns {Number} Number of gesture points in the list.
         */
        add: function (gp) {
          return this._gPoints.push(gp)
        },
        /**
         * @function
         * @param {Number} id - The id of the gesture point to remove from the list.
         * @returns {Number} Number of gesture points in the list.
         */
        removeById: function (id) {
          var i,
            len = this._gPoints.length
          for (i = 0; i < len; i++) {
            if (this._gPoints[i].id === id) {
              this._gPoints.splice(i, 1)
              break
            }
          }
          return this._gPoints.length
        },
        /**
         * @function
         * @param {Number} index - The index of the gesture point to retrieve from the list.
         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point at the given index, or null if not found.
         */
        getByIndex: function (index) {
          if (index < this._gPoints.length) {
            return this._gPoints[index]
          }

          return null
        },
        /**
         * @function
         * @param {Number} id - The id of the gesture point to retrieve from the list.
         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The gesture point with the given id, or null if not found.
         */
        getById: function (id) {
          var i,
            len = this._gPoints.length
          for (i = 0; i < len; i++) {
            if (this._gPoints[i].id === id) {
              return this._gPoints[i]
            }
          }
          return null
        },
        /**
         * @function
         * @returns {OpenSeadragon.MouseTracker.GesturePoint|null} The primary gesture point in the list, or null if not found.
         */
        getPrimary: function (id) {
          var i,
            len = this._gPoints.length
          for (i = 0; i < len; i++) {
            if (this._gPoints[i].isPrimary) {
              return this._gPoints[i]
            }
          }
          return null
        },

        /**
         * Increment this pointer list's contact count.
         * It will evaluate whether this pointer type is allowed to have multiple contacts.
         * @function
         */
        addContact: function () {
          ++this.contacts

          if (
            this.contacts > 1 &&
            (this.type === 'mouse' || this.type === 'pen')
          ) {
            $.console.warn(
              'GesturePointList.addContact() Implausible contacts value'
            )
            this.contacts = 1
          }
        },

        /**
         * Decrement this pointer list's contact count.
         * It will make sure the count does not go below 0.
         * @function
         */
        removeContact: function () {
          --this.contacts

          if (this.contacts < 0) {
            this.contacts = 0
          }
        },
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Utility functions
      ///////////////////////////////////////////////////////////////////////////////

      /**
       * Removes all tracked pointers.
       * @private
       * @inner
       */
      function clearTrackedPointers(tracker) {
        var delegate = THIS[tracker.hash],
          i,
          j,
          pointsList,
          gPoints,
          gPointsToRemove,
          pointerListCount = delegate.activePointersLists.length

        for (i = 0; i < pointerListCount; i++) {
          pointsList = delegate.activePointersLists[i]

          if (pointsList.getLength() > 0) {
            // Make an array containing references to the gPoints in the pointer list
            //   (because calls to stopTrackingPointer() are going to modify the pointer list)
            gPointsToRemove = []
            gPoints = pointsList.asArray()
            for (j = 0; j < gPoints.length; j++) {
              gPointsToRemove.push(gPoints[j])
            }

            // Release and remove all gPoints from the pointer list
            for (j = 0; j < gPointsToRemove.length; j++) {
              stopTrackingPointer(tracker, pointsList, gPointsToRemove[j])
            }
          }
        }

        for (i = 0; i < pointerListCount; i++) {
          delegate.activePointersLists.pop()
        }

        delegate.sentDragEvent = false
      }

      /**
       * Starts tracking pointer events on the tracked element.
       * @private
       * @inner
       */
      function startTracking(tracker) {
        var delegate = THIS[tracker.hash],
          event,
          i

        if (!delegate.tracking) {
          for (i = 0; i < $.MouseTracker.subscribeEvents.length; i++) {
            event = $.MouseTracker.subscribeEvents[i]
            $.addEvent(
              tracker.element,
              event,
              delegate[event],
              event === $.MouseTracker.wheelEventName
                ? { passive: false, capture: false }
                : false
            )
          }

          clearTrackedPointers(tracker)

          delegate.tracking = true
        }
      }

      /**
       * Stops tracking pointer events on the tracked element.
       * @private
       * @inner
       */
      function stopTracking(tracker) {
        var delegate = THIS[tracker.hash],
          event,
          i

        if (delegate.tracking) {
          for (i = 0; i < $.MouseTracker.subscribeEvents.length; i++) {
            event = $.MouseTracker.subscribeEvents[i]
            $.removeEvent(tracker.element, event, delegate[event], false)
          }

          clearTrackedPointers(tracker)

          delegate.tracking = false
        }
      }

      /**
       * @private
       * @inner
       */
      function getCaptureEventParams(tracker, pointerType) {
        var delegate = THIS[tracker.hash]

        if (pointerType === 'pointerevent') {
          return {
            upName: 'pointerup',
            upHandler: delegate.pointerupcaptured,
            moveName: 'pointermove',
            moveHandler: delegate.pointermovecaptured,
          }
        } else if (pointerType === 'mouse') {
          return {
            upName: 'pointerup',
            upHandler: delegate.pointerupcaptured,
            moveName: 'pointermove',
            moveHandler: delegate.pointermovecaptured,
          }
        } else if (pointerType === 'touch') {
          return {
            upName: 'touchend',
            upHandler: delegate.touchendcaptured,
            moveName: 'touchmove',
            moveHandler: delegate.touchmovecaptured,
          }
        } else {
          throw new Error(
            'MouseTracker.getCaptureEventParams: Unknown pointer type.'
          )
        }
      }

      /**
       * Begin capturing pointer events to the tracked element.
       * @private
       * @inner
       */
      function capturePointer(tracker, gPoint) {
        var eventParams

        if ($.MouseTracker.havePointerCapture) {
          if ($.MouseTracker.havePointerEvents) {
            // Can throw NotFoundError (InvalidPointerId Firefox < 82)
            //   (should never happen so we'll log a warning)
            try {
              tracker.element.setPointerCapture(gPoint.id)
              //$.console.log('element.setPointerCapture() called');
            } catch (e) {
              $.console.warn('setPointerCapture() called on invalid pointer ID')
              return
            }
          } else {
            tracker.element.setCapture(true)
            //$.console.log('element.setCapture() called');
          }
        } else {
          // Emulate mouse capture by hanging listeners on the document object.
          //    (Note we listen on the capture phase so the captured handlers will get called first)
          // eslint-disable-next-line no-use-before-define
          //$.console.log('Emulated mouse capture set');
          eventParams = getCaptureEventParams(
            tracker,
            $.MouseTracker.havePointerEvents ? 'pointerevent' : gPoint.type
          )
          // https://github.com/openseadragon/openseadragon/pull/790
          if (isInIframe && canAccessEvents(window.top)) {
            $.addEvent(
              window.top,
              eventParams.upName,
              eventParams.upHandler,
              true
            )
          }
          $.addEvent(
            $.MouseTracker.captureElement,
            eventParams.upName,
            eventParams.upHandler,
            true
          )
          $.addEvent(
            $.MouseTracker.captureElement,
            eventParams.moveName,
            eventParams.moveHandler,
            true
          )
        }

        updatePointerCaptured(tracker, gPoint, true)
      }

      /**
       * Stop capturing pointer events to the tracked element.
       * @private
       * @inner
       */
      function releasePointer(tracker, gPoint) {
        var eventParams
        var pointsList
        var cachedGPoint

        if ($.MouseTracker.havePointerCapture) {
          if ($.MouseTracker.havePointerEvents) {
            pointsList = tracker.getActivePointersListByType(gPoint.type)
            cachedGPoint = pointsList.getById(gPoint.id)
            if (!cachedGPoint || !cachedGPoint.captured) {
              return
            }
            // Can throw NotFoundError (InvalidPointerId Firefox < 82)
            //   (should never happen, but it does on Firefox 79 touch so we won't log a warning)
            try {
              tracker.element.releasePointerCapture(gPoint.id)
              //$.console.log('element.releasePointerCapture() called');
            } catch (e) {
              //$.console.warn('releasePointerCapture() called on invalid pointer ID');
            }
          } else {
            tracker.element.releaseCapture()
            //$.console.log('element.releaseCapture() called');
          }
        } else {
          // Emulate mouse capture by hanging listeners on the document object.
          //    (Note we listen on the capture phase so the captured handlers will get called first)
          //$.console.log('Emulated mouse capture release');
          eventParams = getCaptureEventParams(
            tracker,
            $.MouseTracker.havePointerEvents ? 'pointerevent' : gPoint.type
          )
          // https://github.com/openseadragon/openseadragon/pull/790
          if (isInIframe && canAccessEvents(window.top)) {
            $.removeEvent(
              window.top,
              eventParams.upName,
              eventParams.upHandler,
              true
            )
          }
          $.removeEvent(
            $.MouseTracker.captureElement,
            eventParams.moveName,
            eventParams.moveHandler,
            true
          )
          $.removeEvent(
            $.MouseTracker.captureElement,
            eventParams.upName,
            eventParams.upHandler,
            true
          )
        }

        updatePointerCaptured(tracker, gPoint, false)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       * @private
       * @inner
       */
      function getPointerId(event) {
        return $.MouseTracker.havePointerEvents
          ? event.pointerId
          : $.MouseTracker.mousePointerId
      }

      /**
       * Gets a W3C Pointer Events model compatible pointer type string from a DOM pointer event.
       * IE10 used a long integer value, but the W3C specification (and IE11+) use a string "mouse", "touch", "pen", etc.
       *
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       * @private
       * @inner
       */
      function getPointerType(event) {
        if ($.MouseTracker.havePointerEvents) {
          // Note: IE pointer events bug - sends invalid pointerType on lostpointercapture events
          //    and possibly other events. We rely on sane, valid property values in DOM events, so for
          //    IE, when the pointerType is missing, we'll default to 'mouse'...should be right most of the time
          return (
            event.pointerType ||
            ($.Browser.vendor === $.BROWSERS.IE ? 'mouse' : '')
          )
        } else {
          return 'mouse'
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       * @private
       * @inner
       */
      function getIsPrimary(event) {
        return $.MouseTracker.havePointerEvents ? event.isPrimary : true
      }

      /**
       * @private
       * @inner
       */
      function getMouseAbsolute(event) {
        return $.getMousePosition(event)
      }

      /**
       * @private
       * @inner
       */
      function getMouseRelative(event, element) {
        return getPointRelativeToAbsolute(getMouseAbsolute(event), element)
      }

      /**
       * @private
       * @inner
       */
      function getPointRelativeToAbsolute(point, element) {
        var offset = $.getElementOffset(element)
        return point.minus(offset)
      }

      /**
       * @private
       * @inner
       */
      function getCenterPoint(point1, point2) {
        return new $.Point((point1.x + point2.x) / 2, (point1.y + point2.y) / 2)
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Device-specific DOM event handlers
      ///////////////////////////////////////////////////////////////////////////////

      /**
       * @private
       * @inner
       */
      function onClick(tracker, event) {
        //$.console.log('click ' + (tracker.userData ? tracker.userData.toString() : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'click',
          pointerType: 'mouse',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onDblClick(tracker, event) {
        //$.console.log('dblclick ' + (tracker.userData ? tracker.userData.toString() : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'dblclick',
          pointerType: 'mouse',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onKeyDown(tracker, event) {
        //$.console.log( "keydown %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );
        var eventArgs = null

        var eventInfo = {
          originalEvent: event,
          eventType: 'keydown',
          pointerType: '',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (
          tracker.keyDownHandler &&
          !eventInfo.preventGesture &&
          !eventInfo.defaultPrevented
        ) {
          eventArgs = {
            eventSource: tracker,
            keyCode: event.keyCode ? event.keyCode : event.charCode,
            ctrl: event.ctrlKey,
            shift: event.shiftKey,
            alt: event.altKey,
            meta: event.metaKey,
            originalEvent: event,
            preventDefault:
              eventInfo.preventDefault || eventInfo.defaultPrevented,
            userData: tracker.userData,
          }

          tracker.keyDownHandler(eventArgs)
        }

        if (
          (eventArgs && eventArgs.preventDefault) ||
          (eventInfo.preventDefault && !eventInfo.defaultPrevented)
        ) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onKeyUp(tracker, event) {
        //$.console.log( "keyup %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );

        var eventArgs = null

        var eventInfo = {
          originalEvent: event,
          eventType: 'keyup',
          pointerType: '',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (
          tracker.keyUpHandler &&
          !eventInfo.preventGesture &&
          !eventInfo.defaultPrevented
        ) {
          eventArgs = {
            eventSource: tracker,
            keyCode: event.keyCode ? event.keyCode : event.charCode,
            ctrl: event.ctrlKey,
            shift: event.shiftKey,
            alt: event.altKey,
            meta: event.metaKey,
            originalEvent: event,
            preventDefault:
              eventInfo.preventDefault || eventInfo.defaultPrevented,
            userData: tracker.userData,
          }

          tracker.keyUpHandler(eventArgs)
        }

        if (
          (eventArgs && eventArgs.preventDefault) ||
          (eventInfo.preventDefault && !eventInfo.defaultPrevented)
        ) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onKeyPress(tracker, event) {
        //$.console.log( "keypress %s %s %s %s %s", event.keyCode, event.charCode, event.ctrlKey, event.shiftKey, event.altKey );

        var eventArgs = null

        var eventInfo = {
          originalEvent: event,
          eventType: 'keypress',
          pointerType: '',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (
          tracker.keyHandler &&
          !eventInfo.preventGesture &&
          !eventInfo.defaultPrevented
        ) {
          eventArgs = {
            eventSource: tracker,
            keyCode: event.keyCode ? event.keyCode : event.charCode,
            ctrl: event.ctrlKey,
            shift: event.shiftKey,
            alt: event.altKey,
            meta: event.metaKey,
            originalEvent: event,
            preventDefault:
              eventInfo.preventDefault || eventInfo.defaultPrevented,
            userData: tracker.userData,
          }

          tracker.keyHandler(eventArgs)
        }

        if (
          (eventArgs && eventArgs.preventDefault) ||
          (eventInfo.preventDefault && !eventInfo.defaultPrevented)
        ) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onFocus(tracker, event) {
        //$.console.log('focus  ' + (tracker.userData ? tracker.userData.toString() : ''));

        // focus doesn't bubble and is not cancelable, but we call
        //   preProcessEvent() so it's dispatched to preProcessEventHandler
        //   if necessary
        var eventInfo = {
          originalEvent: event,
          eventType: 'focus',
          pointerType: '',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (tracker.focusHandler && !eventInfo.preventGesture) {
          tracker.focusHandler({
            eventSource: tracker,
            originalEvent: event,
            userData: tracker.userData,
          })
        }
      }

      /**
       * @private
       * @inner
       */
      function onBlur(tracker, event) {
        //$.console.log('blur  ' + (tracker.userData ? tracker.userData.toString() : ''));

        // blur doesn't bubble and is not cancelable, but we call
        //   preProcessEvent() so it's dispatched to preProcessEventHandler
        //   if necessary
        var eventInfo = {
          originalEvent: event,
          eventType: 'blur',
          pointerType: '',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (tracker.blurHandler && !eventInfo.preventGesture) {
          tracker.blurHandler({
            eventSource: tracker,
            originalEvent: event,
            userData: tracker.userData,
          })
        }
      }

      /**
       * @private
       * @inner
       */
      function onContextMenu(tracker, event) {
        //$.console.log('contextmenu ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var eventArgs = null

        var eventInfo = {
          originalEvent: event,
          eventType: 'contextmenu',
          pointerType: 'mouse',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        // ContextMenu
        if (
          tracker.contextMenuHandler &&
          !eventInfo.preventGesture &&
          !eventInfo.defaultPrevented
        ) {
          eventArgs = {
            eventSource: tracker,
            position: getPointRelativeToAbsolute(
              getMouseAbsolute(event),
              tracker.element
            ),
            originalEvent: eventInfo.originalEvent,
            preventDefault:
              eventInfo.preventDefault || eventInfo.defaultPrevented,
            userData: tracker.userData,
          }

          tracker.contextMenuHandler(eventArgs)
        }

        if (
          (eventArgs && eventArgs.preventDefault) ||
          (eventInfo.preventDefault && !eventInfo.defaultPrevented)
        ) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * Handler for 'wheel' events
       *
       * @private
       * @inner
       */
      function onWheel(tracker, event) {
        handleWheelEvent(tracker, event, event)
      }

      /**
       * Handler for 'mousewheel', 'DOMMouseScroll', and 'MozMousePixelScroll' events
       *
       * @private
       * @inner
       */
      function onMouseWheel(tracker, event) {
        // Simulate a 'wheel' event
        var simulatedEvent = {
          target: event.target || event.srcElement,
          type: 'wheel',
          shiftKey: event.shiftKey || false,
          clientX: event.clientX,
          clientY: event.clientY,
          pageX: event.pageX ? event.pageX : event.clientX,
          pageY: event.pageY ? event.pageY : event.clientY,
          deltaMode: event.type === 'MozMousePixelScroll' ? 0 : 1, // 0=pixel, 1=line, 2=page
          deltaX: 0,
          deltaZ: 0,
        }

        // Calculate deltaY
        if ($.MouseTracker.wheelEventName === 'mousewheel') {
          simulatedEvent.deltaY =
            -event.wheelDelta / $.DEFAULT_SETTINGS.pixelsPerWheelLine
        } else {
          simulatedEvent.deltaY = event.detail
        }

        handleWheelEvent(tracker, simulatedEvent, event)
      }

      /**
       * Handles 'wheel' events.
       * The event may be simulated by the legacy mouse wheel event handler (onMouseWheel()).
       *
       * @private
       * @inner
       */
      function handleWheelEvent(tracker, event, originalEvent) {
        var nDelta = 0,
          eventInfo

        var eventArgs = null

        // The nDelta variable is gated to provide smooth z-index scrolling
        //   since the mouse wheel allows for substantial deltas meant for rapid
        //   y-index scrolling.
        // event.deltaMode: 0=pixel, 1=line, 2=page
        // TODO: Deltas in pixel mode should be accumulated then a scroll value computed after $.DEFAULT_SETTINGS.pixelsPerWheelLine threshold reached
        nDelta = event.deltaY < 0 ? 1 : -1

        eventInfo = {
          originalEvent: event,
          eventType: 'wheel',
          pointerType: 'mouse',
          isEmulated: event !== originalEvent,
        }
        preProcessEvent(tracker, eventInfo)

        if (
          tracker.scrollHandler &&
          !eventInfo.preventGesture &&
          !eventInfo.defaultPrevented
        ) {
          eventArgs = {
            eventSource: tracker,
            pointerType: 'mouse',
            position: getMouseRelative(event, tracker.element),
            scroll: nDelta,
            shift: event.shiftKey,
            isTouchEvent: false,
            originalEvent: originalEvent,
            preventDefault:
              eventInfo.preventDefault || eventInfo.defaultPrevented,
            userData: tracker.userData,
          }

          tracker.scrollHandler(eventArgs)
        }

        if (eventInfo.stopPropagation) {
          $.stopEvent(originalEvent)
        }
        if (
          (eventArgs && eventArgs.preventDefault) ||
          (eventInfo.preventDefault && !eventInfo.defaultPrevented)
        ) {
          $.cancelEvent(originalEvent)
        }
      }

      /**
       * TODO Never actually seen this event fired, and documentation is tough to find
       * @private
       * @inner
       */
      function onLoseCapture(tracker, event) {
        //$.console.log('losecapture ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var gPoint = {
          id: $.MouseTracker.mousePointerId,
          type: 'mouse',
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'lostpointercapture',
          pointerType: 'mouse',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (event.target === tracker.element) {
          updatePointerCaptured(tracker, gPoint, false)
        }

        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onTouchStart(tracker, event) {
        var time,
          i,
          touchCount = event.changedTouches.length,
          gPoint,
          pointsList = tracker.getActivePointersListByType('touch')

        time = $.now()

        //$.console.log('touchstart ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        if (pointsList.getLength() > event.touches.length - touchCount) {
          $.console.warn(
            "Tracked touch contact count doesn't match event.touches.length"
          )
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerdown',
          pointerType: 'touch',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        for (i = 0; i < touchCount; i++) {
          gPoint = {
            id: event.changedTouches[i].identifier,
            type: 'touch',
            // Simulate isPrimary
            isPrimary: pointsList.getLength() === 0,
            currentPos: getMouseAbsolute(event.changedTouches[i]),
            currentTime: time,
          }

          // simulate touchenter on our tracked element
          updatePointerEnter(tracker, eventInfo, gPoint)

          updatePointerDown(tracker, eventInfo, gPoint, 0)

          updatePointerCaptured(tracker, gPoint, true)
        }

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onTouchEnd(tracker, event) {
        var time,
          i,
          touchCount = event.changedTouches.length,
          gPoint

        time = $.now()

        //$.console.log('touchend ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerup',
          pointerType: 'touch',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        for (i = 0; i < touchCount; i++) {
          gPoint = {
            id: event.changedTouches[i].identifier,
            type: 'touch',
            currentPos: getMouseAbsolute(event.changedTouches[i]),
            currentTime: time,
          }

          updatePointerUp(tracker, eventInfo, gPoint, 0)

          updatePointerCaptured(tracker, gPoint, false)

          // simulate touchleave on our tracked element
          updatePointerLeave(tracker, eventInfo, gPoint)
        }

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onTouchMove(tracker, event) {
        var time,
          i,
          touchCount = event.changedTouches.length,
          gPoint

        time = $.now()

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointermove',
          pointerType: 'touch',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        for (i = 0; i < touchCount; i++) {
          gPoint = {
            id: event.changedTouches[i].identifier,
            type: 'touch',
            currentPos: getMouseAbsolute(event.changedTouches[i]),
            currentTime: time,
          }

          updatePointerMove(tracker, eventInfo, gPoint)
        }

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onTouchCancel(tracker, event) {
        var touchCount = event.changedTouches.length,
          i,
          gPoint

        //$.console.log('touchcancel ' + (tracker.userData ? tracker.userData.toString() : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointercancel',
          pointerType: 'touch',
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        for (i = 0; i < touchCount; i++) {
          gPoint = {
            id: event.changedTouches[i].identifier,
            type: 'touch',
          }

          //TODO need to only do this if our element is target?
          updatePointerCancel(tracker, eventInfo, gPoint)
        }

        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onGestureStart(tracker, event) {
        if (!$.eventIsCanceled(event)) {
          event.preventDefault()
        }
        return false
      }

      /**
       * @private
       * @inner
       */
      function onGestureChange(tracker, event) {
        if (!$.eventIsCanceled(event)) {
          event.preventDefault()
        }
        return false
      }

      /**
       * @private
       * @inner
       */
      function onGotPointerCapture(tracker, event) {
        //$.console.log('gotpointercapture ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'gotpointercapture',
          pointerType: getPointerType(event),
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (event.target === tracker.element) {
          //$.console.log('gotpointercapture ' + (tracker.userData ? tracker.userData.toString() : ''));
          updatePointerCaptured(
            tracker,
            {
              id: event.pointerId,
              type: getPointerType(event),
            },
            true
          )
        }

        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onLostPointerCapture(tracker, event) {
        //$.console.log('lostpointercapture ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'lostpointercapture',
          pointerType: getPointerType(event),
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        if (event.target === tracker.element) {
          //$.console.log('lostpointercapture ' + (tracker.userData ? tracker.userData.toString() : ''));
          updatePointerCaptured(
            tracker,
            {
              id: event.pointerId,
              type: getPointerType(event),
            },
            false
          )
        }

        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerEnter(tracker, event) {
        //$.console.log('pointerenter ' + (tracker.userData ? tracker.userData.toString() : ''));

        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        // pointerenter doesn't bubble and is not cancelable, but we call
        //   preProcessEvent() so it's dispatched to preProcessEventHandler
        //   if necessary
        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerenter',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerEnter(tracker, eventInfo, gPoint)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerLeave(tracker, event) {
        //$.console.log('pointerleave ' + (tracker.userData ? tracker.userData.toString() : ''));

        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        // pointerleave doesn't bubble and is not cancelable, but we call
        //   preProcessEvent() so it's dispatched to preProcessEventHandler
        //   if necessary
        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerleave',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerLeave(tracker, eventInfo, gPoint)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerOver(tracker, event) {
        //$.console.log('pointerover ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerover',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerOver(tracker, eventInfo, gPoint)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerOut(tracker, event) {
        //$.console.log('pointerout ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerout',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerOut(tracker, eventInfo, gPoint)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerDown(tracker, event) {
        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        // Most browsers implicitly capture touch pointer events
        // Note no IE versions have element.hasPointerCapture() so no implicit
        //    pointer capture possible
        // var implicitlyCaptured = ($.MouseTracker.havePointerEvents &&
        //                         event.target.hasPointerCapture &&
        //                         $.Browser.vendor !== $.BROWSERS.IE) ?
        //                         event.target.hasPointerCapture(event.pointerId) : false;
        var implicitlyCaptured =
          $.MouseTracker.havePointerEvents &&
          gPoint.type === 'touch' &&
          $.Browser.vendor !== $.BROWSERS.IE

        //$.console.log('pointerdown ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerdown',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerDown(tracker, eventInfo, gPoint, event.button)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
        if (eventInfo.shouldCapture) {
          if (implicitlyCaptured) {
            updatePointerCaptured(tracker, gPoint, true)
          } else {
            capturePointer(tracker, gPoint)
          }
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerUp(tracker, event) {
        handlePointerUp(tracker, event)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
       * onPointerUp is still attached to the tracked element, so stop propagation to avoid processing twice.
       *
       * @private
       * @inner
       */
      function onPointerUpCaptured(tracker, event) {
        var pointsList = tracker.getActivePointersListByType(
          getPointerType(event)
        )
        if (pointsList.getById(event.pointerId)) {
          handlePointerUp(tracker, event)
        }
        $.stopEvent(event)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function handlePointerUp(tracker, event) {
        var gPoint

        //$.console.log('pointerup ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointerup',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerUp(tracker, eventInfo, gPoint, event.button)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }

        // Per spec, pointerup events are supposed to release capture. Not all browser
        //   versions have adhered to the spec, and there's no harm in releasing
        //   explicitly
        if (eventInfo.shouldReleaseCapture) {
          if (event.target === tracker.element) {
            releasePointer(tracker, gPoint)
          } else {
            updatePointerCaptured(tracker, gPoint, false)
          }
        }
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function onPointerMove(tracker, event) {
        handlePointerMove(tracker, event)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * This handler is attached to the window object (on the capture phase) to emulate mouse capture.
       * onPointerMove is still attached to the tracked element, so stop propagation to avoid processing twice.
       *
       * @private
       * @inner
       */
      function onPointerMoveCaptured(tracker, event) {
        var pointsList = tracker.getActivePointersListByType(
          getPointerType(event)
        )
        if (pointsList.getById(event.pointerId)) {
          handlePointerMove(tracker, event)
        }
        $.stopEvent(event)
      }

      /**
       * Note: Called for both pointer events and legacy mouse events
       *         ($.MouseTracker.havePointerEvents determines which)
       *
       * @private
       * @inner
       */
      function handlePointerMove(tracker, event) {
        // Pointer changed coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)

        var gPoint = {
          id: getPointerId(event),
          type: getPointerType(event),
          isPrimary: getIsPrimary(event),
          currentPos: getMouseAbsolute(event),
          currentTime: $.now(),
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointermove',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        updatePointerMove(tracker, eventInfo, gPoint)

        if (eventInfo.preventDefault && !eventInfo.defaultPrevented) {
          $.cancelEvent(event)
        }
        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      /**
       * @private
       * @inner
       */
      function onPointerCancel(tracker, event) {
        //$.console.log('pointercancel ' + (tracker.userData ? tracker.userData.toString() : '') + ' ' + (event.target === tracker.element ? 'tracker.element' : ''));

        var gPoint = {
          id: event.pointerId,
          type: getPointerType(event),
        }

        var eventInfo = {
          originalEvent: event,
          eventType: 'pointercancel',
          pointerType: gPoint.type,
          isEmulated: false,
        }
        preProcessEvent(tracker, eventInfo)

        //TODO need to only do this if our element is target?
        updatePointerCancel(tracker, eventInfo, gPoint)

        if (eventInfo.stopPropagation) {
          $.stopEvent(event)
        }
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Device-agnostic DOM event handlers
      ///////////////////////////////////////////////////////////////////////////////

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
       *     The GesturePointList to track the pointer in.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point to track.
       * @returns {Number} Number of gesture points in pointsList.
       */
      function startTrackingPointer(pointsList, gPoint) {
        //$.console.log('startTrackingPointer *** ' + pointsList.type + ' ' + gPoint.id.toString());
        gPoint.speed = 0
        gPoint.direction = 0
        gPoint.contactPos = gPoint.currentPos
        gPoint.contactTime = gPoint.currentTime
        gPoint.lastPos = gPoint.currentPos
        gPoint.lastTime = gPoint.currentTime

        return pointsList.add(gPoint)
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.GesturePointList} pointsList
       *     The GesturePointList to stop tracking the pointer on.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point to stop tracking.
       * @returns {Number} Number of gesture points in pointsList.
       */
      function stopTrackingPointer(tracker, pointsList, gPoint) {
        //$.console.log('stopTrackingPointer *** ' + pointsList.type + ' ' + gPoint.id.toString());
        var listLength

        var trackedGPoint = pointsList.getById(gPoint.id)

        if (trackedGPoint) {
          if (trackedGPoint.captured) {
            $.console.warn('stopTrackingPointer() called on captured pointer')
            releasePointer(tracker, trackedGPoint)
          }

          // If child element relinquishes capture to a parent we may get here
          //   from a pointerleave event while a pointerup event will never be received.
          //   In that case, we'll clean up the contact count
          pointsList.removeContact()

          listLength = pointsList.removeById(gPoint.id)
        } else {
          listLength = pointsList.getLength()
        }

        return listLength
      }

      /**
       * @function
       * @private
       * @inner
       */
      function getEventProcessDefaults(tracker, eventInfo) {
        switch (eventInfo.eventType) {
          case 'pointermove':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = false
            eventInfo.preventGesture = !tracker.hasGestureHandlers
            eventInfo.stopPropagation = false
            break
          case 'pointerover':
          case 'pointerout':
          case 'contextmenu':
          case 'keydown':
          case 'keyup':
          case 'keypress':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = false // onContextMenu(), onKeyDown(), onKeyUp(), onKeyPress() may set true
            eventInfo.preventGesture = false
            eventInfo.stopPropagation = false
            break
          case 'pointerdown':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = false // updatePointerDown() may set true (tracker.hasGestureHandlers)
            eventInfo.preventGesture = !tracker.hasGestureHandlers
            eventInfo.stopPropagation = false
            break
          case 'pointerup':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = false
            eventInfo.preventGesture = !tracker.hasGestureHandlers
            eventInfo.stopPropagation = false
            break
          case 'wheel':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = false // handleWheelEvent() may set true
            eventInfo.preventGesture = !tracker.hasScrollHandler
            eventInfo.stopPropagation = false
            break
          case 'gotpointercapture':
          case 'lostpointercapture':
          case 'pointercancel':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = false
            eventInfo.preventDefault = false
            eventInfo.preventGesture = false
            eventInfo.stopPropagation = false
            break
          case 'click':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = !!tracker.clickHandler
            eventInfo.preventGesture = false
            eventInfo.stopPropagation = false
            break
          case 'dblclick':
            eventInfo.isStoppable = true
            eventInfo.isCancelable = true
            eventInfo.preventDefault = !!tracker.dblClickHandler
            eventInfo.preventGesture = false
            eventInfo.stopPropagation = false
            break
          case 'focus':
          case 'blur':
          case 'pointerenter':
          case 'pointerleave':
          default:
            eventInfo.isStoppable = false
            eventInfo.isCancelable = false
            eventInfo.preventDefault = false
            eventInfo.preventGesture = false
            eventInfo.stopPropagation = false
            break
        }
      }

      /**
       * Sets up for and calls preProcessEventHandler. Call with the following parameters -
       * this function will fill in the rest of the preProcessEventHandler event object
       * properties
       *
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       * @param {Object} eventInfo.originalEvent
       * @param {String} eventInfo.eventType
       * @param {String} eventInfo.pointerType
       * @param {Boolean} eventInfo.isEmulated
       */
      function preProcessEvent(tracker, eventInfo) {
        eventInfo.eventSource = tracker
        eventInfo.eventPhase = eventInfo.originalEvent
          ? typeof eventInfo.originalEvent.eventPhase !== 'undefined'
            ? eventInfo.originalEvent.eventPhase
            : 0
          : 0
        eventInfo.defaultPrevented = $.eventIsCanceled(eventInfo.originalEvent)
        eventInfo.shouldCapture = false
        eventInfo.shouldReleaseCapture = false
        eventInfo.userData = tracker.userData

        getEventProcessDefaults(tracker, eventInfo)

        if (tracker.preProcessEventHandler) {
          tracker.preProcessEventHandler(eventInfo)
        }
      }

      /**
       * Sets or resets the captured property on the tracked pointer matching the passed gPoint's id/type
       *
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {Object} gPoint
       *     An object with id and type properties describing the pointer to update.
       * @param {Boolean} isCaptured
       *      Value to set the captured property to.
       */
      function updatePointerCaptured(tracker, gPoint, isCaptured) {
        var pointsList = tracker.getActivePointersListByType(gPoint.type)
        var updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          if (isCaptured && !updateGPoint.captured) {
            updateGPoint.captured = true
            pointsList.captureCount++
          } else if (!isCaptured && updateGPoint.captured) {
            updateGPoint.captured = false
            pointsList.captureCount--
            if (pointsList.captureCount < 0) {
              pointsList.captureCount = 0
              $.console.warn(
                'updatePointerCaptured() - pointsList.captureCount went negative'
              )
            }
          }
        } else {
          $.console.warn('updatePointerCaptured() called on untracked pointer')
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point associated with the event.
       */
      function updatePointerEnter(tracker, eventInfo, gPoint) {
        var pointsList = tracker.getActivePointersListByType(gPoint.type),
          updateGPoint

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          // Already tracking the pointer...update it
          updateGPoint.insideElement = true
          updateGPoint.lastPos = updateGPoint.currentPos
          updateGPoint.lastTime = updateGPoint.currentTime
          updateGPoint.currentPos = gPoint.currentPos
          updateGPoint.currentTime = gPoint.currentTime

          gPoint = updateGPoint
        } else {
          // Initialize for tracking and add to the tracking list
          gPoint.captured = false // Handled by updatePointerCaptured()
          gPoint.insideElementPressed = false
          gPoint.insideElement = true
          startTrackingPointer(pointsList, gPoint)
        }

        // Enter (doesn't bubble and not cancelable)
        if (tracker.enterHandler) {
          tracker.enterHandler({
            eventSource: tracker,
            pointerType: gPoint.type,
            position: getPointRelativeToAbsolute(
              gPoint.currentPos,
              tracker.element
            ),
            buttons: pointsList.buttons,
            pointers: tracker.getActivePointerCount(),
            insideElementPressed: gPoint.insideElementPressed,
            buttonDownAny: pointsList.buttons !== 0,
            isTouchEvent: gPoint.type === 'touch',
            originalEvent: eventInfo.originalEvent,
            userData: tracker.userData,
          })
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point associated with the event.
       */
      function updatePointerLeave(tracker, eventInfo, gPoint) {
        var pointsList = tracker.getActivePointersListByType(gPoint.type),
          updateGPoint,
          dispatchEventObj

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          // Already tracking the pointer. If captured then update it, else stop tracking it
          if (updateGPoint.captured) {
            updateGPoint.insideElement = false
            updateGPoint.lastPos = updateGPoint.currentPos
            updateGPoint.lastTime = updateGPoint.currentTime
            updateGPoint.currentPos = gPoint.currentPos
            updateGPoint.currentTime = gPoint.currentTime
          } else {
            stopTrackingPointer(tracker, pointsList, updateGPoint)
          }

          gPoint = updateGPoint
        } else {
          gPoint.captured = false // Handled by updatePointerCaptured()
          gPoint.insideElementPressed = false
        }

        // Leave (doesn't bubble and not cancelable)
        //   Note: exitHandler is deprecated (v2.5.0), replaced by leaveHandler
        if (tracker.leaveHandler || tracker.exitHandler) {
          dispatchEventObj = {
            eventSource: tracker,
            pointerType: gPoint.type,
            // GitHub PR: https://github.com/openseadragon/openseadragon/pull/1754 (gPoint.currentPos && )
            position:
              gPoint.currentPos &&
              getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
            buttons: pointsList.buttons,
            pointers: tracker.getActivePointerCount(),
            insideElementPressed: gPoint.insideElementPressed,
            buttonDownAny: pointsList.buttons !== 0,
            isTouchEvent: gPoint.type === 'touch',
            originalEvent: eventInfo.originalEvent,
            userData: tracker.userData,
          }

          if (tracker.leaveHandler) {
            tracker.leaveHandler(dispatchEventObj)
          }
          // Deprecated
          if (tracker.exitHandler) {
            tracker.exitHandler(dispatchEventObj)
          }
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point associated with the event.
       */
      function updatePointerOver(tracker, eventInfo, gPoint) {
        var pointsList, updateGPoint

        pointsList = tracker.getActivePointersListByType(gPoint.type)

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          gPoint = updateGPoint
        } else {
          gPoint.captured = false
          gPoint.insideElementPressed = false
          //gPoint.insideElement = true; // Tracked by updatePointerEnter
        }

        if (tracker.overHandler) {
          // Over
          tracker.overHandler({
            eventSource: tracker,
            pointerType: gPoint.type,
            position: getPointRelativeToAbsolute(
              gPoint.currentPos,
              tracker.element
            ),
            buttons: pointsList.buttons,
            pointers: tracker.getActivePointerCount(),
            insideElementPressed: gPoint.insideElementPressed,
            buttonDownAny: pointsList.buttons !== 0,
            isTouchEvent: gPoint.type === 'touch',
            originalEvent: eventInfo.originalEvent,
            userData: tracker.userData,
          })
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point associated with the event.
       */
      function updatePointerOut(tracker, eventInfo, gPoint) {
        var pointsList, updateGPoint

        pointsList = tracker.getActivePointersListByType(gPoint.type)

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          gPoint = updateGPoint
        } else {
          gPoint.captured = false
          gPoint.insideElementPressed = false
          //gPoint.insideElement = true; // Tracked by updatePointerEnter
        }

        if (tracker.outHandler) {
          // Out
          tracker.outHandler({
            eventSource: tracker,
            pointerType: gPoint.type,
            position:
              gPoint.currentPos &&
              getPointRelativeToAbsolute(gPoint.currentPos, tracker.element),
            buttons: pointsList.buttons,
            pointers: tracker.getActivePointerCount(),
            insideElementPressed: gPoint.insideElementPressed,
            buttonDownAny: pointsList.buttons !== 0,
            isTouchEvent: gPoint.type === 'touch',
            originalEvent: eventInfo.originalEvent,
            userData: tracker.userData,
          })
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture point associated with the event.
       * @param {Number} buttonChanged
       *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
       *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
       *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
       */
      function updatePointerDown(tracker, eventInfo, gPoint, buttonChanged) {
        var delegate = THIS[tracker.hash],
          pointsList = tracker.getActivePointersListByType(gPoint.type),
          updateGPoint

        if (typeof eventInfo.originalEvent.buttons !== 'undefined') {
          pointsList.buttons = eventInfo.originalEvent.buttons
        } else {
          if (buttonChanged === 0) {
            // Primary
            pointsList.buttons |= 1
          } else if (buttonChanged === 1) {
            // Aux
            pointsList.buttons |= 4
          } else if (buttonChanged === 2) {
            // Secondary
            pointsList.buttons |= 2
          } else if (buttonChanged === 3) {
            // X1 (Back)
            pointsList.buttons |= 8
          } else if (buttonChanged === 4) {
            // X2 (Forward)
            pointsList.buttons |= 16
          } else if (buttonChanged === 5) {
            // Pen Eraser
            pointsList.buttons |= 32
          }
        }

        // Only capture and track primary button, pen, and touch contacts
        if (buttonChanged !== 0) {
          eventInfo.shouldCapture = false
          eventInfo.shouldReleaseCapture = false

          // Aux Press
          if (
            tracker.nonPrimaryPressHandler &&
            !eventInfo.preventGesture &&
            !eventInfo.defaultPrevented
          ) {
            eventInfo.preventDefault = true

            tracker.nonPrimaryPressHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: getPointRelativeToAbsolute(
                gPoint.currentPos,
                tracker.element
              ),
              button: buttonChanged,
              buttons: pointsList.buttons,
              isTouchEvent: gPoint.type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
          }

          return
        }

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          // Already tracking the pointer...update it
          //updateGPoint.captured = true; // Handled by updatePointerCaptured()
          updateGPoint.insideElementPressed = true
          updateGPoint.insideElement = true
          updateGPoint.originalTarget = eventInfo.originalEvent.target
          updateGPoint.contactPos = gPoint.currentPos
          updateGPoint.contactTime = gPoint.currentTime
          updateGPoint.lastPos = updateGPoint.currentPos
          updateGPoint.lastTime = updateGPoint.currentTime
          updateGPoint.currentPos = gPoint.currentPos
          updateGPoint.currentTime = gPoint.currentTime

          gPoint = updateGPoint
        } else {
          // Initialize for tracking and add to the tracking list (no pointerenter event occurred before this)
          // NOTE: pointerdown event on untracked pointer
          gPoint.captured = false // Handled by updatePointerCaptured()
          gPoint.insideElementPressed = true
          gPoint.insideElement = true
          gPoint.originalTarget = eventInfo.originalEvent.target
          startTrackingPointer(pointsList, gPoint)
        }

        pointsList.addContact()
        //$.console.log('contacts++ ', pointsList.contacts);

        if (!eventInfo.preventGesture && !eventInfo.defaultPrevented) {
          eventInfo.shouldCapture = true
          eventInfo.shouldReleaseCapture = false
          eventInfo.preventDefault = true

          if (
            tracker.dragHandler ||
            tracker.dragEndHandler ||
            tracker.pinchHandler
          ) {
            $.MouseTracker.gesturePointVelocityTracker.addPoint(tracker, gPoint)
          }

          if (pointsList.contacts === 1) {
            // Press
            if (tracker.pressHandler && !eventInfo.preventGesture) {
              tracker.pressHandler({
                eventSource: tracker,
                pointerType: gPoint.type,
                position: getPointRelativeToAbsolute(
                  gPoint.contactPos,
                  tracker.element
                ),
                buttons: pointsList.buttons,
                isTouchEvent: gPoint.type === 'touch',
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData,
              })
            }
          } else if (pointsList.contacts === 2) {
            if (tracker.pinchHandler && gPoint.type === 'touch') {
              // Initialize for pinch
              delegate.pinchGPoints = pointsList.asArray()
              delegate.lastPinchDist = delegate.currentPinchDist =
                delegate.pinchGPoints[0].currentPos.distanceTo(
                  delegate.pinchGPoints[1].currentPos
                )
              delegate.lastPinchCenter = delegate.currentPinchCenter =
                getCenterPoint(
                  delegate.pinchGPoints[0].currentPos,
                  delegate.pinchGPoints[1].currentPos
                )
            }
          }
        } else {
          eventInfo.shouldCapture = false
          eventInfo.shouldReleaseCapture = false
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture points associated with the event.
       * @param {Number} buttonChanged
       *      The button involved in the event: -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
       *      Note on chorded button presses (a button pressed when another button is already pressed): In the W3C Pointer Events model,
       *      only one pointerdown/pointerup event combo is fired. Chorded button state changes instead fire pointermove events.
       */
      function updatePointerUp(tracker, eventInfo, gPoint, buttonChanged) {
        var delegate = THIS[tracker.hash],
          pointsList = tracker.getActivePointersListByType(gPoint.type),
          releasePoint,
          releaseTime,
          updateGPoint,
          wasCaptured = false,
          quick

        if (typeof eventInfo.originalEvent.buttons !== 'undefined') {
          pointsList.buttons = eventInfo.originalEvent.buttons
        } else {
          if (buttonChanged === 0) {
            // Primary
            pointsList.buttons ^= ~1
          } else if (buttonChanged === 1) {
            // Aux
            pointsList.buttons ^= ~4
          } else if (buttonChanged === 2) {
            // Secondary
            pointsList.buttons ^= ~2
          } else if (buttonChanged === 3) {
            // X1 (Back)
            pointsList.buttons ^= ~8
          } else if (buttonChanged === 4) {
            // X2 (Forward)
            pointsList.buttons ^= ~16
          } else if (buttonChanged === 5) {
            // Pen Eraser
            pointsList.buttons ^= ~32
          }
        }

        eventInfo.shouldCapture = false

        // Only capture and track primary button, pen, and touch contacts
        if (buttonChanged !== 0) {
          eventInfo.shouldReleaseCapture = false

          // Aux Release
          if (
            tracker.nonPrimaryReleaseHandler &&
            !eventInfo.preventGesture &&
            !eventInfo.defaultPrevented
          ) {
            eventInfo.preventDefault = true

            tracker.nonPrimaryReleaseHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: getPointRelativeToAbsolute(
                gPoint.currentPos,
                tracker.element
              ),
              button: buttonChanged,
              buttons: pointsList.buttons,
              isTouchEvent: gPoint.type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
          }

          return
        }

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          pointsList.removeContact()
          //$.console.log('contacts-- ', pointsList.contacts);

          // Update the pointer, stop tracking it if not still in this element
          if (updateGPoint.captured) {
            //updateGPoint.captured = false; // Handled by updatePointerCaptured()
            wasCaptured = true
          }
          updateGPoint.lastPos = updateGPoint.currentPos
          updateGPoint.lastTime = updateGPoint.currentTime
          updateGPoint.currentPos = gPoint.currentPos
          updateGPoint.currentTime = gPoint.currentTime
          if (!updateGPoint.insideElement) {
            stopTrackingPointer(tracker, pointsList, updateGPoint)
          }

          releasePoint = updateGPoint.currentPos
          releaseTime = updateGPoint.currentTime
        } else {
          // NOTE: updatePointerUp(): pointerup on untracked gPoint
          // ...we'll start to track pointer again
          gPoint.captured = false // Handled by updatePointerCaptured()
          gPoint.insideElementPressed = false
          gPoint.insideElement = true
          startTrackingPointer(pointsList, gPoint)

          updateGPoint = gPoint
        }

        if (!eventInfo.preventGesture && !eventInfo.defaultPrevented) {
          if (wasCaptured) {
            // Pointer was activated in our element but could have been removed in any element since events are captured to our element

            eventInfo.shouldReleaseCapture = true
            eventInfo.preventDefault = true

            if (
              tracker.dragHandler ||
              tracker.dragEndHandler ||
              tracker.pinchHandler
            ) {
              $.MouseTracker.gesturePointVelocityTracker.removePoint(
                tracker,
                updateGPoint
              )
            }

            if (pointsList.contacts === 0) {
              // Release (pressed in our element)
              if (tracker.releaseHandler && releasePoint) {
                tracker.releaseHandler({
                  eventSource: tracker,
                  pointerType: updateGPoint.type,
                  position: getPointRelativeToAbsolute(
                    releasePoint,
                    tracker.element
                  ),
                  buttons: pointsList.buttons,
                  insideElementPressed: updateGPoint.insideElementPressed,
                  insideElementReleased: updateGPoint.insideElement,
                  isTouchEvent: updateGPoint.type === 'touch',
                  originalEvent: eventInfo.originalEvent,
                  userData: tracker.userData,
                })
              }

              // Drag End
              if (tracker.dragEndHandler && delegate.sentDragEvent) {
                tracker.dragEndHandler({
                  eventSource: tracker,
                  pointerType: updateGPoint.type,
                  position: getPointRelativeToAbsolute(
                    updateGPoint.currentPos,
                    tracker.element
                  ),
                  speed: updateGPoint.speed,
                  direction: updateGPoint.direction,
                  shift: eventInfo.originalEvent.shiftKey,
                  isTouchEvent: updateGPoint.type === 'touch',
                  originalEvent: eventInfo.originalEvent,
                  userData: tracker.userData,
                })
              }

              // We want to clear this flag regardless of whether we fired the dragEndHandler
              delegate.sentDragEvent = false

              // Click / Double-Click
              if (
                (tracker.clickHandler || tracker.dblClickHandler) &&
                updateGPoint.insideElement
              ) {
                quick =
                  releaseTime - updateGPoint.contactTime <=
                    tracker.clickTimeThreshold &&
                  updateGPoint.contactPos.distanceTo(releasePoint) <=
                    tracker.clickDistThreshold

                // Click
                if (tracker.clickHandler) {
                  tracker.clickHandler({
                    eventSource: tracker,
                    pointerType: updateGPoint.type,
                    position: getPointRelativeToAbsolute(
                      updateGPoint.currentPos,
                      tracker.element
                    ),
                    quick: quick,
                    shift: eventInfo.originalEvent.shiftKey,
                    isTouchEvent: updateGPoint.type === 'touch',
                    originalEvent: eventInfo.originalEvent,
                    originalTarget: updateGPoint.originalTarget,
                    userData: tracker.userData,
                  })
                }

                // Double-Click
                if (tracker.dblClickHandler && quick) {
                  pointsList.clicks++
                  if (pointsList.clicks === 1) {
                    delegate.lastClickPos = releasePoint
                    /*jshint loopfunc:true*/
                    delegate.dblClickTimeOut = setTimeout(function () {
                      pointsList.clicks = 0
                    }, tracker.dblClickTimeThreshold)
                    /*jshint loopfunc:false*/
                  } else if (pointsList.clicks === 2) {
                    clearTimeout(delegate.dblClickTimeOut)
                    pointsList.clicks = 0
                    if (
                      delegate.lastClickPos.distanceTo(releasePoint) <=
                      tracker.dblClickDistThreshold
                    ) {
                      tracker.dblClickHandler({
                        eventSource: tracker,
                        pointerType: updateGPoint.type,
                        position: getPointRelativeToAbsolute(
                          updateGPoint.currentPos,
                          tracker.element
                        ),
                        shift: eventInfo.originalEvent.shiftKey,
                        isTouchEvent: updateGPoint.type === 'touch',
                        originalEvent: eventInfo.originalEvent,
                        userData: tracker.userData,
                      })
                    }
                    delegate.lastClickPos = null
                  }
                }
              }
            } else if (pointsList.contacts === 2) {
              if (tracker.pinchHandler && updateGPoint.type === 'touch') {
                // Reset for pinch
                delegate.pinchGPoints = pointsList.asArray()
                delegate.lastPinchDist = delegate.currentPinchDist =
                  delegate.pinchGPoints[0].currentPos.distanceTo(
                    delegate.pinchGPoints[1].currentPos
                  )
                delegate.lastPinchCenter = delegate.currentPinchCenter =
                  getCenterPoint(
                    delegate.pinchGPoints[0].currentPos,
                    delegate.pinchGPoints[1].currentPos
                  )
              }
            }
          } else {
            // Pointer was activated in another element but removed in our element

            eventInfo.shouldReleaseCapture = false

            // Release (pressed in another element)
            if (tracker.releaseHandler && releasePoint) {
              tracker.releaseHandler({
                eventSource: tracker,
                pointerType: updateGPoint.type,
                position: getPointRelativeToAbsolute(
                  releasePoint,
                  tracker.element
                ),
                buttons: pointsList.buttons,
                insideElementPressed: updateGPoint.insideElementPressed,
                insideElementReleased: updateGPoint.insideElement,
                isTouchEvent: updateGPoint.type === 'touch',
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData,
              })
              eventInfo.preventDefault = true
            }
          }
        }
      }

      /**
       * Call when pointer(s) change coordinates, button state, pressure, tilt, or contact geometry (e.g. width and height)
       *
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture points associated with the event.
       */
      function updatePointerMove(tracker, eventInfo, gPoint) {
        var delegate = THIS[tracker.hash],
          pointsList = tracker.getActivePointersListByType(gPoint.type),
          updateGPoint,
          gPointArray,
          delta

        if (typeof eventInfo.originalEvent.buttons !== 'undefined') {
          pointsList.buttons = eventInfo.originalEvent.buttons
        }

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          // Already tracking the pointer...update it
          updateGPoint.lastPos = updateGPoint.currentPos
          updateGPoint.lastTime = updateGPoint.currentTime
          updateGPoint.currentPos = gPoint.currentPos
          updateGPoint.currentTime = gPoint.currentTime
        } else {
          // Should never get here, but due to user agent bugs (e.g. legacy touch) it sometimes happens
          return
        }

        eventInfo.shouldCapture = false
        eventInfo.shouldReleaseCapture = false

        // Stop (mouse only)
        if (tracker.stopHandler && gPoint.type === 'mouse') {
          clearTimeout(tracker.stopTimeOut)
          tracker.stopTimeOut = setTimeout(function () {
            handlePointerStop(tracker, eventInfo.originalEvent, gPoint.type)
          }, tracker.stopDelay)
        }

        if (pointsList.contacts === 0) {
          // Move (no contacts: hovering mouse or other hover-capable device)
          if (tracker.moveHandler) {
            tracker.moveHandler({
              eventSource: tracker,
              pointerType: gPoint.type,
              position: getPointRelativeToAbsolute(
                gPoint.currentPos,
                tracker.element
              ),
              buttons: pointsList.buttons,
              isTouchEvent: gPoint.type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
          }
        } else if (pointsList.contacts === 1) {
          // Move (1 contact)
          if (tracker.moveHandler) {
            updateGPoint = pointsList.asArray()[0]
            tracker.moveHandler({
              eventSource: tracker,
              pointerType: updateGPoint.type,
              position: getPointRelativeToAbsolute(
                updateGPoint.currentPos,
                tracker.element
              ),
              buttons: pointsList.buttons,
              isTouchEvent: updateGPoint.type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
          }

          // Drag
          if (
            tracker.dragHandler &&
            !eventInfo.preventGesture &&
            !eventInfo.defaultPrevented
          ) {
            updateGPoint = pointsList.asArray()[0]
            delta = updateGPoint.currentPos.minus(updateGPoint.lastPos)
            tracker.dragHandler({
              eventSource: tracker,
              pointerType: updateGPoint.type,
              position: getPointRelativeToAbsolute(
                updateGPoint.currentPos,
                tracker.element
              ),
              buttons: pointsList.buttons,
              delta: delta,
              speed: updateGPoint.speed,
              direction: updateGPoint.direction,
              shift: eventInfo.originalEvent.shiftKey,
              isTouchEvent: updateGPoint.type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
            eventInfo.preventDefault = true
            delegate.sentDragEvent = true
          }
        } else if (pointsList.contacts === 2) {
          // Move (2 contacts, use center)
          if (tracker.moveHandler) {
            gPointArray = pointsList.asArray()
            tracker.moveHandler({
              eventSource: tracker,
              pointerType: gPointArray[0].type,
              position: getPointRelativeToAbsolute(
                getCenterPoint(
                  gPointArray[0].currentPos,
                  gPointArray[1].currentPos
                ),
                tracker.element
              ),
              buttons: pointsList.buttons,
              isTouchEvent: gPointArray[0].type === 'touch',
              originalEvent: eventInfo.originalEvent,
              userData: tracker.userData,
            })
          }

          // Pinch
          if (
            tracker.pinchHandler &&
            gPoint.type === 'touch' &&
            !eventInfo.preventGesture &&
            !eventInfo.defaultPrevented
          ) {
            delta = delegate.pinchGPoints[0].currentPos.distanceTo(
              delegate.pinchGPoints[1].currentPos
            )
            if (delta !== delegate.currentPinchDist) {
              delegate.lastPinchDist = delegate.currentPinchDist
              delegate.currentPinchDist = delta
              delegate.lastPinchCenter = delegate.currentPinchCenter
              delegate.currentPinchCenter = getCenterPoint(
                delegate.pinchGPoints[0].currentPos,
                delegate.pinchGPoints[1].currentPos
              )
              tracker.pinchHandler({
                eventSource: tracker,
                pointerType: 'touch',
                gesturePoints: delegate.pinchGPoints,
                lastCenter: getPointRelativeToAbsolute(
                  delegate.lastPinchCenter,
                  tracker.element
                ),
                center: getPointRelativeToAbsolute(
                  delegate.currentPinchCenter,
                  tracker.element
                ),
                lastDistance: delegate.lastPinchDist,
                distance: delegate.currentPinchDist,
                shift: eventInfo.originalEvent.shiftKey,
                originalEvent: eventInfo.originalEvent,
                userData: tracker.userData,
              })
              eventInfo.preventDefault = true
            }
          }
        }
      }

      /**
       * @function
       * @private
       * @inner
       * @param {OpenSeadragon.MouseTracker} tracker
       *     A reference to the MouseTracker instance.
       * @param {OpenSeadragon.MouseTracker.EventProcessInfo} eventInfo
       *     Processing info for originating DOM event.
       * @param {OpenSeadragon.MouseTracker.GesturePoint} gPoint
       *      Gesture points associated with the event.
       */
      function updatePointerCancel(tracker, eventInfo, gPoint) {
        var pointsList = tracker.getActivePointersListByType(gPoint.type),
          updateGPoint

        updateGPoint = pointsList.getById(gPoint.id)

        if (updateGPoint) {
          stopTrackingPointer(tracker, pointsList, updateGPoint)
        }
      }

      /**
       * @private
       * @inner
       */
      function handlePointerStop(tracker, originalMoveEvent, pointerType) {
        if (tracker.stopHandler) {
          tracker.stopHandler({
            eventSource: tracker,
            pointerType: pointerType,
            position: getMouseRelative(originalMoveEvent, tracker.element),
            buttons: tracker.getActivePointersListByType(pointerType).buttons,
            isTouchEvent: pointerType === 'touch',
            originalEvent: originalMoveEvent,
            userData: tracker.userData,
          })
        }
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Control
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * An enumeration of supported locations where controls can be anchored.
       * The anchoring is always relative to the container.
       * @member ControlAnchor
       * @memberof OpenSeadragon
       * @static
       * @type {Object}
       * @property {Number} NONE
       * @property {Number} TOP_LEFT
       * @property {Number} TOP_RIGHT
       * @property {Number} BOTTOM_LEFT
       * @property {Number} BOTTOM_RIGHT
       * @property {Number} ABSOLUTE
       */
      $.ControlAnchor = {
        NONE: 0,
        TOP_LEFT: 1,
        TOP_RIGHT: 2,
        BOTTOM_RIGHT: 3,
        BOTTOM_LEFT: 4,
        ABSOLUTE: 5,
      }

      /**
       * @class Control
       * @classdesc A Control represents any interface element which is meant to allow the user
       * to interact with the zoomable interface. Any control can be anchored to any
       * element.
       *
       * @memberof OpenSeadragon
       * @param {Element} element - the control element to be anchored in the container.
       * @param {Object } options - All required and optional settings for configuring a control element.
       * @param {OpenSeadragon.ControlAnchor} [options.anchor=OpenSeadragon.ControlAnchor.NONE] - the position of the control
       *  relative to the container.
       * @param {Boolean} [options.attachToViewer=true] - Whether the control should be added directly to the viewer, or
       *  directly to the container
       * @param {Boolean} [options.autoFade=true] - Whether the control should have the autofade behavior
       * @param {Element} container - the element to control will be anchored too.
       */
      $.Control = function (element, options, container) {
        var parent = element.parentNode
        if (typeof options === 'number') {
          $.console.error(
            'Passing an anchor directly into the OpenSeadragon.Control constructor is deprecated; ' +
              'please use an options object instead.  ' +
              'Support for this deprecated variant is scheduled for removal in December 2013'
          )
          options = { anchor: options }
        }
        options.attachToViewer =
          typeof options.attachToViewer === 'undefined'
            ? true
            : options.attachToViewer
        /**
         * True if the control should have autofade behavior.
         * @member {Boolean} autoFade
         * @memberof OpenSeadragon.Control#
         */
        this.autoFade =
          typeof options.autoFade === 'undefined' ? true : options.autoFade
        /**
         * The element providing the user interface with some type of control (e.g. a zoom-in button).
         * @member {Element} element
         * @memberof OpenSeadragon.Control#
         */
        this.element = element
        /**
         * The position of the Control relative to its container.
         * @member {OpenSeadragon.ControlAnchor} anchor
         * @memberof OpenSeadragon.Control#
         */
        this.anchor = options.anchor
        /**
         * The Control's containing element.
         * @member {Element} container
         * @memberof OpenSeadragon.Control#
         */
        this.container = container
        /**
         * A neutral element surrounding the control element.
         * @member {Element} wrapper
         * @memberof OpenSeadragon.Control#
         */
        if (this.anchor === $.ControlAnchor.ABSOLUTE) {
          this.wrapper = $.makeNeutralElement('div')
          this.wrapper.style.position = 'absolute'
          this.wrapper.style.top =
            typeof options.top === 'number' ? options.top + 'px' : options.top
          this.wrapper.style.left =
            typeof options.left === 'number'
              ? options.left + 'px'
              : options.left
          this.wrapper.style.height =
            typeof options.height === 'number'
              ? options.height + 'px'
              : options.height
          this.wrapper.style.width =
            typeof options.width === 'number'
              ? options.width + 'px'
              : options.width
          this.wrapper.style.margin = '0px'
          this.wrapper.style.padding = '0px'

          this.element.style.position = 'relative'
          this.element.style.top = '0px'
          this.element.style.left = '0px'
          this.element.style.height = '100%'
          this.element.style.width = '100%'
        } else {
          this.wrapper = $.makeNeutralElement('div')
          this.wrapper.style.display = 'inline-block'
          if (this.anchor === $.ControlAnchor.NONE) {
            // IE6 fix
            this.wrapper.style.width = this.wrapper.style.height = '100%'
          }
        }
        this.wrapper.appendChild(this.element)

        if (options.attachToViewer) {
          if (
            this.anchor === $.ControlAnchor.TOP_RIGHT ||
            this.anchor === $.ControlAnchor.BOTTOM_RIGHT
          ) {
            this.container.insertBefore(this.wrapper, this.container.firstChild)
          } else {
            this.container.appendChild(this.wrapper)
          }
        } else {
          parent.appendChild(this.wrapper)
        }
      }

      /** @lends OpenSeadragon.Control.prototype */
      $.Control.prototype = {
        /**
         * Removes the control from the container.
         * @function
         */
        destroy: function () {
          this.wrapper.removeChild(this.element)
          if (this.anchor !== $.ControlAnchor.NONE) {
            this.container.removeChild(this.wrapper)
          }
        },

        /**
         * Determines if the control is currently visible.
         * @function
         * @returns {Boolean} true if currently visible, false otherwise.
         */
        isVisible: function () {
          return this.wrapper.style.display !== 'none'
        },

        /**
         * Toggles the visibility of the control.
         * @function
         * @param {Boolean} visible - true to make visible, false to hide.
         */
        setVisible: function (visible) {
          this.wrapper.style.display = visible
            ? this.anchor === $.ControlAnchor.ABSOLUTE
              ? 'block'
              : 'inline-block'
            : 'none'
        },

        /**
         * Sets the opacity level for the control.
         * @function
         * @param {Number} opactiy - a value between 1 and 0 inclusively.
         */
        setOpacity: function (opacity) {
          if (this.element[$.SIGNAL] && $.Browser.vendor === $.BROWSERS.IE) {
            $.setElementOpacity(this.element, opacity, true)
          } else {
            $.setElementOpacity(this.wrapper, opacity, true)
          }
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - ControlDock
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class ControlDock
       * @classdesc Provides a container element (a &lt;form&gt; element) with support for the layout of control elements.
       *
       * @memberof OpenSeadragon
       */
      $.ControlDock = function (options) {
        var layouts = ['topleft', 'topright', 'bottomright', 'bottomleft'],
          layout,
          i

        $.extend(
          true,
          this,
          {
            id:
              'controldock-' +
              $.now() +
              '-' +
              Math.floor(Math.random() * 1000000),
            container: $.makeNeutralElement('div'),
            controls: [],
          },
          options
        )

        // Disable the form's submit; otherwise button clicks and return keys
        // can trigger it.
        this.container.onsubmit = function () {
          return false
        }

        if (this.element) {
          this.element = $.getElement(this.element)
          this.element.appendChild(this.container)
          this.element.style.position = 'relative'
          this.container.style.width = '100%'
          this.container.style.height = '100%'
        }

        for (i = 0; i < layouts.length; i++) {
          layout = layouts[i]
          this.controls[layout] = $.makeNeutralElement('div')
          this.controls[layout].style.position = 'absolute'
          if (layout.match('left')) {
            this.controls[layout].style.left = '0px'
          }
          if (layout.match('right')) {
            this.controls[layout].style.right = '0px'
          }
          if (layout.match('top')) {
            this.controls[layout].style.top = '0px'
          }
          if (layout.match('bottom')) {
            this.controls[layout].style.bottom = '0px'
          }
        }

        this.container.appendChild(this.controls.topleft)
        this.container.appendChild(this.controls.topright)
        this.container.appendChild(this.controls.bottomright)
        this.container.appendChild(this.controls.bottomleft)
      }

      /** @lends OpenSeadragon.ControlDock.prototype */
      $.ControlDock.prototype = {
        /**
         * @function
         */
        addControl: function (element, controlOptions) {
          element = $.getElement(element)
          var div = null

          if (getControlIndex(this, element) >= 0) {
            return // they're trying to add a duplicate control
          }

          switch (controlOptions.anchor) {
            case $.ControlAnchor.TOP_RIGHT:
              div = this.controls.topright
              element.style.position = 'relative'
              element.style.paddingRight = '0px'
              element.style.paddingTop = '0px'
              break
            case $.ControlAnchor.BOTTOM_RIGHT:
              div = this.controls.bottomright
              element.style.position = 'relative'
              element.style.paddingRight = '0px'
              element.style.paddingBottom = '0px'
              break
            case $.ControlAnchor.BOTTOM_LEFT:
              div = this.controls.bottomleft
              element.style.position = 'relative'
              element.style.paddingLeft = '0px'
              element.style.paddingBottom = '0px'
              break
            case $.ControlAnchor.TOP_LEFT:
              div = this.controls.topleft
              element.style.position = 'relative'
              element.style.paddingLeft = '0px'
              element.style.paddingTop = '0px'
              break
            case $.ControlAnchor.ABSOLUTE:
              div = this.container
              element.style.margin = '0px'
              element.style.padding = '0px'
              break
            default:
            case $.ControlAnchor.NONE:
              div = this.container
              element.style.margin = '0px'
              element.style.padding = '0px'
              break
          }

          this.controls.push(new $.Control(element, controlOptions, div))
          element.style.display = 'inline-block'
        },

        /**
         * @function
         * @returns {OpenSeadragon.ControlDock} Chainable.
         */
        removeControl: function (element) {
          element = $.getElement(element)
          var i = getControlIndex(this, element)

          if (i >= 0) {
            this.controls[i].destroy()
            this.controls.splice(i, 1)
          }

          return this
        },

        /**
         * @function
         * @returns {OpenSeadragon.ControlDock} Chainable.
         */
        clearControls: function () {
          while (this.controls.length > 0) {
            this.controls.pop().destroy()
          }

          return this
        },

        /**
         * @function
         * @returns {Boolean}
         */
        areControlsEnabled: function () {
          var i

          for (i = this.controls.length - 1; i >= 0; i--) {
            if (this.controls[i].isVisible()) {
              return true
            }
          }

          return false
        },

        /**
         * @function
         * @returns {OpenSeadragon.ControlDock} Chainable.
         */
        setControlsEnabled: function (enabled) {
          var i

          for (i = this.controls.length - 1; i >= 0; i--) {
            this.controls[i].setVisible(enabled)
          }

          return this
        },
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Utility methods
      ///////////////////////////////////////////////////////////////////////////////
      function getControlIndex(dock, element) {
        var controls = dock.controls,
          i

        for (i = controls.length - 1; i >= 0; i--) {
          if (controls[i].element === element) {
            return i
          }
        }

        return -1
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Placement
     *
     * Copyright (C) 2010-2016 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * An enumeration of positions to anchor an element.
       * @member Placement
       * @memberOf OpenSeadragon
       * @static
       * @readonly
       * @property {OpenSeadragon.Placement} CENTER
       * @property {OpenSeadragon.Placement} TOP_LEFT
       * @property {OpenSeadragon.Placement} TOP
       * @property {OpenSeadragon.Placement} TOP_RIGHT
       * @property {OpenSeadragon.Placement} RIGHT
       * @property {OpenSeadragon.Placement} BOTTOM_RIGHT
       * @property {OpenSeadragon.Placement} BOTTOM
       * @property {OpenSeadragon.Placement} BOTTOM_LEFT
       * @property {OpenSeadragon.Placement} LEFT
       */
      $.Placement = $.freezeObject({
        CENTER: 0,
        TOP_LEFT: 1,
        TOP: 2,
        TOP_RIGHT: 3,
        RIGHT: 4,
        BOTTOM_RIGHT: 5,
        BOTTOM: 6,
        BOTTOM_LEFT: 7,
        LEFT: 8,
        properties: {
          0: {
            isLeft: false,
            isHorizontallyCentered: true,
            isRight: false,
            isTop: false,
            isVerticallyCentered: true,
            isBottom: false,
          },
          1: {
            isLeft: true,
            isHorizontallyCentered: false,
            isRight: false,
            isTop: true,
            isVerticallyCentered: false,
            isBottom: false,
          },
          2: {
            isLeft: false,
            isHorizontallyCentered: true,
            isRight: false,
            isTop: true,
            isVerticallyCentered: false,
            isBottom: false,
          },
          3: {
            isLeft: false,
            isHorizontallyCentered: false,
            isRight: true,
            isTop: true,
            isVerticallyCentered: false,
            isBottom: false,
          },
          4: {
            isLeft: false,
            isHorizontallyCentered: false,
            isRight: true,
            isTop: false,
            isVerticallyCentered: true,
            isBottom: false,
          },
          5: {
            isLeft: false,
            isHorizontallyCentered: false,
            isRight: true,
            isTop: false,
            isVerticallyCentered: false,
            isBottom: true,
          },
          6: {
            isLeft: false,
            isHorizontallyCentered: true,
            isRight: false,
            isTop: false,
            isVerticallyCentered: false,
            isBottom: true,
          },
          7: {
            isLeft: true,
            isHorizontallyCentered: false,
            isRight: false,
            isTop: false,
            isVerticallyCentered: false,
            isBottom: true,
          },
          8: {
            isLeft: true,
            isHorizontallyCentered: false,
            isRight: false,
            isTop: false,
            isVerticallyCentered: true,
            isBottom: false,
          },
        },
      })
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Viewer
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      // dictionary from hash to private properties
      var THIS = {}
      var nextHash = 1

      /**
       *
       * The main point of entry into creating a zoomable image on the page.<br>
       * <br>
       * We have provided an idiomatic javascript constructor which takes
       * a single object, but still support the legacy positional arguments.<br>
       * <br>
       * The options below are given in order that they appeared in the constructor
       * as arguments and we translate a positional call into an idiomatic call.<br>
       * <br>
       * To create a viewer, you can use either of this methods:<br>
       * <ul>
       * <li><code>var viewer = new OpenSeadragon.Viewer(options);</code></li>
       * <li><code>var viewer = OpenSeadragon(options);</code></li>
       * </ul>
       * @class Viewer
       * @classdesc The main OpenSeadragon viewer class.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.EventSource
       * @extends OpenSeadragon.ControlDock
       * @param {OpenSeadragon.Options} options - Viewer options.
       *
       **/
      $.Viewer = function (options) {
        var args = arguments,
          _this = this,
          i

        //backward compatibility for positional args while preferring more
        //idiomatic javascript options object as the only argument
        if (!$.isPlainObject(options)) {
          options = {
            id: args[0],
            xmlPath: args.length > 1 ? args[1] : undefined,
            prefixUrl: args.length > 2 ? args[2] : undefined,
            controls: args.length > 3 ? args[3] : undefined,
            overlays: args.length > 4 ? args[4] : undefined,
          }
        }

        //options.config and the general config argument are deprecated
        //in favor of the more direct specification of optional settings
        //being pass directly on the options object
        if (options.config) {
          $.extend(true, options, options.config)
          delete options.config
        }

        //Public properties
        //Allow the options object to override global defaults
        $.extend(
          true,
          this,
          {
            //internal state and dom identifiers
            id: options.id,
            hash: options.hash || nextHash++,
            /**
             * Index for page to be shown first next time open() is called (only used in sequenceMode).
             * @member {Number} initialPage
             * @memberof OpenSeadragon.Viewer#
             */
            initialPage: 0,

            //dom nodes
            /**
             * The parent element of this Viewer instance, passed in when the Viewer was created.
             * @member {Element} element
             * @memberof OpenSeadragon.Viewer#
             */
            element: null,
            /**
             * A &lt;div&gt; element (provided by {@link OpenSeadragon.ControlDock}), the base element of this Viewer instance.<br><br>
             * Child element of {@link OpenSeadragon.Viewer#element}.
             * @member {Element} container
             * @memberof OpenSeadragon.Viewer#
             */
            container: null,
            /**
             * A &lt;div&gt; element, the element where user-input events are handled for panning and zooming.<br><br>
             * Child element of {@link OpenSeadragon.Viewer#container},
             * positioned on top of {@link OpenSeadragon.Viewer#keyboardCommandArea}.<br><br>
             * The parent of {@link OpenSeadragon.Drawer#canvas} instances.
             * @member {Element} canvas
             * @memberof OpenSeadragon.Viewer#
             */
            canvas: null,

            // Overlays list. An overlay allows to add html on top of the viewer.
            overlays: [],
            // Container inside the canvas where overlays are drawn.
            overlaysContainer: null,

            //private state properties
            previousBody: [],

            //This was originally initialized in the constructor and so could never
            //have anything in it.  now it can because we allow it to be specified
            //in the options and is only empty by default if not specified. Also
            //this array was returned from get_controls which I find confusing
            //since this object has a controls property which is treated in other
            //functions like clearControls.  I'm removing the accessors.
            customControls: [],

            //These are originally not part options but declared as members
            //in initialize.  It's still considered idiomatic to put them here
            //source is here for backwards compatibility. It is not an official
            //part of the API and should not be relied upon.
            source: null,
            /**
             * Handles rendering of tiles in the viewer. Created for each TileSource opened.
             * @member {OpenSeadragon.Drawer} drawer
             * @memberof OpenSeadragon.Viewer#
             */
            drawer: null,
            /**
             * Keeps track of all of the tiled images in the scene.
             * @member {OpenSeadragon.World} world
             * @memberof OpenSeadragon.Viewer#
             */
            world: null,
            /**
             * Handles coordinate-related functionality - zoom, pan, rotation, etc. Created for each TileSource opened.
             * @member {OpenSeadragon.Viewport} viewport
             * @memberof OpenSeadragon.Viewer#
             */
            viewport: null,
            /**
             * @member {OpenSeadragon.Navigator} navigator
             * @memberof OpenSeadragon.Viewer#
             */
            navigator: null,

            //A collection viewport is a separate viewport used to provide
            //simultaneous rendering of sets of tiles
            collectionViewport: null,
            collectionDrawer: null,

            //UI image resources
            //TODO: rename navImages to uiImages
            navImages: null,

            //interface button controls
            buttonGroup: null,

            //TODO: this is defunct so safely remove it
            profiler: null,
          },
          $.DEFAULT_SETTINGS,
          options
        )

        if (typeof this.hash === 'undefined') {
          throw new Error(
            'A hash must be defined, either by specifying options.id or options.hash.'
          )
        }
        if (typeof THIS[this.hash] !== 'undefined') {
          // We don't want to throw an error here, as the user might have discarded
          // the previous viewer with the same hash and now want to recreate it.
          $.console.warn('Hash ' + this.hash + ' has already been used.')
        }

        //Private state properties
        THIS[this.hash] = {
          fsBoundsDelta: new $.Point(1, 1),
          prevContainerSize: null,
          animating: false,
          forceRedraw: false,
          needsResize: false,
          forceResize: false,
          mouseInside: false,
          group: null,
          // whether we should be continuously zooming
          zooming: false,
          // how much we should be continuously zooming by
          zoomFactor: null,
          lastZoomTime: null,
          fullPage: false,
          onfullscreenchange: null,
          lastClickTime: null,
          draggingToZoom: false,
        }

        this._sequenceIndex = 0
        this._firstOpen = true
        this._updateRequestId = null
        this._loadQueue = []
        this.currentOverlays = []
        this._updatePixelDensityRatioBind = null

        this._lastScrollTime = $.now() // variable used to help normalize the scroll event speed of different devices

        //Inherit some behaviors and properties
        $.EventSource.call(this)

        this.addHandler('open-failed', function (event) {
          var msg = $.getString(
            'Errors.OpenFailed',
            event.eventSource,
            event.message
          )
          _this._showMessage(msg)
        })

        $.ControlDock.call(this, options)

        //Deal with tile sources
        if (this.xmlPath) {
          //Deprecated option.  Now it is preferred to use the tileSources option
          this.tileSources = [this.xmlPath]
        }

        this.element = this.element || document.getElementById(this.id)
        this.canvas = $.makeNeutralElement('div')

        this.canvas.className = 'openseadragon-canvas'
        ;(function (style) {
          style.width = '100%'
          style.height = '100%'
          style.overflow = 'hidden'
          style.position = 'absolute'
          style.top = '0px'
          style.left = '0px'
        })(this.canvas.style)
        $.setElementTouchActionNone(this.canvas)
        if (options.tabIndex !== '') {
          this.canvas.tabIndex =
            options.tabIndex === undefined ? 0 : options.tabIndex
        }

        //the container is created through applying the ControlDock constructor above
        this.container.className = 'openseadragon-container'
        ;(function (style) {
          style.width = '100%'
          style.height = '100%'
          style.position = 'relative'
          style.overflow = 'hidden'
          style.left = '0px'
          style.top = '0px'
          style.textAlign = 'left' // needed to protect against
        })(this.container.style)
        $.setElementTouchActionNone(this.container)

        this.container.insertBefore(this.canvas, this.container.firstChild)
        this.element.appendChild(this.container)

        //Used for toggling between fullscreen and default container size
        //TODO: these can be closure private and shared across Viewer
        //      instances.
        this.bodyWidth = document.body.style.width
        this.bodyHeight = document.body.style.height
        this.bodyOverflow = document.body.style.overflow
        this.docOverflow = document.documentElement.style.overflow

        this.innerTracker = new $.MouseTracker({
          userData: 'Viewer.innerTracker',
          element: this.canvas,
          startDisabled: !this.mouseNavEnabled,
          clickTimeThreshold: this.clickTimeThreshold,
          clickDistThreshold: this.clickDistThreshold,
          dblClickTimeThreshold: this.dblClickTimeThreshold,
          dblClickDistThreshold: this.dblClickDistThreshold,
          contextMenuHandler: $.delegate(this, onCanvasContextMenu),
          keyDownHandler: $.delegate(this, onCanvasKeyDown),
          keyHandler: $.delegate(this, onCanvasKeyPress),
          clickHandler: $.delegate(this, onCanvasClick),
          dblClickHandler: $.delegate(this, onCanvasDblClick),
          dragHandler: $.delegate(this, onCanvasDrag),
          dragEndHandler: $.delegate(this, onCanvasDragEnd),
          enterHandler: $.delegate(this, onCanvasEnter),
          leaveHandler: $.delegate(this, onCanvasLeave),
          pressHandler: $.delegate(this, onCanvasPress),
          releaseHandler: $.delegate(this, onCanvasRelease),
          nonPrimaryPressHandler: $.delegate(this, onCanvasNonPrimaryPress),
          nonPrimaryReleaseHandler: $.delegate(this, onCanvasNonPrimaryRelease),
          scrollHandler: $.delegate(this, onCanvasScroll),
          pinchHandler: $.delegate(this, onCanvasPinch),
        })

        this.outerTracker = new $.MouseTracker({
          userData: 'Viewer.outerTracker',
          element: this.container,
          startDisabled: !this.mouseNavEnabled,
          clickTimeThreshold: this.clickTimeThreshold,
          clickDistThreshold: this.clickDistThreshold,
          dblClickTimeThreshold: this.dblClickTimeThreshold,
          dblClickDistThreshold: this.dblClickDistThreshold,
          enterHandler: $.delegate(this, onContainerEnter),
          leaveHandler: $.delegate(this, onContainerLeave),
        })

        if (this.toolbar) {
          this.toolbar = new $.ControlDock({ element: this.toolbar })
        }

        this.bindStandardControls()

        THIS[this.hash].prevContainerSize = _getSafeElemSize(this.container)

        if (window.ResizeObserver) {
          this._autoResizePolling = false
          this._resizeObserver = new ResizeObserver(function () {
            THIS[_this.hash].needsResize = true
          })

          this._resizeObserver.observe(this.container, {})
        } else {
          this._autoResizePolling = true
        }

        // Create the world
        this.world = new $.World({
          viewer: this,
        })

        this.world.addHandler('add-item', function (event) {
          // For backwards compatibility, we maintain the source property
          _this.source = _this.world.getItemAt(0).source

          THIS[_this.hash].forceRedraw = true

          if (!_this._updateRequestId) {
            _this._updateRequestId = scheduleUpdate(_this, updateMulti)
          }
        })

        this.world.addHandler('remove-item', function (event) {
          // For backwards compatibility, we maintain the source property
          if (_this.world.getItemCount()) {
            _this.source = _this.world.getItemAt(0).source
          } else {
            _this.source = null
          }

          THIS[_this.hash].forceRedraw = true
        })

        this.world.addHandler('metrics-change', function (event) {
          if (_this.viewport) {
            _this.viewport._setContentBounds(
              _this.world.getHomeBounds(),
              _this.world.getContentFactor()
            )
          }
        })

        this.world.addHandler('item-index-change', function (event) {
          // For backwards compatibility, we maintain the source property
          _this.source = _this.world.getItemAt(0).source
        })

        // Create the viewport
        this.viewport = new $.Viewport({
          containerSize: THIS[this.hash].prevContainerSize,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
          minZoomImageRatio: this.minZoomImageRatio,
          maxZoomPixelRatio: this.maxZoomPixelRatio,
          visibilityRatio: this.visibilityRatio,
          wrapHorizontal: this.wrapHorizontal,
          wrapVertical: this.wrapVertical,
          defaultZoomLevel: this.defaultZoomLevel,
          minZoomLevel: this.minZoomLevel,
          maxZoomLevel: this.maxZoomLevel,
          viewer: this,
          degrees: this.degrees,
          flipped: this.flipped,
          navigatorRotate: this.navigatorRotate,
          homeFillsViewer: this.homeFillsViewer,
          margins: this.viewportMargins,
          silenceMultiImageWarnings: this.silenceMultiImageWarnings,
        })

        this.viewport._setContentBounds(
          this.world.getHomeBounds(),
          this.world.getContentFactor()
        )

        // Create the image loader
        this.imageLoader = new $.ImageLoader({
          jobLimit: this.imageLoaderLimit,
          timeout: options.timeout,
        })

        // Create the tile cache
        this.tileCache = new $.TileCache({
          maxImageCacheCount: this.maxImageCacheCount,
        })

        // Create the drawer
        this.drawer = new $.Drawer({
          viewer: this,
          viewport: this.viewport,
          element: this.canvas,
          debugGridColor: this.debugGridColor,
        })

        // Overlay container
        this.overlaysContainer = $.makeNeutralElement('div')
        this.canvas.appendChild(this.overlaysContainer)

        // Now that we have a drawer, see if it supports rotate. If not we need to remove the rotate buttons
        if (!this.drawer.canRotate()) {
          // Disable/remove the rotate left/right buttons since they aren't supported
          if (this.rotateLeft) {
            i = this.buttonGroup.buttons.indexOf(this.rotateLeft)
            this.buttonGroup.buttons.splice(i, 1)
            this.buttonGroup.element.removeChild(this.rotateLeft.element)
          }
          if (this.rotateRight) {
            i = this.buttonGroup.buttons.indexOf(this.rotateRight)
            this.buttonGroup.buttons.splice(i, 1)
            this.buttonGroup.element.removeChild(this.rotateRight.element)
          }
        }

        this._addUpdatePixelDensityRatioEvent()

        //Instantiate a navigator if configured
        if (this.showNavigator) {
          this.navigator = new $.Navigator({
            element: this.navigatorElement,
            id: this.navigatorId,
            position: this.navigatorPosition,
            sizeRatio: this.navigatorSizeRatio,
            maintainSizeRatio: this.navigatorMaintainSizeRatio,
            top: this.navigatorTop,
            left: this.navigatorLeft,
            width: this.navigatorWidth,
            height: this.navigatorHeight,
            autoResize: this.navigatorAutoResize,
            autoFade: this.navigatorAutoFade,
            prefixUrl: this.prefixUrl,
            viewer: this,
            navigatorRotate: this.navigatorRotate,
            background: this.navigatorBackground,
            opacity: this.navigatorOpacity,
            borderColor: this.navigatorBorderColor,
            displayRegionColor: this.navigatorDisplayRegionColor,
            crossOriginPolicy: this.crossOriginPolicy,
            animationTime: this.animationTime,
          })
        }

        // Sequence mode
        if (this.sequenceMode) {
          this.bindSequenceControls()
        }

        // Open initial tilesources
        if (this.tileSources) {
          this.open(this.tileSources)
        }

        // Add custom controls
        for (i = 0; i < this.customControls.length; i++) {
          this.addControl(this.customControls[i].id, {
            anchor: this.customControls[i].anchor,
          })
        }

        // Initial fade out
        $.requestAnimationFrame(function () {
          beginControlsAutoHide(_this)
        })

        // Initial canvas options
        if (
          this.imageSmoothingEnabled !== undefined &&
          !this.imageSmoothingEnabled
        ) {
          this.drawer.setImageSmoothingEnabled(this.imageSmoothingEnabled)
        }

        // Register the viewer
        $._viewers.set(this.element, this)
      }

      $.extend(
        $.Viewer.prototype,
        $.EventSource.prototype,
        $.ControlDock.prototype,
        /** @lends OpenSeadragon.Viewer.prototype */ {
          /**
           * @function
           * @returns {Boolean}
           */
          isOpen: function () {
            return !!this.world.getItemCount()
          },

          // deprecated
          openDzi: function (dzi) {
            $.console.error(
              '[Viewer.openDzi] this function is deprecated; use Viewer.open() instead.'
            )
            return this.open(dzi)
          },

          // deprecated
          openTileSource: function (tileSource) {
            $.console.error(
              '[Viewer.openTileSource] this function is deprecated; use Viewer.open() instead.'
            )
            return this.open(tileSource)
          },

          //deprecated
          get buttons() {
            $.console.warn(
              'Viewer.buttons is deprecated; Please use Viewer.buttonGroup'
            )
            return this.buttonGroup
          },

          /**
           * Open tiled images into the viewer, closing any others.
           * To get the TiledImage instance created by open, add an event listener for
           * {@link OpenSeadragon.Viewer.html#.event:open}, which when fired can be used to get access
           * to the instance, i.e., viewer.world.getItemAt(0).
           * @function
           * @param {Array|String|Object|Function} tileSources - This can be a TiledImage
           * specifier, a TileSource specifier, or an array of either. A TiledImage specifier
           * is the same as the options parameter for {@link OpenSeadragon.Viewer#addTiledImage},
           * except for the index property; images are added in sequence.
           * A TileSource specifier is anything you could pass as the tileSource property
           * of the options parameter for {@link OpenSeadragon.Viewer#addTiledImage}.
           * @param {Number} initialPage - If sequenceMode is true, display this page initially
           * for the given tileSources. If specified, will overwrite the Viewer's existing initialPage property.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:open
           * @fires OpenSeadragon.Viewer.event:open-failed
           */
          open: function (tileSources, initialPage) {
            var _this = this

            this.close()

            if (!tileSources) {
              return this
            }

            if (this.sequenceMode && $.isArray(tileSources)) {
              if (this.referenceStrip) {
                this.referenceStrip.destroy()
                this.referenceStrip = null
              }

              if (typeof initialPage !== 'undefined' && !isNaN(initialPage)) {
                this.initialPage = initialPage
              }

              this.tileSources = tileSources
              this._sequenceIndex = Math.max(
                0,
                Math.min(this.tileSources.length - 1, this.initialPage)
              )
              if (this.tileSources.length) {
                this.open(this.tileSources[this._sequenceIndex])

                if (this.showReferenceStrip) {
                  this.addReferenceStrip()
                }
              }

              this._updateSequenceButtons(this._sequenceIndex)
              return this
            }

            if (!$.isArray(tileSources)) {
              tileSources = [tileSources]
            }

            if (!tileSources.length) {
              return this
            }

            this._opening = true

            var expected = tileSources.length
            var successes = 0
            var failures = 0
            var failEvent

            var checkCompletion = function () {
              if (successes + failures === expected) {
                if (successes) {
                  if (_this._firstOpen || !_this.preserveViewport) {
                    _this.viewport.goHome(true)
                    _this.viewport.update()
                  }

                  _this._firstOpen = false

                  var source = tileSources[0]
                  if (source.tileSource) {
                    source = source.tileSource
                  }

                  // Global overlays
                  if (_this.overlays && !_this.preserveOverlays) {
                    for (var i = 0; i < _this.overlays.length; i++) {
                      _this.currentOverlays[i] = getOverlayObject(
                        _this,
                        _this.overlays[i]
                      )
                    }
                  }

                  _this._drawOverlays()
                  _this._opening = false

                  /**
                   * Raised when the viewer has opened and loaded one or more TileSources.
                   *
                   * @event open
                   * @memberof OpenSeadragon.Viewer
                   * @type {object}
                   * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
                   * @property {OpenSeadragon.TileSource} source - The tile source that was opened.
                   * @property {?Object} userData - Arbitrary subscriber-defined object.
                   */
                  // TODO: what if there are multiple sources?
                  _this.raiseEvent('open', { source: source })
                } else {
                  _this._opening = false

                  /**
                   * Raised when an error occurs loading a TileSource.
                   *
                   * @event open-failed
                   * @memberof OpenSeadragon.Viewer
                   * @type {object}
                   * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
                   * @property {String} message - Information about what failed.
                   * @property {String} source - The tile source that failed.
                   * @property {?Object} userData - Arbitrary subscriber-defined object.
                   */
                  _this.raiseEvent('open-failed', failEvent)
                }
              }
            }

            var doOne = function (options) {
              if (!$.isPlainObject(options) || !options.tileSource) {
                options = {
                  tileSource: options,
                }
              }

              if (options.index !== undefined) {
                $.console.error(
                  '[Viewer.open] setting indexes here is not supported; use addTiledImage instead'
                )
                delete options.index
              }

              if (options.collectionImmediately === undefined) {
                options.collectionImmediately = true
              }

              var originalSuccess = options.success
              options.success = function (event) {
                successes++

                // TODO: now that options has other things besides tileSource, the overlays
                // should probably be at the options level, not the tileSource level.
                if (options.tileSource.overlays) {
                  for (var i = 0; i < options.tileSource.overlays.length; i++) {
                    _this.addOverlay(options.tileSource.overlays[i])
                  }
                }

                if (originalSuccess) {
                  originalSuccess(event)
                }

                checkCompletion()
              }

              var originalError = options.error
              options.error = function (event) {
                failures++

                if (!failEvent) {
                  failEvent = event
                }

                if (originalError) {
                  originalError(event)
                }

                checkCompletion()
              }

              _this.addTiledImage(options)
            }

            // TileSources
            for (var i = 0; i < tileSources.length; i++) {
              doOne(tileSources[i])
            }

            return this
          },

          /**
           * @function
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:close
           */
          close: function () {
            if (!THIS[this.hash]) {
              //this viewer has already been destroyed: returning immediately
              return this
            }

            this._opening = false

            if (this.navigator) {
              this.navigator.close()
            }

            if (!this.preserveOverlays) {
              this.clearOverlays()
              this.overlaysContainer.innerHTML = ''
            }

            THIS[this.hash].animating = false

            this.world.removeAll()
            this.imageLoader.clear()

            /**
             * Raised when the viewer is closed (see {@link OpenSeadragon.Viewer#close}).
             *
             * @event close
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('close')

            return this
          },

          /**
           * Function to destroy the viewer and clean up everything created by OpenSeadragon.
           *
           * Example:
           * var viewer = OpenSeadragon({
           *   [...]
           * });
           *
           * //when you are done with the viewer:
           * viewer.destroy();
           * viewer = null; //important
           *
           * @function
           * @fires OpenSeadragon.Viewer.event:before-destroy
           * @fires OpenSeadragon.Viewer.event:destroy
           */
          destroy: function () {
            if (!THIS[this.hash]) {
              //this viewer has already been destroyed: returning immediately
              return
            }

            /**
             * Raised when the viewer is about to be destroyed (see {@link OpenSeadragon.Viewer#before-destroy}).
             *
             * @event before-destroy
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('before-destroy')

            this._removeUpdatePixelDensityRatioEvent()

            this.close()

            this.clearOverlays()
            this.overlaysContainer.innerHTML = ''

            //TODO: implement this...
            //this.unbindSequenceControls()
            //this.unbindStandardControls()
            if (this._resizeObserver) {
              this._resizeObserver.disconnect()
            }

            if (this.referenceStrip) {
              this.referenceStrip.destroy()
              this.referenceStrip = null
            }

            if (this._updateRequestId !== null) {
              $.cancelAnimationFrame(this._updateRequestId)
              this._updateRequestId = null
            }

            if (this.drawer) {
              this.drawer.destroy()
            }

            if (this.navigator) {
              this.navigator.destroy()
              THIS[this.navigator.hash] = null
              delete THIS[this.navigator.hash]
              this.navigator = null
            }

            if (this.buttonGroup) {
              this.buttonGroup.destroy()
            } else if (this.customButtons) {
              while (this.customButtons.length) {
                this.customButtons.pop().destroy()
              }
            }

            if (this.paging) {
              this.paging.destroy()
            }

            // Go through top element (passed to us) and remove all children
            // Use removeChild to make sure it handles SVG or any non-html
            // also it performs better - http://jsperf.com/innerhtml-vs-removechild/15
            if (this.element) {
              while (this.element.firstChild) {
                this.element.removeChild(this.element.firstChild)
              }
            }

            this.container.onsubmit = null
            this.clearControls()

            // destroy the mouse trackers
            if (this.innerTracker) {
              this.innerTracker.destroy()
            }
            if (this.outerTracker) {
              this.outerTracker.destroy()
            }

            THIS[this.hash] = null
            delete THIS[this.hash]

            // clear all our references to dom objects
            this.canvas = null
            this.container = null

            // Unregister the viewer
            $._viewers.delete(this.element)

            // clear our reference to the main element - they will need to pass it in again, creating a new viewer
            this.element = null

            /**
             * Raised when the viewer is destroyed (see {@link OpenSeadragon.Viewer#destroy}).
             *
             * @event destroy
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('destroy')

            this.removeAllHandlers()
          },

          /**
           * @function
           * @returns {Boolean}
           */
          isMouseNavEnabled: function () {
            return this.innerTracker.isTracking()
          },

          /**
           * @function
           * @param {Boolean} enabled - true to enable, false to disable
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:mouse-enabled
           */
          setMouseNavEnabled: function (enabled) {
            this.innerTracker.setTracking(enabled)
            this.outerTracker.setTracking(enabled)
            /**
             * Raised when mouse/touch navigation is enabled or disabled (see {@link OpenSeadragon.Viewer#setMouseNavEnabled}).
             *
             * @event mouse-enabled
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} enabled
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('mouse-enabled', { enabled: enabled })
            return this
          },

          /**
           * @function
           * @returns {Boolean}
           */
          areControlsEnabled: function () {
            var enabled = this.controls.length,
              i
            for (i = 0; i < this.controls.length; i++) {
              enabled = enabled && this.controls[i].isVisible()
            }
            return enabled
          },

          /**
           * Shows or hides the controls (e.g. the default navigation buttons).
           *
           * @function
           * @param {Boolean} true to show, false to hide.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:controls-enabled
           */
          setControlsEnabled: function (enabled) {
            if (enabled) {
              abortControlsAutoHide(this)
            } else {
              beginControlsAutoHide(this)
            }
            /**
             * Raised when the navigation controls are shown or hidden (see {@link OpenSeadragon.Viewer#setControlsEnabled}).
             *
             * @event controls-enabled
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} enabled
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('controls-enabled', { enabled: enabled })
            return this
          },

          /**
           * Turns debugging mode on or off for this viewer.
           *
           * @function
           * @param {Boolean} true to turn debug on, false to turn debug off.
           */
          setDebugMode: function (debugMode) {
            for (var i = 0; i < this.world.getItemCount(); i++) {
              this.world.getItemAt(i).debugMode = debugMode
            }

            this.debugMode = debugMode
            this.forceRedraw()
          },

          /**
           * @function
           * @returns {Boolean}
           */
          isFullPage: function () {
            return THIS[this.hash].fullPage
          },

          /**
           * Toggle full page mode.
           * @function
           * @param {Boolean} fullPage
           *      If true, enter full page mode.  If false, exit full page mode.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:pre-full-page
           * @fires OpenSeadragon.Viewer.event:full-page
           */
          setFullPage: function (fullPage) {
            var body = document.body,
              bodyStyle = body.style,
              docStyle = document.documentElement.style,
              _this = this,
              nodes,
              i

            //don't bother modifying the DOM if we are already in full page mode.
            if (fullPage === this.isFullPage()) {
              return this
            }

            var fullPageEventArgs = {
              fullPage: fullPage,
              preventDefaultAction: false,
            }
            /**
             * Raised when the viewer is about to change to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
             *
             * @event pre-full-page
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} fullPage - True if entering full-page mode, false if exiting full-page mode.
             * @property {Boolean} preventDefaultAction - Set to true to prevent full-page mode change. Default: false.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('pre-full-page', fullPageEventArgs)
            if (fullPageEventArgs.preventDefaultAction) {
              return this
            }

            if (fullPage) {
              this.elementSize = $.getElementSize(this.element)
              this.pageScroll = $.getPageScroll()

              this.elementMargin = this.element.style.margin
              this.element.style.margin = '0'
              this.elementPadding = this.element.style.padding
              this.element.style.padding = '0'

              this.bodyMargin = bodyStyle.margin
              this.docMargin = docStyle.margin
              bodyStyle.margin = '0'
              docStyle.margin = '0'

              this.bodyPadding = bodyStyle.padding
              this.docPadding = docStyle.padding
              bodyStyle.padding = '0'
              docStyle.padding = '0'

              this.bodyWidth = bodyStyle.width
              this.docWidth = docStyle.width
              bodyStyle.width = '100%'
              docStyle.width = '100%'

              this.bodyHeight = bodyStyle.height
              this.docHeight = docStyle.height
              bodyStyle.height = '100%'
              docStyle.height = '100%'

              this.bodyDisplay = bodyStyle.display
              bodyStyle.display = 'block'

              //when entering full screen on the ipad it wasn't sufficient to leave
              //the body intact as only only the top half of the screen would
              //respond to touch events on the canvas, while the bottom half treated
              //them as touch events on the document body.  Thus we remove and store
              //the bodies elements and replace them when we leave full screen.
              this.previousBody = []
              THIS[this.hash].prevElementParent = this.element.parentNode
              THIS[this.hash].prevNextSibling = this.element.nextSibling
              THIS[this.hash].prevElementWidth = this.element.style.width
              THIS[this.hash].prevElementHeight = this.element.style.height
              nodes = body.childNodes.length
              for (i = 0; i < nodes; i++) {
                this.previousBody.push(body.childNodes[0])
                body.removeChild(body.childNodes[0])
              }

              //If we've got a toolbar, we need to enable the user to use css to
              //preserve it in fullpage mode
              if (this.toolbar && this.toolbar.element) {
                //save a reference to the parent so we can put it back
                //in the long run we need a better strategy
                this.toolbar.parentNode = this.toolbar.element.parentNode
                this.toolbar.nextSibling = this.toolbar.element.nextSibling
                body.appendChild(this.toolbar.element)

                //Make sure the user has some ability to style the toolbar based
                //on the mode
                $.addClass(this.toolbar.element, 'fullpage')
              }

              $.addClass(this.element, 'fullpage')
              body.appendChild(this.element)

              this.element.style.height = '100vh'
              this.element.style.width = '100vw'

              if (this.toolbar && this.toolbar.element) {
                this.element.style.height =
                  $.getElementSize(this.element).y -
                  $.getElementSize(this.toolbar.element).y +
                  'px'
              }

              THIS[this.hash].fullPage = true

              // mouse will be inside container now
              $.delegate(this, onContainerEnter)({})
            } else {
              this.element.style.margin = this.elementMargin
              this.element.style.padding = this.elementPadding

              bodyStyle.margin = this.bodyMargin
              docStyle.margin = this.docMargin

              bodyStyle.padding = this.bodyPadding
              docStyle.padding = this.docPadding

              bodyStyle.width = this.bodyWidth
              docStyle.width = this.docWidth

              bodyStyle.height = this.bodyHeight
              docStyle.height = this.docHeight

              bodyStyle.display = this.bodyDisplay

              body.removeChild(this.element)
              nodes = this.previousBody.length
              for (i = 0; i < nodes; i++) {
                body.appendChild(this.previousBody.shift())
              }

              $.removeClass(this.element, 'fullpage')
              THIS[this.hash].prevElementParent.insertBefore(
                this.element,
                THIS[this.hash].prevNextSibling
              )

              //If we've got a toolbar, we need to enable the user to use css to
              //reset it to its original state
              if (this.toolbar && this.toolbar.element) {
                body.removeChild(this.toolbar.element)

                //Make sure the user has some ability to style the toolbar based
                //on the mode
                $.removeClass(this.toolbar.element, 'fullpage')

                this.toolbar.parentNode.insertBefore(
                  this.toolbar.element,
                  this.toolbar.nextSibling
                )
                delete this.toolbar.parentNode
                delete this.toolbar.nextSibling
              }

              this.element.style.width = THIS[this.hash].prevElementWidth
              this.element.style.height = THIS[this.hash].prevElementHeight

              // After exiting fullPage or fullScreen, it can take some time
              // before the browser can actually set the scroll.
              var restoreScrollCounter = 0
              var restoreScroll = function () {
                $.setPageScroll(_this.pageScroll)
                var pageScroll = $.getPageScroll()
                restoreScrollCounter++
                if (
                  restoreScrollCounter < 10 &&
                  (pageScroll.x !== _this.pageScroll.x ||
                    pageScroll.y !== _this.pageScroll.y)
                ) {
                  $.requestAnimationFrame(restoreScroll)
                }
              }
              $.requestAnimationFrame(restoreScroll)

              THIS[this.hash].fullPage = false

              // mouse will likely be outside now
              $.delegate(this, onContainerLeave)({})
            }

            if (this.navigator && this.viewport) {
              this.navigator.update(this.viewport)
            }

            /**
             * Raised when the viewer has changed to/from full-page mode (see {@link OpenSeadragon.Viewer#setFullPage}).
             *
             * @event full-page
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} fullPage - True if changed to full-page mode, false if exited full-page mode.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('full-page', { fullPage: fullPage })

            return this
          },

          /**
           * Toggle full screen mode if supported. Toggle full page mode otherwise.
           * @function
           * @param {Boolean} fullScreen
           *      If true, enter full screen mode.  If false, exit full screen mode.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:pre-full-screen
           * @fires OpenSeadragon.Viewer.event:full-screen
           */
          setFullScreen: function (fullScreen) {
            var _this = this

            if (!$.supportsFullScreen) {
              return this.setFullPage(fullScreen)
            }

            if ($.isFullScreen() === fullScreen) {
              return this
            }

            var fullScreeEventArgs = {
              fullScreen: fullScreen,
              preventDefaultAction: false,
            }
            /**
             * Raised when the viewer is about to change to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
             * Note: the pre-full-screen event is not raised when the user is exiting
             * full-screen mode by pressing the Esc key. In that case, consider using
             * the full-screen, pre-full-page or full-page events.
             *
             * @event pre-full-screen
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} fullScreen - True if entering full-screen mode, false if exiting full-screen mode.
             * @property {Boolean} preventDefaultAction - Set to true to prevent full-screen mode change. Default: false.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('pre-full-screen', fullScreeEventArgs)
            if (fullScreeEventArgs.preventDefaultAction) {
              return this
            }

            if (fullScreen) {
              this.setFullPage(true)
              // If the full page mode is not actually entered, we need to prevent
              // the full screen mode.
              if (!this.isFullPage()) {
                return this
              }

              this.fullPageStyleWidth = this.element.style.width
              this.fullPageStyleHeight = this.element.style.height
              this.element.style.width = '100%'
              this.element.style.height = '100%'

              var onFullScreenChange = function () {
                var isFullScreen = $.isFullScreen()
                if (!isFullScreen) {
                  $.removeEvent(
                    document,
                    $.fullScreenEventName,
                    onFullScreenChange
                  )
                  $.removeEvent(
                    document,
                    $.fullScreenErrorEventName,
                    onFullScreenChange
                  )

                  _this.setFullPage(false)
                  if (_this.isFullPage()) {
                    _this.element.style.width = _this.fullPageStyleWidth
                    _this.element.style.height = _this.fullPageStyleHeight
                  }
                }
                if (_this.navigator && _this.viewport) {
                  //09/08/2018 - Fabroh : Fix issue #1504 : Ensure to get the navigator updated on fullscreen out with custom location with a timeout
                  setTimeout(function () {
                    _this.navigator.update(_this.viewport)
                  })
                }
                /**
                 * Raised when the viewer has changed to/from full-screen mode (see {@link OpenSeadragon.Viewer#setFullScreen}).
                 *
                 * @event full-screen
                 * @memberof OpenSeadragon.Viewer
                 * @type {object}
                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
                 * @property {Boolean} fullScreen - True if changed to full-screen mode, false if exited full-screen mode.
                 * @property {?Object} userData - Arbitrary subscriber-defined object.
                 */
                _this.raiseEvent('full-screen', { fullScreen: isFullScreen })
              }
              $.addEvent(document, $.fullScreenEventName, onFullScreenChange)
              $.addEvent(
                document,
                $.fullScreenErrorEventName,
                onFullScreenChange
              )

              $.requestFullScreen(document.body)
            } else {
              $.exitFullScreen()
            }
            return this
          },

          /**
           * @function
           * @returns {Boolean}
           */
          isVisible: function () {
            return this.container.style.visibility !== 'hidden'
          },

          //
          /**
           * @function
           * @returns {Boolean} returns true if the viewer is in fullscreen
           */
          isFullScreen: function () {
            return $.isFullScreen() && this.isFullPage()
          },

          /**
           * @function
           * @param {Boolean} visible
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:visible
           */
          setVisible: function (visible) {
            this.container.style.visibility = visible ? '' : 'hidden'
            /**
             * Raised when the viewer is shown or hidden (see {@link OpenSeadragon.Viewer#setVisible}).
             *
             * @event visible
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Boolean} visible
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('visible', { visible: visible })
            return this
          },

          /**
           * Add a tiled image to the viewer.
           * options.tileSource can be anything that {@link OpenSeadragon.Viewer#open}
           *  supports except arrays of images.
           * Note that you can specify options.width or options.height, but not both.
           * The other dimension will be calculated according to the item's aspect ratio.
           * If collectionMode is on (see {@link OpenSeadragon.Options}), the new image is
           * automatically arranged with the others.
           * @function
           * @param {Object} options
           * @param {String|Object|Function} options.tileSource - The TileSource specifier.
           * A String implies a url used to determine the tileSource implementation
           *      based on the file extension of url. JSONP is implied by *.js,
           *      otherwise the url is retrieved as text and the resulting text is
           *      introspected to determine if its json, xml, or text and parsed.
           * An Object implies an inline configuration which has a single
           *      property sufficient for being able to determine tileSource
           *      implementation. If the object has a property which is a function
           *      named 'getTileUrl', it is treated as a custom TileSource.
           * @param {Number} [options.index] The index of the item. Added on top of
           * all other items if not specified.
           * @param {Boolean} [options.replace=false] If true, the item at options.index will be
           * removed and the new item is added in its place. options.tileSource will be
           * interpreted and fetched if necessary before the old item is removed to avoid leaving
           * a gap in the world.
           * @param {Number} [options.x=0] The X position for the image in viewport coordinates.
           * @param {Number} [options.y=0] The Y position for the image in viewport coordinates.
           * @param {Number} [options.width=1] The width for the image in viewport coordinates.
           * @param {Number} [options.height] The height for the image in viewport coordinates.
           * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates
           * to fit the image into. If specified, x, y, width and height get ignored.
           * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]
           * How to anchor the image in the bounds if options.fitBounds is set.
           * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
           * (portions of the image outside of this area will not be visible). Only works on
           * browsers that support the HTML5 canvas.
           * @param {Number} [options.opacity=1] Proportional opacity of the tiled images (1=opaque, 0=hidden)
           * @param {Boolean} [options.preload=false]  Default switch for loading hidden images (true loads, false blocks)
           * @param {Number} [options.degrees=0] Initial rotation of the tiled image around
           * its top left corner in degrees.
           * @param {Boolean} [options.flipped=false] Whether to horizontally flip the image.
           * @param {String} [options.compositeOperation] How the image is composited onto other images.
           * @param {String} [options.crossOriginPolicy] The crossOriginPolicy for this specific image,
           * overriding viewer.crossOriginPolicy.
           * @param {Boolean} [options.ajaxWithCredentials] Whether to set withCredentials on tile AJAX
           * @param {Boolean} [options.loadTilesWithAjax]
           *      Whether to load tile data using AJAX requests.
           *      Defaults to the setting in {@link OpenSeadragon.Options}.
           * @param {Object} [options.ajaxHeaders]
           *      A set of headers to include when making tile AJAX requests.
           *      Note that these headers will be merged over any headers specified in {@link OpenSeadragon.Options}.
           *      Specifying a falsy value for a header will clear its existing value set at the Viewer level (if any).
           * requests.
           * @param {Function} [options.success] A function that gets called when the image is
           * successfully added. It's passed the event object which contains a single property:
           * "item", which is the resulting instance of TiledImage.
           * @param {Function} [options.error] A function that gets called if the image is
           * unable to be added. It's passed the error event object, which contains "message"
           * and "source" properties.
           * @param {Boolean} [options.collectionImmediately=false] If collectionMode is on,
           * specifies whether to snap to the new arrangement immediately or to animate to it.
           * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
           * @fires OpenSeadragon.World.event:add-item
           * @fires OpenSeadragon.Viewer.event:add-item-failed
           */
          addTiledImage: function (options) {
            $.console.assert(
              options,
              '[Viewer.addTiledImage] options is required'
            )
            $.console.assert(
              options.tileSource,
              '[Viewer.addTiledImage] options.tileSource is required'
            )
            $.console.assert(
              !options.replace ||
                (options.index > -1 &&
                  options.index < this.world.getItemCount()),
              '[Viewer.addTiledImage] if options.replace is used, options.index must be a valid index in Viewer.world'
            )

            var _this = this

            if (options.replace) {
              options.replaceItem = _this.world.getItemAt(options.index)
            }

            this._hideMessage()

            if (options.placeholderFillStyle === undefined) {
              options.placeholderFillStyle = this.placeholderFillStyle
            }
            if (options.opacity === undefined) {
              options.opacity = this.opacity
            }
            if (options.preload === undefined) {
              options.preload = this.preload
            }
            if (options.compositeOperation === undefined) {
              options.compositeOperation = this.compositeOperation
            }
            if (options.crossOriginPolicy === undefined) {
              options.crossOriginPolicy =
                options.tileSource.crossOriginPolicy !== undefined
                  ? options.tileSource.crossOriginPolicy
                  : this.crossOriginPolicy
            }
            if (options.ajaxWithCredentials === undefined) {
              options.ajaxWithCredentials = this.ajaxWithCredentials
            }
            if (options.loadTilesWithAjax === undefined) {
              options.loadTilesWithAjax = this.loadTilesWithAjax
            }
            if (
              options.ajaxHeaders === undefined ||
              options.ajaxHeaders === null
            ) {
              options.ajaxHeaders = this.ajaxHeaders
            } else if (
              $.isPlainObject(options.ajaxHeaders) &&
              $.isPlainObject(this.ajaxHeaders)
            ) {
              options.ajaxHeaders = $.extend(
                {},
                this.ajaxHeaders,
                options.ajaxHeaders
              )
            }

            var myQueueItem = {
              options: options,
            }

            function raiseAddItemFailed(event) {
              for (var i = 0; i < _this._loadQueue.length; i++) {
                if (_this._loadQueue[i] === myQueueItem) {
                  _this._loadQueue.splice(i, 1)
                  break
                }
              }

              if (_this._loadQueue.length === 0) {
                refreshWorld(myQueueItem)
              }

              /**
               * Raised when an error occurs while adding a item.
               * @event add-item-failed
               * @memberOf OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
               * @property {String} message
               * @property {String} source
               * @property {Object} options The options passed to the addTiledImage method.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('add-item-failed', event)

              if (options.error) {
                options.error(event)
              }
            }

            function refreshWorld(theItem) {
              if (_this.collectionMode) {
                _this.world.arrange({
                  immediately: theItem.options.collectionImmediately,
                  rows: _this.collectionRows,
                  columns: _this.collectionColumns,
                  layout: _this.collectionLayout,
                  tileSize: _this.collectionTileSize,
                  tileMargin: _this.collectionTileMargin,
                })
                _this.world.setAutoRefigureSizes(true)
              }
            }

            if ($.isArray(options.tileSource)) {
              setTimeout(function () {
                raiseAddItemFailed({
                  message:
                    '[Viewer.addTiledImage] Sequences can not be added; add them one at a time instead.',
                  source: options.tileSource,
                  options: options,
                })
              })
              return
            }

            this._loadQueue.push(myQueueItem)

            function processReadyItems() {
              var queueItem, tiledImage, optionsClone
              while (_this._loadQueue.length) {
                queueItem = _this._loadQueue[0]
                if (!queueItem.tileSource) {
                  break
                }

                _this._loadQueue.splice(0, 1)

                if (queueItem.options.replace) {
                  var newIndex = _this.world.getIndexOfItem(
                    queueItem.options.replaceItem
                  )
                  if (newIndex !== -1) {
                    queueItem.options.index = newIndex
                  }
                  _this.world.removeItem(queueItem.options.replaceItem)
                }

                tiledImage = new $.TiledImage({
                  viewer: _this,
                  source: queueItem.tileSource,
                  viewport: _this.viewport,
                  drawer: _this.drawer,
                  tileCache: _this.tileCache,
                  imageLoader: _this.imageLoader,
                  x: queueItem.options.x,
                  y: queueItem.options.y,
                  width: queueItem.options.width,
                  height: queueItem.options.height,
                  fitBounds: queueItem.options.fitBounds,
                  fitBoundsPlacement: queueItem.options.fitBoundsPlacement,
                  clip: queueItem.options.clip,
                  placeholderFillStyle: queueItem.options.placeholderFillStyle,
                  opacity: queueItem.options.opacity,
                  preload: queueItem.options.preload,
                  degrees: queueItem.options.degrees,
                  flipped: queueItem.options.flipped,
                  compositeOperation: queueItem.options.compositeOperation,
                  springStiffness: _this.springStiffness,
                  animationTime: _this.animationTime,
                  minZoomImageRatio: _this.minZoomImageRatio,
                  wrapHorizontal: _this.wrapHorizontal,
                  wrapVertical: _this.wrapVertical,
                  immediateRender: _this.immediateRender,
                  blendTime: _this.blendTime,
                  alwaysBlend: _this.alwaysBlend,
                  minPixelRatio: _this.minPixelRatio,
                  smoothTileEdgesMinZoom: _this.smoothTileEdgesMinZoom,
                  iOSDevice: _this.iOSDevice,
                  crossOriginPolicy: queueItem.options.crossOriginPolicy,
                  ajaxWithCredentials: queueItem.options.ajaxWithCredentials,
                  loadTilesWithAjax: queueItem.options.loadTilesWithAjax,
                  ajaxHeaders: queueItem.options.ajaxHeaders,
                  debugMode: _this.debugMode,
                  subPixelRoundingForTransparency:
                    _this.subPixelRoundingForTransparency,
                })

                if (_this.collectionMode) {
                  _this.world.setAutoRefigureSizes(false)
                }

                if (_this.navigator) {
                  optionsClone = $.extend({}, queueItem.options, {
                    replace: false, // navigator already removed the layer, nothing to replace
                    originalTiledImage: tiledImage,
                    tileSource: queueItem.tileSource,
                  })

                  _this.navigator.addTiledImage(optionsClone)
                }

                _this.world.addItem(tiledImage, {
                  index: queueItem.options.index,
                })

                if (_this._loadQueue.length === 0) {
                  //this restores the autoRefigureSizes flag to true.
                  refreshWorld(queueItem)
                }

                if (
                  _this.world.getItemCount() === 1 &&
                  !_this.preserveViewport
                ) {
                  _this.viewport.goHome(true)
                }

                if (queueItem.options.success) {
                  queueItem.options.success({
                    item: tiledImage,
                  })
                }
              }
            }

            getTileSourceImplementation(
              this,
              options.tileSource,
              options,
              function (tileSource) {
                myQueueItem.tileSource = tileSource

                // add everybody at the front of the queue that's ready to go
                processReadyItems()
              },
              function (event) {
                event.options = options
                raiseAddItemFailed(event)

                // add everybody at the front of the queue that's ready to go
                processReadyItems()
              }
            )
          },

          /**
           * Add a simple image to the viewer.
           * The options are the same as the ones in {@link OpenSeadragon.Viewer#addTiledImage}
           * except for options.tileSource which is replaced by options.url.
           * @function
           * @param {Object} options - See {@link OpenSeadragon.Viewer#addTiledImage}
           * for all the options
           * @param {String} options.url - The URL of the image to add.
           * @fires OpenSeadragon.World.event:add-item
           * @fires OpenSeadragon.Viewer.event:add-item-failed
           */
          addSimpleImage: function (options) {
            $.console.assert(
              options,
              '[Viewer.addSimpleImage] options is required'
            )
            $.console.assert(
              options.url,
              '[Viewer.addSimpleImage] options.url is required'
            )

            var opts = $.extend({}, options, {
              tileSource: {
                type: 'image',
                url: options.url,
              },
            })
            delete opts.url
            this.addTiledImage(opts)
          },

          // deprecated
          addLayer: function (options) {
            var _this = this

            $.console.error(
              '[Viewer.addLayer] this function is deprecated; use Viewer.addTiledImage() instead.'
            )

            var optionsClone = $.extend({}, options, {
              success: function (event) {
                _this.raiseEvent('add-layer', {
                  options: options,
                  drawer: event.item,
                })
              },
              error: function (event) {
                _this.raiseEvent('add-layer-failed', event)
              },
            })

            this.addTiledImage(optionsClone)
            return this
          },

          // deprecated
          getLayerAtLevel: function (level) {
            $.console.error(
              '[Viewer.getLayerAtLevel] this function is deprecated; use World.getItemAt() instead.'
            )
            return this.world.getItemAt(level)
          },

          // deprecated
          getLevelOfLayer: function (drawer) {
            $.console.error(
              '[Viewer.getLevelOfLayer] this function is deprecated; use World.getIndexOfItem() instead.'
            )
            return this.world.getIndexOfItem(drawer)
          },

          // deprecated
          getLayersCount: function () {
            $.console.error(
              '[Viewer.getLayersCount] this function is deprecated; use World.getItemCount() instead.'
            )
            return this.world.getItemCount()
          },

          // deprecated
          setLayerLevel: function (drawer, level) {
            $.console.error(
              '[Viewer.setLayerLevel] this function is deprecated; use World.setItemIndex() instead.'
            )
            return this.world.setItemIndex(drawer, level)
          },

          // deprecated
          removeLayer: function (drawer) {
            $.console.error(
              '[Viewer.removeLayer] this function is deprecated; use World.removeItem() instead.'
            )
            return this.world.removeItem(drawer)
          },

          /**
           * Force the viewer to redraw its contents.
           * @returns {OpenSeadragon.Viewer} Chainable.
           */
          forceRedraw: function () {
            THIS[this.hash].forceRedraw = true
            return this
          },

          /**
           * Force the viewer to reset its size to match its container.
           */
          forceResize: function () {
            THIS[this.hash].needsResize = true
            THIS[this.hash].forceResize = true
          },

          /**
           * @function
           * @returns {OpenSeadragon.Viewer} Chainable.
           */
          bindSequenceControls: function () {
            //////////////////////////////////////////////////////////////////////////
            // Image Sequence Controls
            //////////////////////////////////////////////////////////////////////////
            var onFocusHandler = $.delegate(this, onFocus),
              onBlurHandler = $.delegate(this, onBlur),
              onNextHandler = $.delegate(this, this.goToNextPage),
              onPreviousHandler = $.delegate(this, this.goToPreviousPage),
              navImages = this.navImages,
              useGroup = true

            if (this.showSequenceControl) {
              if (this.previousButton || this.nextButton) {
                //if we are binding to custom buttons then layout and
                //grouping is the responsibility of the page author
                useGroup = false
              }

              this.previousButton = new $.Button({
                element: this.previousButton
                  ? $.getElement(this.previousButton)
                  : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $.getString('Tooltips.PreviousPage'),
                srcRest: resolveUrl(this.prefixUrl, navImages.previous.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.previous.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.previous.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.previous.DOWN),
                onRelease: onPreviousHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler,
              })

              this.nextButton = new $.Button({
                element: this.nextButton ? $.getElement(this.nextButton) : null,
                clickTimeThreshold: this.clickTimeThreshold,
                clickDistThreshold: this.clickDistThreshold,
                tooltip: $.getString('Tooltips.NextPage'),
                srcRest: resolveUrl(this.prefixUrl, navImages.next.REST),
                srcGroup: resolveUrl(this.prefixUrl, navImages.next.GROUP),
                srcHover: resolveUrl(this.prefixUrl, navImages.next.HOVER),
                srcDown: resolveUrl(this.prefixUrl, navImages.next.DOWN),
                onRelease: onNextHandler,
                onFocus: onFocusHandler,
                onBlur: onBlurHandler,
              })

              if (!this.navPrevNextWrap) {
                this.previousButton.disable()
              }

              if (!this.tileSources || !this.tileSources.length) {
                this.nextButton.disable()
              }

              if (useGroup) {
                this.paging = new $.ButtonGroup({
                  buttons: [this.previousButton, this.nextButton],
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                })

                this.pagingControl = this.paging.element

                if (this.toolbar) {
                  this.toolbar.addControl(this.pagingControl, {
                    anchor: $.ControlAnchor.BOTTOM_RIGHT,
                  })
                } else {
                  this.addControl(this.pagingControl, {
                    anchor:
                      this.sequenceControlAnchor || $.ControlAnchor.TOP_LEFT,
                  })
                }
              }
            }
            return this
          },

          /**
           * @function
           * @returns {OpenSeadragon.Viewer} Chainable.
           */
          bindStandardControls: function () {
            //////////////////////////////////////////////////////////////////////////
            // Navigation Controls
            //////////////////////////////////////////////////////////////////////////
            var beginZoomingInHandler = $.delegate(this, beginZoomingIn),
              endZoomingHandler = $.delegate(this, endZooming),
              doSingleZoomInHandler = $.delegate(this, doSingleZoomIn),
              beginZoomingOutHandler = $.delegate(this, beginZoomingOut),
              doSingleZoomOutHandler = $.delegate(this, doSingleZoomOut),
              onHomeHandler = $.delegate(this, onHome),
              onFullScreenHandler = $.delegate(this, onFullScreen),
              onRotateLeftHandler = $.delegate(this, onRotateLeft),
              onRotateRightHandler = $.delegate(this, onRotateRight),
              onFlipHandler = $.delegate(this, onFlip),
              onFocusHandler = $.delegate(this, onFocus),
              onBlurHandler = $.delegate(this, onBlur),
              navImages = this.navImages,
              buttons = [],
              useGroup = true

            if (this.showNavigationControl) {
              if (
                this.zoomInButton ||
                this.zoomOutButton ||
                this.homeButton ||
                this.fullPageButton ||
                this.rotateLeftButton ||
                this.rotateRightButton ||
                this.flipButton
              ) {
                //if we are binding to custom buttons then layout and
                //grouping is the responsibility of the page author
                useGroup = false
              }

              if (this.showZoomControl) {
                buttons.push(
                  (this.zoomInButton = new $.Button({
                    element: this.zoomInButton
                      ? $.getElement(this.zoomInButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.ZoomIn'),
                    srcRest: resolveUrl(this.prefixUrl, navImages.zoomIn.REST),
                    srcGroup: resolveUrl(
                      this.prefixUrl,
                      navImages.zoomIn.GROUP
                    ),
                    srcHover: resolveUrl(
                      this.prefixUrl,
                      navImages.zoomIn.HOVER
                    ),
                    srcDown: resolveUrl(this.prefixUrl, navImages.zoomIn.DOWN),
                    onPress: beginZoomingInHandler,
                    onRelease: endZoomingHandler,
                    onClick: doSingleZoomInHandler,
                    onEnter: beginZoomingInHandler,
                    onExit: endZoomingHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )

                buttons.push(
                  (this.zoomOutButton = new $.Button({
                    element: this.zoomOutButton
                      ? $.getElement(this.zoomOutButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.ZoomOut'),
                    srcRest: resolveUrl(this.prefixUrl, navImages.zoomOut.REST),
                    srcGroup: resolveUrl(
                      this.prefixUrl,
                      navImages.zoomOut.GROUP
                    ),
                    srcHover: resolveUrl(
                      this.prefixUrl,
                      navImages.zoomOut.HOVER
                    ),
                    srcDown: resolveUrl(this.prefixUrl, navImages.zoomOut.DOWN),
                    onPress: beginZoomingOutHandler,
                    onRelease: endZoomingHandler,
                    onClick: doSingleZoomOutHandler,
                    onEnter: beginZoomingOutHandler,
                    onExit: endZoomingHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )
              }

              if (this.showHomeControl) {
                buttons.push(
                  (this.homeButton = new $.Button({
                    element: this.homeButton
                      ? $.getElement(this.homeButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.Home'),
                    srcRest: resolveUrl(this.prefixUrl, navImages.home.REST),
                    srcGroup: resolveUrl(this.prefixUrl, navImages.home.GROUP),
                    srcHover: resolveUrl(this.prefixUrl, navImages.home.HOVER),
                    srcDown: resolveUrl(this.prefixUrl, navImages.home.DOWN),
                    onRelease: onHomeHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )
              }

              if (this.showFullPageControl) {
                buttons.push(
                  (this.fullPageButton = new $.Button({
                    element: this.fullPageButton
                      ? $.getElement(this.fullPageButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.FullPage'),
                    srcRest: resolveUrl(
                      this.prefixUrl,
                      navImages.fullpage.REST
                    ),
                    srcGroup: resolveUrl(
                      this.prefixUrl,
                      navImages.fullpage.GROUP
                    ),
                    srcHover: resolveUrl(
                      this.prefixUrl,
                      navImages.fullpage.HOVER
                    ),
                    srcDown: resolveUrl(
                      this.prefixUrl,
                      navImages.fullpage.DOWN
                    ),
                    onRelease: onFullScreenHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )
              }

              if (this.showRotationControl) {
                buttons.push(
                  (this.rotateLeftButton = new $.Button({
                    element: this.rotateLeftButton
                      ? $.getElement(this.rotateLeftButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.RotateLeft'),
                    srcRest: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateleft.REST
                    ),
                    srcGroup: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateleft.GROUP
                    ),
                    srcHover: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateleft.HOVER
                    ),
                    srcDown: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateleft.DOWN
                    ),
                    onRelease: onRotateLeftHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )

                buttons.push(
                  (this.rotateRightButton = new $.Button({
                    element: this.rotateRightButton
                      ? $.getElement(this.rotateRightButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.RotateRight'),
                    srcRest: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateright.REST
                    ),
                    srcGroup: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateright.GROUP
                    ),
                    srcHover: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateright.HOVER
                    ),
                    srcDown: resolveUrl(
                      this.prefixUrl,
                      navImages.rotateright.DOWN
                    ),
                    onRelease: onRotateRightHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )
              }

              if (this.showFlipControl) {
                buttons.push(
                  (this.flipButton = new $.Button({
                    element: this.flipButton
                      ? $.getElement(this.flipButton)
                      : null,
                    clickTimeThreshold: this.clickTimeThreshold,
                    clickDistThreshold: this.clickDistThreshold,
                    tooltip: $.getString('Tooltips.Flip'),
                    srcRest: resolveUrl(this.prefixUrl, navImages.flip.REST),
                    srcGroup: resolveUrl(this.prefixUrl, navImages.flip.GROUP),
                    srcHover: resolveUrl(this.prefixUrl, navImages.flip.HOVER),
                    srcDown: resolveUrl(this.prefixUrl, navImages.flip.DOWN),
                    onRelease: onFlipHandler,
                    onFocus: onFocusHandler,
                    onBlur: onBlurHandler,
                  }))
                )
              }

              if (useGroup) {
                this.buttonGroup = new $.ButtonGroup({
                  buttons: buttons,
                  clickTimeThreshold: this.clickTimeThreshold,
                  clickDistThreshold: this.clickDistThreshold,
                })

                this.navControl = this.buttonGroup.element
                this.addHandler('open', $.delegate(this, lightUp))

                if (this.toolbar) {
                  this.toolbar.addControl(this.navControl, {
                    anchor:
                      this.navigationControlAnchor || $.ControlAnchor.TOP_LEFT,
                  })
                } else {
                  this.addControl(this.navControl, {
                    anchor:
                      this.navigationControlAnchor || $.ControlAnchor.TOP_LEFT,
                  })
                }
              } else {
                this.customButtons = buttons
              }
            }
            return this
          },

          /**
           * Gets the active page of a sequence
           * @function
           * @returns {Number}
           */
          currentPage: function () {
            return this._sequenceIndex
          },

          /**
           * @function
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:page
           */
          goToPage: function (page) {
            if (
              this.tileSources &&
              page >= 0 &&
              page < this.tileSources.length
            ) {
              this._sequenceIndex = page

              this._updateSequenceButtons(page)

              this.open(this.tileSources[page])

              if (this.referenceStrip) {
                this.referenceStrip.setFocus(page)
              }

              /**
               * Raised when the page is changed on a viewer configured with multiple image sources (see {@link OpenSeadragon.Viewer#goToPage}).
               *
               * @event page
               * @memberof OpenSeadragon.Viewer
               * @type {Object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
               * @property {Number} page - The page index.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.raiseEvent('page', { page: page })
            }

            return this
          },

          /**
           * Adds an html element as an overlay to the current viewport.  Useful for
           * highlighting words or areas of interest on an image or other zoomable
           * interface. The overlays added via this method are removed when the viewport
           * is closed which include when changing page.
           * @method
           * @param {Element|String|Object} element - A reference to an element or an id for
           *      the element which will be overlaid. Or an Object specifying the configuration for the overlay.
           *      If using an object, see {@link OpenSeadragon.Overlay} for a list of
           *      all available options.
           * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
           *      rectangle which will be overlaid. This is a viewport relative location.
           * @param {OpenSeadragon.Placement} [placement=OpenSeadragon.Placement.TOP_LEFT] - The position of the
           *      viewport which the location coordinates will be treated as relative
           *      to.
           * @param {function} [onDraw] - If supplied the callback is called when the overlay
           *      needs to be drawn. It it the responsibility of the callback to do any drawing/positioning.
           *      It is passed position, size and element.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:add-overlay
           */
          addOverlay: function (element, location, placement, onDraw) {
            var options
            if ($.isPlainObject(element)) {
              options = element
            } else {
              options = {
                element: element,
                location: location,
                placement: placement,
                onDraw: onDraw,
              }
            }

            element = $.getElement(options.element)

            if (getOverlayIndex(this.currentOverlays, element) >= 0) {
              // they're trying to add a duplicate overlay
              return this
            }

            var overlay = getOverlayObject(this, options)
            this.currentOverlays.push(overlay)
            overlay.drawHTML(this.overlaysContainer, this.viewport)

            /**
             * Raised when an overlay is added to the viewer (see {@link OpenSeadragon.Viewer#addOverlay}).
             *
             * @event add-overlay
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {Element} element - The overlay element.
             * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
             * @property {OpenSeadragon.Placement} placement
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('add-overlay', {
              element: element,
              location: options.location,
              placement: options.placement,
            })
            return this
          },

          /**
           * Updates the overlay represented by the reference to the element or
           * element id moving it to the new location, relative to the new placement.
           * @method
           * @param {Element|String} element - A reference to an element or an id for
           *      the element which is overlaid.
           * @param {OpenSeadragon.Point|OpenSeadragon.Rect} location - The point or
           *      rectangle which will be overlaid. This is a viewport relative location.
           * @param {OpenSeadragon.Placement} [placement=OpenSeadragon.Placement.TOP_LEFT] - The position of the
           *      viewport which the location coordinates will be treated as relative
           *      to.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:update-overlay
           */
          updateOverlay: function (element, location, placement) {
            var i

            element = $.getElement(element)
            i = getOverlayIndex(this.currentOverlays, element)

            if (i >= 0) {
              this.currentOverlays[i].update(location, placement)
              THIS[this.hash].forceRedraw = true
              /**
               * Raised when an overlay's location or placement changes
               * (see {@link OpenSeadragon.Viewer#updateOverlay}).
               *
               * @event update-overlay
               * @memberof OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the
               * Viewer which raised the event.
               * @property {Element} element
               * @property {OpenSeadragon.Point|OpenSeadragon.Rect} location
               * @property {OpenSeadragon.Placement} placement
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.raiseEvent('update-overlay', {
                element: element,
                location: location,
                placement: placement,
              })
            }
            return this
          },

          /**
           * Removes an overlay identified by the reference element or element id
           * and schedules an update.
           * @method
           * @param {Element|String} element - A reference to the element or an
           *      element id which represent the ovelay content to be removed.
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:remove-overlay
           */
          removeOverlay: function (element) {
            var i

            element = $.getElement(element)
            i = getOverlayIndex(this.currentOverlays, element)

            if (i >= 0) {
              this.currentOverlays[i].destroy()
              this.currentOverlays.splice(i, 1)
              THIS[this.hash].forceRedraw = true
              /**
               * Raised when an overlay is removed from the viewer
               * (see {@link OpenSeadragon.Viewer#removeOverlay}).
               *
               * @event remove-overlay
               * @memberof OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the
               * Viewer which raised the event.
               * @property {Element} element - The overlay element.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.raiseEvent('remove-overlay', {
                element: element,
              })
            }
            return this
          },

          /**
           * Removes all currently configured Overlays from this Viewer and schedules
           * an update.
           * @method
           * @returns {OpenSeadragon.Viewer} Chainable.
           * @fires OpenSeadragon.Viewer.event:clear-overlay
           */
          clearOverlays: function () {
            while (this.currentOverlays.length > 0) {
              this.currentOverlays.pop().destroy()
            }
            THIS[this.hash].forceRedraw = true
            /**
             * Raised when all overlays are removed from the viewer (see {@link OpenSeadragon.Drawer#clearOverlays}).
             *
             * @event clear-overlay
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('clear-overlay', {})
            return this
          },

          /**
           * Finds an overlay identified by the reference element or element id
           * and returns it as an object, return null if not found.
           * @method
           * @param {Element|String} element - A reference to the element or an
           *      element id which represents the overlay content.
           * @returns {OpenSeadragon.Overlay} the matching overlay or null if none found.
           */
          getOverlayById: function (element) {
            var i

            element = $.getElement(element)
            i = getOverlayIndex(this.currentOverlays, element)

            if (i >= 0) {
              return this.currentOverlays[i]
            } else {
              return null
            }
          },

          /**
           * Updates the sequence buttons.
           * @function OpenSeadragon.Viewer.prototype._updateSequenceButtons
           * @private
           * @param {Number} Sequence Value
           */
          _updateSequenceButtons: function (page) {
            if (this.nextButton) {
              if (!this.tileSources || this.tileSources.length - 1 === page) {
                //Disable next button
                if (!this.navPrevNextWrap) {
                  this.nextButton.disable()
                }
              } else {
                this.nextButton.enable()
              }
            }
            if (this.previousButton) {
              if (page > 0) {
                //Enable previous button
                this.previousButton.enable()
              } else {
                if (!this.navPrevNextWrap) {
                  this.previousButton.disable()
                }
              }
            }
          },

          /**
           * Display a message in the viewport
           * @function OpenSeadragon.Viewer.prototype._showMessage
           * @private
           * @param {String} text message
           */
          _showMessage: function (message) {
            this._hideMessage()

            var div = $.makeNeutralElement('div')
            div.appendChild(document.createTextNode(message))

            this.messageDiv = $.makeCenteredNode(div)

            $.addClass(this.messageDiv, 'openseadragon-message')

            this.container.appendChild(this.messageDiv)
          },

          /**
           * Hide any currently displayed viewport message
           * @function OpenSeadragon.Viewer.prototype._hideMessage
           * @private
           */
          _hideMessage: function () {
            var div = this.messageDiv
            if (div) {
              div.parentNode.removeChild(div)
              delete this.messageDiv
            }
          },

          /**
           * Gets this viewer's gesture settings for the given pointer device type.
           * @method
           * @param {String} type - The pointer device type to get the gesture settings for ("mouse", "touch", "pen", etc.).
           * @returns {OpenSeadragon.GestureSettings}
           */
          gestureSettingsByDeviceType: function (type) {
            switch (type) {
              case 'mouse':
                return this.gestureSettingsMouse
              case 'touch':
                return this.gestureSettingsTouch
              case 'pen':
                return this.gestureSettingsPen
              default:
                return this.gestureSettingsUnknown
            }
          },

          // private
          _drawOverlays: function () {
            var i,
              length = this.currentOverlays.length
            for (i = 0; i < length; i++) {
              this.currentOverlays[i].drawHTML(
                this.overlaysContainer,
                this.viewport
              )
            }
          },

          /**
           * Cancel the "in flight" images.
           */
          _cancelPendingImages: function () {
            this._loadQueue = []
          },

          /**
           * Removes the reference strip and disables displaying it.
           * @function
           */
          removeReferenceStrip: function () {
            this.showReferenceStrip = false

            if (this.referenceStrip) {
              this.referenceStrip.destroy()
              this.referenceStrip = null
            }
          },

          /**
           * Enables and displays the reference strip based on the currently set tileSources.
           * Works only when the Viewer has sequenceMode set to true.
           * @function
           */
          addReferenceStrip: function () {
            this.showReferenceStrip = true

            if (this.sequenceMode) {
              if (this.referenceStrip) {
                return
              }

              if (this.tileSources.length && this.tileSources.length > 1) {
                this.referenceStrip = new $.ReferenceStrip({
                  id: this.referenceStripElement,
                  position: this.referenceStripPosition,
                  sizeRatio: this.referenceStripSizeRatio,
                  scroll: this.referenceStripScroll,
                  height: this.referenceStripHeight,
                  width: this.referenceStripWidth,
                  tileSources: this.tileSources,
                  prefixUrl: this.prefixUrl,
                  useCanvas: this.useCanvas,
                  viewer: this,
                })

                this.referenceStrip.setFocus(this._sequenceIndex)
              }
            } else {
              $.console.warn(
                'Attempting to display a reference strip while "sequenceMode" is off.'
              )
            }
          },

          /**
           * Adds _updatePixelDensityRatio to the window resize event.
           * @private
           */
          _addUpdatePixelDensityRatioEvent: function () {
            this._updatePixelDensityRatioBind =
              this._updatePixelDensityRatio.bind(this)
            $.addEvent(window, 'resize', this._updatePixelDensityRatioBind)
          },

          /**
           * Removes _updatePixelDensityRatio from the window resize event.
           * @private
           */
          _removeUpdatePixelDensityRatioEvent: function () {
            $.removeEvent(window, 'resize', this._updatePixelDensityRatioBind)
          },

          /**
           * Update pixel density ratio, clears all tiles and triggers updates for
           * all items if the ratio has changed.
           * @private
           */
          _updatePixelDensityRatio: function () {
            var previusPixelDensityRatio = $.pixelDensityRatio
            var currentPixelDensityRatio = $.getCurrentPixelDensityRatio()
            if (previusPixelDensityRatio !== currentPixelDensityRatio) {
              $.pixelDensityRatio = currentPixelDensityRatio
              this.world.resetItems()
              this.forceRedraw()
            }
          },

          /**
           * Sets the image source to the source with index equal to
           * currentIndex - 1. Changes current image in sequence mode.
           * If specified, wraps around (see navPrevNextWrap in
           * {@link OpenSeadragon.Options})
           *
           * @method
           */

          goToPreviousPage: function () {
            var previous = this._sequenceIndex - 1
            if (this.navPrevNextWrap && previous < 0) {
              previous += this.tileSources.length
            }
            this.goToPage(previous)
          },

          /**
           * Sets the image source to the source with index equal to
           * currentIndex + 1. Changes current image in sequence mode.
           * If specified, wraps around (see navPrevNextWrap in
           * {@link OpenSeadragon.Options})
           *
           * @method
           */
          goToNextPage: function () {
            var next = this._sequenceIndex + 1
            if (this.navPrevNextWrap && next >= this.tileSources.length) {
              next = 0
            }
            this.goToPage(next)
          },

          isAnimating: function () {
            return THIS[this.hash].animating
          },
        }
      )

      /**
       * _getSafeElemSize is like getElementSize(), but refuses to return 0 for x or y,
       * which was causing some calling operations to return NaN.
       * @returns {Point}
       * @private
       */
      function _getSafeElemSize(oElement) {
        oElement = $.getElement(oElement)

        return new $.Point(
          oElement.clientWidth === 0 ? 1 : oElement.clientWidth,
          oElement.clientHeight === 0 ? 1 : oElement.clientHeight
        )
      }

      /**
       * @function
       * @private
       */
      function getTileSourceImplementation(
        viewer,
        tileSource,
        imgOptions,
        successCallback,
        failCallback
      ) {
        var _this = viewer

        //allow plain xml strings or json strings to be parsed here
        if ($.type(tileSource) === 'string') {
          //xml should start with "<" and end with ">"
          if (tileSource.match(/^\s*<.*>\s*$/)) {
            tileSource = $.parseXml(tileSource)
            //json should start with "{" or "[" and end with "}" or "]"
          } else if (tileSource.match(/^\s*[{[].*[}\]]\s*$/)) {
            try {
              var tileSourceJ = $.parseJSON(tileSource)
              tileSource = tileSourceJ
            } catch (e) {
              //tileSource = tileSource;
            }
          }
        }

        function waitUntilReady(tileSource, originalTileSource) {
          if (tileSource.ready) {
            successCallback(tileSource)
          } else {
            tileSource.addHandler('ready', function () {
              successCallback(tileSource)
            })
            tileSource.addHandler('open-failed', function (event) {
              failCallback({
                message: event.message,
                source: originalTileSource,
              })
            })
          }
        }

        setTimeout(function () {
          if ($.type(tileSource) === 'string') {
            //If its still a string it means it must be a url at this point
            tileSource = new $.TileSource({
              url: tileSource,
              crossOriginPolicy:
                imgOptions.crossOriginPolicy !== undefined
                  ? imgOptions.crossOriginPolicy
                  : viewer.crossOriginPolicy,
              ajaxWithCredentials: viewer.ajaxWithCredentials,
              ajaxHeaders: imgOptions.ajaxHeaders
                ? imgOptions.ajaxHeaders
                : viewer.ajaxHeaders,
              splitHashDataForPost: viewer.splitHashDataForPost,
              useCanvas: viewer.useCanvas,
              success: function (event) {
                successCallback(event.tileSource)
              },
            })
            tileSource.addHandler('open-failed', function (event) {
              failCallback(event)
            })
          } else if ($.isPlainObject(tileSource) || tileSource.nodeType) {
            if (
              tileSource.crossOriginPolicy === undefined &&
              (imgOptions.crossOriginPolicy !== undefined ||
                viewer.crossOriginPolicy !== undefined)
            ) {
              tileSource.crossOriginPolicy =
                imgOptions.crossOriginPolicy !== undefined
                  ? imgOptions.crossOriginPolicy
                  : viewer.crossOriginPolicy
            }
            if (tileSource.ajaxWithCredentials === undefined) {
              tileSource.ajaxWithCredentials = viewer.ajaxWithCredentials
            }
            if (tileSource.useCanvas === undefined) {
              tileSource.useCanvas = viewer.useCanvas
            }

            if ($.isFunction(tileSource.getTileUrl)) {
              //Custom tile source
              var customTileSource = new $.TileSource(tileSource)
              customTileSource.getTileUrl = tileSource.getTileUrl
              successCallback(customTileSource)
            } else {
              //inline configuration
              var $TileSource = $.TileSource.determineType(_this, tileSource)
              if (!$TileSource) {
                failCallback({
                  message: 'Unable to load TileSource',
                  source: tileSource,
                })
                return
              }
              var options = $TileSource.prototype.configure.apply(_this, [
                tileSource,
              ])
              waitUntilReady(new $TileSource(options), tileSource)
            }
          } else {
            //can assume it's already a tile source implementation
            waitUntilReady(tileSource, tileSource)
          }
        })
      }

      function getOverlayObject(viewer, overlay) {
        if (overlay instanceof $.Overlay) {
          return overlay
        }

        var element = null
        if (overlay.element) {
          element = $.getElement(overlay.element)
        } else {
          var id = overlay.id
            ? overlay.id
            : 'openseadragon-overlay-' + Math.floor(Math.random() * 10000000)

          element = $.getElement(overlay.id)
          if (!element) {
            element = document.createElement('a')
            element.href = '#/overlay/' + id
          }
          element.id = id
          $.addClass(
            element,
            overlay.className ? overlay.className : 'openseadragon-overlay'
          )
        }

        var location = overlay.location
        var width = overlay.width
        var height = overlay.height
        if (!location) {
          var x = overlay.x
          var y = overlay.y
          if (overlay.px !== undefined) {
            var rect = viewer.viewport.imageToViewportRectangle(
              new $.Rect(overlay.px, overlay.py, width || 0, height || 0)
            )
            x = rect.x
            y = rect.y
            width = width !== undefined ? rect.width : undefined
            height = height !== undefined ? rect.height : undefined
          }
          location = new $.Point(x, y)
        }

        var placement = overlay.placement
        if (placement && $.type(placement) === 'string') {
          placement = $.Placement[overlay.placement.toUpperCase()]
        }

        return new $.Overlay({
          element: element,
          location: location,
          placement: placement,
          onDraw: overlay.onDraw,
          checkResize: overlay.checkResize,
          width: width,
          height: height,
          rotationMode: overlay.rotationMode,
        })
      }

      /**
       * @private
       * @inner
       * Determines the index of the given overlay in the given overlays array.
       */
      function getOverlayIndex(overlays, element) {
        var i
        for (i = overlays.length - 1; i >= 0; i--) {
          if (overlays[i].element === element) {
            return i
          }
        }

        return -1
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Schedulers provide the general engine for animation
      ///////////////////////////////////////////////////////////////////////////////
      function scheduleUpdate(viewer, updateFunc) {
        return $.requestAnimationFrame(function () {
          updateFunc(viewer)
        })
      }

      //provides a sequence in the fade animation
      function scheduleControlsFade(viewer) {
        $.requestAnimationFrame(function () {
          updateControlsFade(viewer)
        })
      }

      //initiates an animation to hide the controls
      function beginControlsAutoHide(viewer) {
        if (!viewer.autoHideControls) {
          return
        }
        viewer.controlsShouldFade = true
        viewer.controlsFadeBeginTime = $.now() + viewer.controlsFadeDelay

        window.setTimeout(function () {
          scheduleControlsFade(viewer)
        }, viewer.controlsFadeDelay)
      }

      //determines if fade animation is done or continues the animation
      function updateControlsFade(viewer) {
        var currentTime, deltaTime, opacity, i
        if (viewer.controlsShouldFade) {
          currentTime = $.now()
          deltaTime = currentTime - viewer.controlsFadeBeginTime
          opacity = 1.0 - deltaTime / viewer.controlsFadeLength

          opacity = Math.min(1.0, opacity)
          opacity = Math.max(0.0, opacity)

          for (i = viewer.controls.length - 1; i >= 0; i--) {
            if (viewer.controls[i].autoFade) {
              viewer.controls[i].setOpacity(opacity)
            }
          }

          if (opacity > 0) {
            // fade again
            scheduleControlsFade(viewer)
          }
        }
      }

      //stop the fade animation on the controls and show them
      function abortControlsAutoHide(viewer) {
        var i
        viewer.controlsShouldFade = false
        for (i = viewer.controls.length - 1; i >= 0; i--) {
          viewer.controls[i].setOpacity(1.0)
        }
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Default view event handlers.
      ///////////////////////////////////////////////////////////////////////////////
      function onFocus() {
        abortControlsAutoHide(this)
      }

      function onBlur() {
        beginControlsAutoHide(this)
      }

      function onCanvasContextMenu(event) {
        var eventArgs = {
          tracker: event.eventSource,
          position: event.position,
          originalEvent: event.originalEvent,
          preventDefault: event.preventDefault,
        }

        /**
         * Raised when a contextmenu event occurs in the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-contextmenu
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefault - Set to true to prevent the default user-agent's handling of the contextmenu event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-contextmenu', eventArgs)

        event.preventDefault = eventArgs.preventDefault
      }

      function onCanvasKeyDown(event) {
        var canvasKeyDownEventArgs = {
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
          preventVerticalPan: event.preventVerticalPan || !this.panVertical,
          preventHorizontalPan:
            event.preventHorizontalPan || !this.panHorizontal,
        }

        /**
         * Raised when a keyboard key is pressed and the focus is on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-key
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default keyboard behaviour. Default: false.
         * @property {Boolean} preventVerticalPan - Set to true to prevent keyboard vertical panning. Default: false.
         * @property {Boolean} preventHorizontalPan - Set to true to prevent keyboard horizontal panning. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */

        this.raiseEvent('canvas-key', canvasKeyDownEventArgs)

        if (
          !canvasKeyDownEventArgs.preventDefaultAction &&
          !event.ctrl &&
          !event.alt &&
          !event.meta
        ) {
          switch (event.keyCode) {
            case 38: //up arrow
              if (!canvasKeyDownEventArgs.preventVerticalPan) {
                if (event.shift) {
                  this.viewport.zoomBy(1.1)
                } else {
                  this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(
                      new $.Point(0, -this.pixelsPerArrowPress)
                    )
                  )
                }
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 40: //down arrow
              if (!canvasKeyDownEventArgs.preventVerticalPan) {
                if (event.shift) {
                  this.viewport.zoomBy(0.9)
                } else {
                  this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(
                      new $.Point(0, this.pixelsPerArrowPress)
                    )
                  )
                }
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 37: //left arrow
              if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                this.viewport.panBy(
                  this.viewport.deltaPointsFromPixels(
                    new $.Point(-this.pixelsPerArrowPress, 0)
                  )
                )
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 39: //right arrow
              if (!canvasKeyDownEventArgs.preventHorizontalPan) {
                this.viewport.panBy(
                  this.viewport.deltaPointsFromPixels(
                    new $.Point(this.pixelsPerArrowPress, 0)
                  )
                )
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            default:
              //console.log( 'navigator keycode %s', event.keyCode );
              event.preventDefault = false
              break
          }
        } else {
          event.preventDefault = false
        }
      }
      function onCanvasKeyPress(event) {
        var canvasKeyPressEventArgs = {
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
          preventVerticalPan: event.preventVerticalPan || !this.panVertical,
          preventHorizontalPan:
            event.preventHorizontalPan || !this.panHorizontal,
        }

        // This event is documented in onCanvasKeyDown
        this.raiseEvent('canvas-key', canvasKeyPressEventArgs)

        if (
          !canvasKeyPressEventArgs.preventDefaultAction &&
          !event.ctrl &&
          !event.alt &&
          !event.meta
        ) {
          switch (event.keyCode) {
            case 43: //=|+
            case 61: //=|+
              this.viewport.zoomBy(1.1)
              this.viewport.applyConstraints()
              event.preventDefault = true
              break
            case 45: //-|_
              this.viewport.zoomBy(0.9)
              this.viewport.applyConstraints()
              event.preventDefault = true
              break
            case 48: //0|)
              this.viewport.goHome()
              this.viewport.applyConstraints()
              event.preventDefault = true
              break
            case 119: //w
            case 87: //W
              if (!canvasKeyPressEventArgs.preventVerticalPan) {
                if (event.shift) {
                  this.viewport.zoomBy(1.1)
                } else {
                  this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(new $.Point(0, -40))
                  )
                }
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 115: //s
            case 83: //S
              if (!canvasKeyPressEventArgs.preventVerticalPan) {
                if (event.shift) {
                  this.viewport.zoomBy(0.9)
                } else {
                  this.viewport.panBy(
                    this.viewport.deltaPointsFromPixels(new $.Point(0, 40))
                  )
                }
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 97: //a
              if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                this.viewport.panBy(
                  this.viewport.deltaPointsFromPixels(new $.Point(-40, 0))
                )
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 100: //d
              if (!canvasKeyPressEventArgs.preventHorizontalPan) {
                this.viewport.panBy(
                  this.viewport.deltaPointsFromPixels(new $.Point(40, 0))
                )
                this.viewport.applyConstraints()
              }
              event.preventDefault = true
              break
            case 114: //r - clockwise rotation
              if (this.viewport.flipped) {
                this.viewport.setRotation(
                  this.viewport.getRotation() - this.rotationIncrement
                )
              } else {
                this.viewport.setRotation(
                  this.viewport.getRotation() + this.rotationIncrement
                )
              }
              this.viewport.applyConstraints()
              event.preventDefault = true
              break
            case 82: //R - counterclockwise  rotation
              if (this.viewport.flipped) {
                this.viewport.setRotation(
                  this.viewport.getRotation() + this.rotationIncrement
                )
              } else {
                this.viewport.setRotation(
                  this.viewport.getRotation() - this.rotationIncrement
                )
              }
              this.viewport.applyConstraints()
              event.preventDefault = true
              break
            case 102: //f
              this.viewport.toggleFlip()
              event.preventDefault = true
              break
            case 106: //j - previous image source
              this.goToPreviousPage()
              break
            case 107: //k - next image source
              this.goToNextPage()
              break
            default:
              // console.log( 'navigator keycode %s', event.keyCode );
              event.preventDefault = false
              break
          }
        } else {
          event.preventDefault = false
        }
      }

      function onCanvasClick(event) {
        var gestureSettings

        var haveKeyboardFocus = document.activeElement === this.canvas

        // If we don't have keyboard focus, request it.
        if (!haveKeyboardFocus) {
          this.canvas.focus()
        }
        if (this.viewport.flipped) {
          event.position.x =
            this.viewport.getContainerSize().x - event.position.x
        }

        var canvasClickEventArgs = {
          tracker: event.eventSource,
          position: event.position,
          quick: event.quick,
          shift: event.shift,
          originalEvent: event.originalEvent,
          originalTarget: event.originalTarget,
          preventDefaultAction: false,
        }

        /**
         * Raised when a mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-click
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Element} originalTarget - The DOM element clicked on.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default click to zoom behaviour. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */

        this.raiseEvent('canvas-click', canvasClickEventArgs)

        if (
          !canvasClickEventArgs.preventDefaultAction &&
          this.viewport &&
          event.quick
        ) {
          gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)

          if (gestureSettings.clickToZoom === true) {
            this.viewport.zoomBy(
              event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
              gestureSettings.zoomToRefPoint
                ? this.viewport.pointFromPixel(event.position, true)
                : null
            )
            this.viewport.applyConstraints()
          }

          if (gestureSettings.dblClickDragToZoom) {
            if (THIS[this.hash].draggingToZoom === true) {
              THIS[this.hash].lastClickTime = null
              THIS[this.hash].draggingToZoom = false
            } else {
              THIS[this.hash].lastClickTime = $.now()
            }
          }
        }
      }

      function onCanvasDblClick(event) {
        var gestureSettings

        var canvasDblClickEventArgs = {
          tracker: event.eventSource,
          position: event.position,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
        }

        /**
         * Raised when a double mouse press/release or touch/remove occurs on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-double-click
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default double tap to zoom behaviour. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-double-click', canvasDblClickEventArgs)

        if (!canvasDblClickEventArgs.preventDefaultAction && this.viewport) {
          gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)
          if (gestureSettings.dblClickToZoom) {
            this.viewport.zoomBy(
              event.shift ? 1.0 / this.zoomPerClick : this.zoomPerClick,
              gestureSettings.zoomToRefPoint
                ? this.viewport.pointFromPixel(event.position, true)
                : null
            )
            this.viewport.applyConstraints()
          }
        }
      }

      function onCanvasDrag(event) {
        var gestureSettings

        var canvasDragEventArgs = {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          delta: event.delta,
          speed: event.speed,
          direction: event.direction,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
        }

        /**
         * Raised when a mouse or touch drag operation occurs on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-drag
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.
         * @property {Number} speed - Current computed speed, in pixels per second.
         * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default drag to pan behaviour. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-drag', canvasDragEventArgs)

        gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)

        if (!canvasDragEventArgs.preventDefaultAction && this.viewport) {
          if (
            gestureSettings.dblClickDragToZoom &&
            THIS[this.hash].draggingToZoom
          ) {
            var factor = Math.pow(this.zoomPerDblClickDrag, event.delta.y / 50)
            this.viewport.zoomBy(factor)
          } else if (
            gestureSettings.dragToPan &&
            !THIS[this.hash].draggingToZoom
          ) {
            if (!this.panHorizontal) {
              event.delta.x = 0
            }
            if (!this.panVertical) {
              event.delta.y = 0
            }
            if (this.viewport.flipped) {
              event.delta.x = -event.delta.x
            }

            if (this.constrainDuringPan) {
              var delta = this.viewport.deltaPointsFromPixels(
                event.delta.negate()
              )

              this.viewport.centerSpringX.target.value += delta.x
              this.viewport.centerSpringY.target.value += delta.y

              var constrainedBounds = this.viewport.getConstrainedBounds()

              this.viewport.centerSpringX.target.value -= delta.x
              this.viewport.centerSpringY.target.value -= delta.y

              if (constrainedBounds.xConstrained) {
                event.delta.x = 0
              }

              if (constrainedBounds.yConstrained) {
                event.delta.y = 0
              }
            }
            this.viewport.panBy(
              this.viewport.deltaPointsFromPixels(event.delta.negate()),
              gestureSettings.flickEnabled && !this.constrainDuringPan
            )
          }
        }
      }

      function onCanvasDragEnd(event) {
        var gestureSettings
        var canvasDragEndEventArgs = {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          speed: event.speed,
          direction: event.direction,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
        }

        /**
         * Raised when a mouse or touch drag operation ends on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-drag-end
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} speed - Speed at the end of a drag gesture, in pixels per second.
         * @property {Number} direction - Direction at the end of a drag gesture, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default drag-end flick behaviour. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-drag-end', canvasDragEndEventArgs)

        gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)

        if (!canvasDragEndEventArgs.preventDefaultAction && this.viewport) {
          if (
            !THIS[this.hash].draggingToZoom &&
            gestureSettings.flickEnabled &&
            event.speed >= gestureSettings.flickMinSpeed
          ) {
            var amplitudeX = 0
            if (this.panHorizontal) {
              amplitudeX =
                gestureSettings.flickMomentum *
                event.speed *
                Math.cos(event.direction)
            }
            var amplitudeY = 0
            if (this.panVertical) {
              amplitudeY =
                gestureSettings.flickMomentum *
                event.speed *
                Math.sin(event.direction)
            }
            var center = this.viewport.pixelFromPoint(
              this.viewport.getCenter(true)
            )
            var target = this.viewport.pointFromPixel(
              new $.Point(center.x - amplitudeX, center.y - amplitudeY)
            )
            this.viewport.panTo(target, false)
          }
          this.viewport.applyConstraints()
        }

        if (
          gestureSettings.dblClickDragToZoom &&
          THIS[this.hash].draggingToZoom === true
        ) {
          THIS[this.hash].draggingToZoom = false
        }
      }

      function onCanvasEnter(event) {
        /**
         * Raised when a pointer enters the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-enter
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-enter', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          buttons: event.buttons,
          pointers: event.pointers,
          insideElementPressed: event.insideElementPressed,
          buttonDownAny: event.buttonDownAny,
          originalEvent: event.originalEvent,
        })
      }

      function onCanvasLeave(event) {
        /**
         * Raised when a pointer leaves the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-exit
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-exit', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          buttons: event.buttons,
          pointers: event.pointers,
          insideElementPressed: event.insideElementPressed,
          buttonDownAny: event.buttonDownAny,
          originalEvent: event.originalEvent,
        })
      }

      function onCanvasPress(event) {
        var gestureSettings

        /**
         * Raised when the primary mouse button is pressed or touch starts on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-press
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-press', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          insideElementPressed: event.insideElementPressed,
          insideElementReleased: event.insideElementReleased,
          originalEvent: event.originalEvent,
        })

        gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)
        if (gestureSettings.dblClickDragToZoom) {
          var lastClickTime = THIS[this.hash].lastClickTime
          var currClickTime = $.now()

          if (lastClickTime === null) {
            return
          }

          if (currClickTime - lastClickTime < this.dblClickTimeThreshold) {
            THIS[this.hash].draggingToZoom = true
          }

          THIS[this.hash].lastClickTime = null
        }
      }

      function onCanvasRelease(event) {
        /**
         * Raised when the primary mouse button is released or touch ends on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-release
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} insideElementReleased - True if the cursor still inside the tracked element when the button was released.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-release', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          insideElementPressed: event.insideElementPressed,
          insideElementReleased: event.insideElementReleased,
          originalEvent: event.originalEvent,
        })
      }

      function onCanvasNonPrimaryPress(event) {
        /**
         * Raised when any non-primary pointer button is pressed on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-nonprimary-press
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {Number} button - Button which caused the event.
         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
         * @property {Number} buttons - Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-nonprimary-press', {
          tracker: event.eventSource,
          position: event.position,
          pointerType: event.pointerType,
          button: event.button,
          buttons: event.buttons,
          originalEvent: event.originalEvent,
        })
      }

      function onCanvasNonPrimaryRelease(event) {
        /**
         * Raised when any non-primary pointer button is released on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-nonprimary-release
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {Number} button - Button which caused the event.
         *      -1: none, 0: primary/left, 1: aux/middle, 2: secondary/right, 3: X1/back, 4: X2/forward, 5: pen eraser.
         * @property {Number} buttons - Current buttons pressed.
         *      Combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-nonprimary-release', {
          tracker: event.eventSource,
          position: event.position,
          pointerType: event.pointerType,
          button: event.button,
          buttons: event.buttons,
          originalEvent: event.originalEvent,
        })
      }

      function onCanvasPinch(event) {
        var gestureSettings, centerPt, lastCenterPt, panByPt

        var canvasPinchEventArgs = {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          gesturePoints: event.gesturePoints,
          lastCenter: event.lastCenter,
          center: event.center,
          lastDistance: event.lastDistance,
          distance: event.distance,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultPanAction: false,
          preventDefaultZoomAction: false,
          preventDefaultRotateAction: false,
        }

        /**
         * Raised when a pinch event occurs on the {@link OpenSeadragon.Viewer#canvas} element.
         *
         * @event canvas-pinch
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {Array.<OpenSeadragon.MouseTracker.GesturePoint>} gesturePoints - Gesture points associated with the gesture. Velocity data can be found here.
         * @property {OpenSeadragon.Point} lastCenter - The previous center point of the two pinch contact points relative to the tracked element.
         * @property {OpenSeadragon.Point} center - The center point of the two pinch contact points relative to the tracked element.
         * @property {Number} lastDistance - The previous distance between the two pinch contact points in CSS pixels.
         * @property {Number} distance - The distance between the two pinch contact points in CSS pixels.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefaultPanAction - Set to true to prevent default pinch to pan behaviour. Default: false.
         * @property {Boolean} preventDefaultZoomAction - Set to true to prevent default pinch to zoom behaviour. Default: false.
         * @property {Boolean} preventDefaultRotateAction - Set to true to prevent default pinch to rotate behaviour. Default: false.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('canvas-pinch', canvasPinchEventArgs)

        if (this.viewport) {
          gestureSettings = this.gestureSettingsByDeviceType(event.pointerType)
          if (
            gestureSettings.pinchToZoom &&
            (!canvasPinchEventArgs.preventDefaultPanAction ||
              !canvasPinchEventArgs.preventDefaultZoomAction)
          ) {
            centerPt = this.viewport.pointFromPixel(event.center, true)
            if (
              gestureSettings.zoomToRefPoint &&
              !canvasPinchEventArgs.preventDefaultPanAction
            ) {
              lastCenterPt = this.viewport.pointFromPixel(
                event.lastCenter,
                true
              )
              panByPt = lastCenterPt.minus(centerPt)
              if (!this.panHorizontal) {
                panByPt.x = 0
              }
              if (!this.panVertical) {
                panByPt.y = 0
              }
              this.viewport.panBy(panByPt, true)
            }
            if (!canvasPinchEventArgs.preventDefaultZoomAction) {
              this.viewport.zoomBy(
                event.distance / event.lastDistance,
                centerPt,
                true
              )
            }
            this.viewport.applyConstraints()
          }
          if (
            gestureSettings.pinchRotate &&
            !canvasPinchEventArgs.preventDefaultRotateAction
          ) {
            // Pinch rotate
            var angle1 = Math.atan2(
              event.gesturePoints[0].currentPos.y -
                event.gesturePoints[1].currentPos.y,
              event.gesturePoints[0].currentPos.x -
                event.gesturePoints[1].currentPos.x
            )
            var angle2 = Math.atan2(
              event.gesturePoints[0].lastPos.y -
                event.gesturePoints[1].lastPos.y,
              event.gesturePoints[0].lastPos.x -
                event.gesturePoints[1].lastPos.x
            )
            this.viewport.setRotation(
              this.viewport.getRotation() + (angle1 - angle2) * (180 / Math.PI)
            )
          }
        }
      }

      function onCanvasScroll(event) {
        var canvasScrollEventArgs,
          gestureSettings,
          factor,
          thisScrollTime,
          deltaScrollTime

        /* Certain scroll devices fire the scroll event way too fast so we are injecting a simple adjustment to keep things
         * partially normalized. If we have already fired an event within the last 'minScrollDelta' milliseconds we skip
         * this one and wait for the next event. */
        thisScrollTime = $.now()
        deltaScrollTime = thisScrollTime - this._lastScrollTime
        if (deltaScrollTime > this.minScrollDeltaTime) {
          this._lastScrollTime = thisScrollTime

          canvasScrollEventArgs = {
            tracker: event.eventSource,
            position: event.position,
            scroll: event.scroll,
            shift: event.shift,
            originalEvent: event.originalEvent,
            preventDefaultAction: false,
            preventDefault: true,
          }

          /**
           * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#canvas} element (mouse wheel).
           *
           * @event canvas-scroll
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
           * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
           * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
           * @property {Number} scroll - The scroll delta for the event.
           * @property {Boolean} shift - True if the shift key was pressed during this event.
           * @property {Object} originalEvent - The original DOM event.
           * @property {Boolean} preventDefaultAction - Set to true to prevent default scroll to zoom behaviour. Default: false.
           * @property {Boolean} preventDefault - Set to true to prevent the default user-agent's handling of the wheel event. Default: true.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          this.raiseEvent('canvas-scroll', canvasScrollEventArgs)

          if (!canvasScrollEventArgs.preventDefaultAction && this.viewport) {
            if (this.viewport.flipped) {
              event.position.x =
                this.viewport.getContainerSize().x - event.position.x
            }

            gestureSettings = this.gestureSettingsByDeviceType(
              event.pointerType
            )
            if (gestureSettings.scrollToZoom) {
              factor = Math.pow(this.zoomPerScroll, event.scroll)
              this.viewport.zoomBy(
                factor,
                gestureSettings.zoomToRefPoint
                  ? this.viewport.pointFromPixel(event.position, true)
                  : null
              )
              this.viewport.applyConstraints()
            }
          }

          event.preventDefault = canvasScrollEventArgs.preventDefault
        } else {
          event.preventDefault = true
        }
      }

      function onContainerEnter(event) {
        THIS[this.hash].mouseInside = true
        abortControlsAutoHide(this)
        /**
         * Raised when the cursor enters the {@link OpenSeadragon.Viewer#container} element.
         *
         * @event container-enter
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('container-enter', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          buttons: event.buttons,
          pointers: event.pointers,
          insideElementPressed: event.insideElementPressed,
          buttonDownAny: event.buttonDownAny,
          originalEvent: event.originalEvent,
        })
      }

      function onContainerLeave(event) {
        if (event.pointers < 1) {
          THIS[this.hash].mouseInside = false
          if (!THIS[this.hash].animating) {
            beginControlsAutoHide(this)
          }
        }
        /**
         * Raised when the cursor leaves the {@link OpenSeadragon.Viewer#container} element.
         *
         * @event container-exit
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {String} pointerType - "mouse", "touch", "pen", etc.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} buttons - Current buttons pressed. A combination of bit flags 0: none, 1: primary (or touch contact), 2: secondary, 4: aux (often middle), 8: X1 (often back), 16: X2 (often forward), 32: pen eraser.
         * @property {Number} pointers - Number of pointers (all types) active in the tracked element.
         * @property {Boolean} insideElementPressed - True if the left mouse button is currently being pressed and was initiated inside the tracked element, otherwise false.
         * @property {Boolean} buttonDownAny - Was the button down anywhere in the screen during the event. <span style="color:red;">Deprecated. Use buttons instead.</span>
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.raiseEvent('container-exit', {
          tracker: event.eventSource,
          pointerType: event.pointerType,
          position: event.position,
          buttons: event.buttons,
          pointers: event.pointers,
          insideElementPressed: event.insideElementPressed,
          buttonDownAny: event.buttonDownAny,
          originalEvent: event.originalEvent,
        })
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Page update routines ( aka Views - for future reference )
      ///////////////////////////////////////////////////////////////////////////////

      function updateMulti(viewer) {
        updateOnce(viewer)

        // Request the next frame, unless we've been closed
        if (viewer.isOpen()) {
          viewer._updateRequestId = scheduleUpdate(viewer, updateMulti)
        } else {
          viewer._updateRequestId = false
        }
      }

      function doViewerResize(viewer, containerSize) {
        var viewport = viewer.viewport
        var zoom = viewport.getZoom()
        var center = viewport.getCenter()
        viewport.resize(containerSize, viewer.preserveImageSizeOnResize)
        viewport.panTo(center, true)
        var resizeRatio
        if (viewer.preserveImageSizeOnResize) {
          resizeRatio = THIS[viewer.hash].prevContainerSize.x / containerSize.x
        } else {
          var origin = new $.Point(0, 0)
          var prevDiag = new $.Point(
            THIS[viewer.hash].prevContainerSize.x,
            THIS[viewer.hash].prevContainerSize.y
          ).distanceTo(origin)
          var newDiag = new $.Point(
            containerSize.x,
            containerSize.y
          ).distanceTo(origin)
          resizeRatio =
            ((newDiag / prevDiag) * THIS[viewer.hash].prevContainerSize.x) /
            containerSize.x
        }
        viewport.zoomTo(zoom * resizeRatio, null, true)
        THIS[viewer.hash].prevContainerSize = containerSize
        THIS[viewer.hash].forceRedraw = true
        THIS[viewer.hash].needsResize = false
        THIS[viewer.hash].forceResize = false
      }
      function updateOnce(viewer) {
        //viewer.profiler.beginUpdate();

        if (viewer._opening || !THIS[viewer.hash]) {
          return
        }
        if (viewer.autoResize || THIS[viewer.hash].forceResize) {
          var containerSize
          if (viewer._autoResizePolling) {
            containerSize = _getSafeElemSize(viewer.container)
            var prevContainerSize = THIS[viewer.hash].prevContainerSize
            if (!containerSize.equals(prevContainerSize)) {
              THIS[viewer.hash].needsResize = true
            }
          }
          if (THIS[viewer.hash].needsResize) {
            doViewerResize(
              viewer,
              containerSize || _getSafeElemSize(viewer.container)
            )
          }
        }

        var viewportChange = viewer.viewport.update()
        var animated = viewer.world.update() || viewportChange

        if (viewportChange) {
          /**
           * Raised when any spring animation update occurs (zoom, pan, etc.),
           * before the viewer has drawn the new location.
           *
           * @event viewport-change
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          viewer.raiseEvent('viewport-change')
        }

        if (viewer.referenceStrip) {
          animated = viewer.referenceStrip.update(viewer.viewport) || animated
        }

        var currentAnimating = THIS[viewer.hash].animating

        if (!currentAnimating && animated) {
          /**
           * Raised when any spring animation starts (zoom, pan, etc.).
           *
           * @event animation-start
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          viewer.raiseEvent('animation-start')
          abortControlsAutoHide(viewer)
        }

        var isAnimationFinished = currentAnimating && !animated

        if (isAnimationFinished) {
          THIS[viewer.hash].animating = false
        }

        if (
          animated ||
          isAnimationFinished ||
          THIS[viewer.hash].forceRedraw ||
          viewer.world.needsDraw()
        ) {
          drawWorld(viewer)
          viewer._drawOverlays()
          if (viewer.navigator) {
            viewer.navigator.update(viewer.viewport)
          }

          THIS[viewer.hash].forceRedraw = false

          if (animated) {
            /**
             * Raised when any spring animation update occurs (zoom, pan, etc.),
             * after the viewer has drawn the new location.
             *
             * @event animation
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            viewer.raiseEvent('animation')
          }
        }

        if (isAnimationFinished) {
          /**
           * Raised when any spring animation ends (zoom, pan, etc.).
           *
           * @event animation-finish
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          viewer.raiseEvent('animation-finish')

          if (!THIS[viewer.hash].mouseInside) {
            beginControlsAutoHide(viewer)
          }
        }

        THIS[viewer.hash].animating = animated

        //viewer.profiler.endUpdate();
      }

      function drawWorld(viewer) {
        viewer.imageLoader.clear()
        viewer.drawer.clear()
        viewer.world.draw()

        /**
         * <em>- Needs documentation -</em>
         *
         * @event update-viewport
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        viewer.raiseEvent('update-viewport', {})
      }

      ///////////////////////////////////////////////////////////////////////////////
      // Navigation Controls
      ///////////////////////////////////////////////////////////////////////////////
      function resolveUrl(prefix, url) {
        return prefix ? prefix + url : url
      }

      function beginZoomingIn() {
        THIS[this.hash].lastZoomTime = $.now()
        THIS[this.hash].zoomFactor = this.zoomPerSecond
        THIS[this.hash].zooming = true
        scheduleZoom(this)
      }

      function beginZoomingOut() {
        THIS[this.hash].lastZoomTime = $.now()
        THIS[this.hash].zoomFactor = 1.0 / this.zoomPerSecond
        THIS[this.hash].zooming = true
        scheduleZoom(this)
      }

      function endZooming() {
        THIS[this.hash].zooming = false
      }

      function scheduleZoom(viewer) {
        $.requestAnimationFrame($.delegate(viewer, doZoom))
      }

      function doZoom() {
        var currentTime, deltaTime, adjustedFactor

        if (THIS[this.hash].zooming && this.viewport) {
          currentTime = $.now()
          deltaTime = currentTime - THIS[this.hash].lastZoomTime
          adjustedFactor = Math.pow(
            THIS[this.hash].zoomFactor,
            deltaTime / 1000
          )

          this.viewport.zoomBy(adjustedFactor)
          this.viewport.applyConstraints()
          THIS[this.hash].lastZoomTime = currentTime
          scheduleZoom(this)
        }
      }

      function doSingleZoomIn() {
        if (this.viewport) {
          THIS[this.hash].zooming = false
          this.viewport.zoomBy(this.zoomPerClick / 1.0)
          this.viewport.applyConstraints()
        }
      }

      function doSingleZoomOut() {
        if (this.viewport) {
          THIS[this.hash].zooming = false
          this.viewport.zoomBy(1.0 / this.zoomPerClick)
          this.viewport.applyConstraints()
        }
      }

      function lightUp() {
        if (this.buttonGroup) {
          this.buttonGroup.emulateEnter()
          this.buttonGroup.emulateLeave()
        }
      }

      function onHome() {
        if (this.viewport) {
          this.viewport.goHome()
        }
      }

      function onFullScreen() {
        if (this.isFullPage() && !$.isFullScreen()) {
          // Is fullPage but not fullScreen
          this.setFullPage(false)
        } else {
          this.setFullScreen(!this.isFullPage())
        }
        // correct for no mouseout event on change
        if (this.buttonGroup) {
          this.buttonGroup.emulateLeave()
        }
        this.fullPageButton.element.focus()
        if (this.viewport) {
          this.viewport.applyConstraints()
        }
      }

      function onRotateLeft() {
        if (this.viewport) {
          var currRotation = this.viewport.getRotation()

          if (this.viewport.flipped) {
            currRotation += this.rotationIncrement
          } else {
            currRotation -= this.rotationIncrement
          }
          this.viewport.setRotation(currRotation)
        }
      }

      function onRotateRight() {
        if (this.viewport) {
          var currRotation = this.viewport.getRotation()

          if (this.viewport.flipped) {
            currRotation -= this.rotationIncrement
          } else {
            currRotation += this.rotationIncrement
          }
          this.viewport.setRotation(currRotation)
        }
      }
      /**
       * Note: When pressed flip control button
       */
      function onFlip() {
        this.viewport.toggleFlip()
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Navigator
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Navigator
       * @classdesc The Navigator provides a small view of the current image as fixed
       * while representing the viewport as a moving box serving as a frame
       * of reference in the larger viewport as to which portion of the image
       * is currently being examined.  The navigator's viewport can be interacted
       * with using the keyboard or the mouse.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.Viewer
       * @extends OpenSeadragon.EventSource
       * @param {Object} options - Navigator options
       * @param {Element} [options.element] - An element to use for the navigator.
       * @param {String} [options.id] - Id of the element to use for the navigator. However, this is ignored if {@link options.element} is provided.
       */
      $.Navigator = function (options) {
        var viewer = options.viewer,
          _this = this,
          viewerSize,
          navigatorSize

        //We may need to create a new element and id if they did not
        //provide the id for the existing element or the element itself
        if (options.element || options.id) {
          if (options.element) {
            if (options.id) {
              $.console.warn(
                'Given option.id for Navigator was ignored since option.element was provided and is being used instead.'
              )
            }

            // Don't overwrite the element's id if it has one already
            if (options.element.id) {
              options.id = options.element.id
            } else {
              options.id = 'navigator-' + $.now()
            }

            this.element = options.element
          } else {
            this.element = document.getElementById(options.id)
          }

          options.controlOptions = {
            anchor: $.ControlAnchor.NONE,
            attachToViewer: false,
            autoFade: false,
          }
        } else {
          options.id = 'navigator-' + $.now()
          this.element = $.makeNeutralElement('div')
          options.controlOptions = {
            anchor: $.ControlAnchor.TOP_RIGHT,
            attachToViewer: true,
            autoFade: options.autoFade,
          }

          if (options.position) {
            if ('BOTTOM_RIGHT' === options.position) {
              options.controlOptions.anchor = $.ControlAnchor.BOTTOM_RIGHT
            } else if ('BOTTOM_LEFT' === options.position) {
              options.controlOptions.anchor = $.ControlAnchor.BOTTOM_LEFT
            } else if ('TOP_RIGHT' === options.position) {
              options.controlOptions.anchor = $.ControlAnchor.TOP_RIGHT
            } else if ('TOP_LEFT' === options.position) {
              options.controlOptions.anchor = $.ControlAnchor.TOP_LEFT
            } else if ('ABSOLUTE' === options.position) {
              options.controlOptions.anchor = $.ControlAnchor.ABSOLUTE
              options.controlOptions.top = options.top
              options.controlOptions.left = options.left
              options.controlOptions.height = options.height
              options.controlOptions.width = options.width
            }
          }
        }
        this.element.id = options.id
        this.element.className += ' navigator'

        options = $.extend(
          true,
          {
            sizeRatio: $.DEFAULT_SETTINGS.navigatorSizeRatio,
          },
          options,
          {
            element: this.element,
            tabIndex: -1, // No keyboard navigation, omit from tab order
            //These need to be overridden to prevent recursion since
            //the navigator is a viewer and a viewer has a navigator
            showNavigator: false,
            mouseNavEnabled: false,
            showNavigationControl: false,
            showSequenceControl: false,
            immediateRender: true,
            blendTime: 0,
            animationTime: options.animationTime,
            // disable autoResize since resize behavior is implemented differently by the navigator
            autoResize: false,
            // prevent resizing the navigator from adding unwanted space around the image
            minZoomImageRatio: 1.0,
            background: options.background,
            opacity: options.opacity,
            borderColor: options.borderColor,
            displayRegionColor: options.displayRegionColor,
          }
        )

        options.minPixelRatio = this.minPixelRatio = viewer.minPixelRatio

        $.setElementTouchActionNone(this.element)

        this.borderWidth = 2
        //At some browser magnification levels the display regions lines up correctly, but at some there appears to
        //be a one pixel gap.
        this.fudge = new $.Point(1, 1)
        this.totalBorderWidths = new $.Point(
          this.borderWidth * 2,
          this.borderWidth * 2
        ).minus(this.fudge)

        if (options.controlOptions.anchor !== $.ControlAnchor.NONE) {
          ;(function (style, borderWidth) {
            style.margin = '0px'
            style.border = borderWidth + 'px solid ' + options.borderColor
            style.padding = '0px'
            style.background = options.background
            style.opacity = options.opacity
            style.overflow = 'hidden'
          })(this.element.style, this.borderWidth)
        }

        this.displayRegion = $.makeNeutralElement('div')
        this.displayRegion.id = this.element.id + '-displayregion'
        this.displayRegion.className = 'displayregion'
        ;(function (style, borderWidth) {
          style.position = 'relative'
          style.top = '0px'
          style.left = '0px'
          style.fontSize = '0px'
          style.overflow = 'hidden'
          style.border = borderWidth + 'px solid ' + options.displayRegionColor
          style.margin = '0px'
          style.padding = '0px'
          //TODO: IE doesn't like this property being set
          //try{ style.outline  = '2px auto #909'; }catch(e){/*ignore*/}

          style.background = 'transparent'

          // We use square bracket notation on the statement below, because float is a keyword.
          // This is important for the Google Closure compiler, if nothing else.
          /*jshint sub:true */
          style['float'] = 'left' //Webkit

          style.cssFloat = 'left' //Firefox
          style.styleFloat = 'left' //IE
          style.zIndex = 999999999
          style.cursor = 'default'
        })(this.displayRegion.style, this.borderWidth)
        $.setElementPointerEventsNone(this.displayRegion)
        $.setElementTouchActionNone(this.displayRegion)

        this.displayRegionContainer = $.makeNeutralElement('div')
        this.displayRegionContainer.id =
          this.element.id + '-displayregioncontainer'
        this.displayRegionContainer.className = 'displayregioncontainer'
        this.displayRegionContainer.style.width = '100%'
        this.displayRegionContainer.style.height = '100%'
        $.setElementPointerEventsNone(this.displayRegionContainer)
        $.setElementTouchActionNone(this.displayRegionContainer)

        viewer.addControl(this.element, options.controlOptions)

        this._resizeWithViewer =
          options.controlOptions.anchor !== $.ControlAnchor.ABSOLUTE &&
          options.controlOptions.anchor !== $.ControlAnchor.NONE

        if (options.width && options.height) {
          this.setWidth(options.width)
          this.setHeight(options.height)
        } else if (this._resizeWithViewer) {
          viewerSize = $.getElementSize(viewer.element)
          this.element.style.height =
            Math.round(viewerSize.y * options.sizeRatio) + 'px'
          this.element.style.width =
            Math.round(viewerSize.x * options.sizeRatio) + 'px'
          this.oldViewerSize = viewerSize
          navigatorSize = $.getElementSize(this.element)
          this.elementArea = navigatorSize.x * navigatorSize.y
        }

        this.oldContainerSize = new $.Point(0, 0)

        $.Viewer.apply(this, [options])

        this.displayRegionContainer.appendChild(this.displayRegion)
        this.element
          .getElementsByTagName('div')[0]
          .appendChild(this.displayRegionContainer)

        function rotate(degrees) {
          _setTransformRotate(_this.displayRegionContainer, degrees)
          _setTransformRotate(_this.displayRegion, -degrees)
          _this.viewport.setRotation(degrees)
        }
        if (options.navigatorRotate) {
          var degrees = options.viewer.viewport
            ? options.viewer.viewport.getRotation()
            : options.viewer.degrees || 0

          rotate(degrees)
          options.viewer.addHandler('rotate', function (args) {
            rotate(args.degrees)
          })
        }

        // Remove the base class' (Viewer's) innerTracker and replace it with our own
        this.innerTracker.destroy()
        this.innerTracker = new $.MouseTracker({
          userData: 'Navigator.innerTracker',
          element: this.element, //this.canvas,
          dragHandler: $.delegate(this, onCanvasDrag),
          clickHandler: $.delegate(this, onCanvasClick),
          releaseHandler: $.delegate(this, onCanvasRelease),
          scrollHandler: $.delegate(this, onCanvasScroll),
          preProcessEventHandler: function (eventInfo) {
            if (eventInfo.eventType === 'wheel') {
              //don't scroll the page up and down if the user is scrolling
              //in the navigator
              eventInfo.preventDefault = true
            }
          },
        })
        this.outerTracker.userData = 'Navigator.outerTracker'

        // this.innerTracker is attached to this.element...we need to allow pointer
        //   events to pass through this Viewer's canvas/container elements so implicit
        //   pointer capture works on touch devices
        //TODO an alternative is to attach the new MouseTracker to this.canvas...not
        //   sure why it isn't already (see MouseTracker constructor call above)
        $.setElementPointerEventsNone(this.canvas)
        $.setElementPointerEventsNone(this.container)

        this.addHandler('reset-size', function () {
          if (_this.viewport) {
            _this.viewport.goHome(true)
          }
        })

        viewer.world.addHandler('item-index-change', function (event) {
          window.setTimeout(function () {
            var item = _this.world.getItemAt(event.previousIndex)
            _this.world.setItemIndex(item, event.newIndex)
          }, 1)
        })

        viewer.world.addHandler('remove-item', function (event) {
          var theirItem = event.item
          var myItem = _this._getMatchingItem(theirItem)
          if (myItem) {
            _this.world.removeItem(myItem)
          }
        })

        this.update(viewer.viewport)
      }

      $.extend(
        $.Navigator.prototype,
        $.EventSource.prototype,
        $.Viewer.prototype,
        /** @lends OpenSeadragon.Navigator.prototype */ {
          /**
           * Used to notify the navigator when its size has changed.
           * Especially useful when {@link OpenSeadragon.Options}.navigatorAutoResize is set to false and the navigator is resizable.
           * @function
           */
          updateSize: function () {
            if (this.viewport) {
              var containerSize = new $.Point(
                this.container.clientWidth === 0
                  ? 1
                  : this.container.clientWidth,
                this.container.clientHeight === 0
                  ? 1
                  : this.container.clientHeight
              )

              if (!containerSize.equals(this.oldContainerSize)) {
                this.viewport.resize(containerSize, true)
                this.viewport.goHome(true)
                this.oldContainerSize = containerSize
                this.drawer.clear()
                this.world.draw()
              }
            }
          },

          /**
           * Explicitly sets the width of the navigator, in web coordinates. Disables automatic resizing.
           * @param {Number|String} width - the new width, either a number of pixels or a CSS string, such as "100%"
           */
          setWidth: function (width) {
            this.width = width
            this.element.style.width =
              typeof width === 'number' ? width + 'px' : width
            this._resizeWithViewer = false
          },

          /**
           * Explicitly sets the height of the navigator, in web coordinates. Disables automatic resizing.
           * @param {Number|String} height - the new height, either a number of pixels or a CSS string, such as "100%"
           */
          setHeight: function (height) {
            this.height = height
            this.element.style.height =
              typeof height === 'number' ? height + 'px' : height
            this._resizeWithViewer = false
          },

          /**
           * Flip navigator element
           * @param {Boolean} state - Flip state to set.
           */
          setFlip: function (state) {
            this.viewport.setFlip(state)

            this.setDisplayTransform(
              this.viewer.viewport.getFlip() ? 'scale(-1,1)' : 'scale(1,1)'
            )
            return this
          },

          setDisplayTransform: function (rule) {
            setElementTransform(this.displayRegion, rule)
            setElementTransform(this.canvas, rule)
            setElementTransform(this.element, rule)
          },

          /**
           * Used to update the navigator minimap's viewport rectangle when a change in the viewer's viewport occurs.
           * @function
           * @param {OpenSeadragon.Viewport} The viewport this navigator is tracking.
           */
          update: function (viewport) {
            var viewerSize, newWidth, newHeight, bounds, topleft, bottomright

            viewerSize = $.getElementSize(this.viewer.element)
            if (
              this._resizeWithViewer &&
              viewerSize.x &&
              viewerSize.y &&
              !viewerSize.equals(this.oldViewerSize)
            ) {
              this.oldViewerSize = viewerSize

              if (this.maintainSizeRatio || !this.elementArea) {
                newWidth = viewerSize.x * this.sizeRatio
                newHeight = viewerSize.y * this.sizeRatio
              } else {
                newWidth = Math.sqrt(
                  this.elementArea * (viewerSize.x / viewerSize.y)
                )
                newHeight = this.elementArea / newWidth
              }

              this.element.style.width = Math.round(newWidth) + 'px'
              this.element.style.height = Math.round(newHeight) + 'px'

              if (!this.elementArea) {
                this.elementArea = newWidth * newHeight
              }

              this.updateSize()
            }

            if (viewport && this.viewport) {
              bounds = viewport.getBoundsNoRotate(true)
              topleft = this.viewport.pixelFromPointNoRotate(
                bounds.getTopLeft(),
                false
              )
              bottomright = this.viewport
                .pixelFromPointNoRotate(bounds.getBottomRight(), false)
                .minus(this.totalBorderWidths)

              //update style for navigator-box
              var style = this.displayRegion.style
              style.display = this.world.getItemCount() ? 'block' : 'none'

              style.top = Math.round(topleft.y) + 'px'
              style.left = Math.round(topleft.x) + 'px'

              var width = Math.abs(topleft.x - bottomright.x)
              var height = Math.abs(topleft.y - bottomright.y)
              // make sure width and height are non-negative so IE doesn't throw
              style.width = Math.round(Math.max(width, 0)) + 'px'
              style.height = Math.round(Math.max(height, 0)) + 'px'
            }
          },

          // overrides Viewer.addTiledImage
          addTiledImage: function (options) {
            var _this = this

            var original = options.originalTiledImage
            delete options.original

            var optionsClone = $.extend({}, options, {
              success: function (event) {
                var myItem = event.item
                myItem._originalForNavigator = original
                _this._matchBounds(myItem, original, true)
                _this._matchOpacity(myItem, original)
                _this._matchCompositeOperation(myItem, original)

                function matchBounds() {
                  _this._matchBounds(myItem, original)
                }

                function matchOpacity() {
                  _this._matchOpacity(myItem, original)
                }

                function matchCompositeOperation() {
                  _this._matchCompositeOperation(myItem, original)
                }

                original.addHandler('bounds-change', matchBounds)
                original.addHandler('clip-change', matchBounds)
                original.addHandler('opacity-change', matchOpacity)
                original.addHandler(
                  'composite-operation-change',
                  matchCompositeOperation
                )
              },
            })

            return $.Viewer.prototype.addTiledImage.apply(this, [optionsClone])
          },

          destroy: function () {
            return $.Viewer.prototype.destroy.apply(this)
          },

          // private
          _getMatchingItem: function (theirItem) {
            var count = this.world.getItemCount()
            var item
            for (var i = 0; i < count; i++) {
              item = this.world.getItemAt(i)
              if (item._originalForNavigator === theirItem) {
                return item
              }
            }

            return null
          },

          // private
          _matchBounds: function (myItem, theirItem, immediately) {
            var bounds = theirItem.getBoundsNoRotate()
            myItem.setPosition(bounds.getTopLeft(), immediately)
            myItem.setWidth(bounds.width, immediately)
            myItem.setRotation(theirItem.getRotation(), immediately)
            myItem.setClip(theirItem.getClip())
            myItem.setFlip(theirItem.getFlip())
          },

          // private
          _matchOpacity: function (myItem, theirItem) {
            myItem.setOpacity(theirItem.opacity)
          },

          // private
          _matchCompositeOperation: function (myItem, theirItem) {
            myItem.setCompositeOperation(theirItem.compositeOperation)
          },
        }
      )

      /**
       * @private
       * @inner
       * @function
       */
      function onCanvasClick(event) {
        var canvasClickEventArgs = {
          tracker: event.eventSource,
          position: event.position,
          quick: event.quick,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
        }
        /**
         * Raised when a click event occurs on the {@link OpenSeadragon.Viewer#navigator} element.
         *
         * @event navigator-click
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Boolean} quick - True only if the clickDistThreshold and clickTimeThreshold are both passed. Useful for differentiating between clicks and drags.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default click to zoom behaviour. Default: false.
         */

        this.viewer.raiseEvent('navigator-click', canvasClickEventArgs)

        if (
          !canvasClickEventArgs.preventDefaultAction &&
          event.quick &&
          this.viewer.viewport &&
          (this.panVertical || this.panHorizontal)
        ) {
          if (this.viewer.viewport.flipped) {
            event.position.x =
              this.viewport.getContainerSize().x - event.position.x
          }
          var target = this.viewport.pointFromPixel(event.position)
          if (!this.panVertical) {
            // perform only horizonal pan
            target.y = this.viewer.viewport.getCenter(true).y
          } else if (!this.panHorizontal) {
            // perform only vertical pan
            target.x = this.viewer.viewport.getCenter(true).x
          }
          this.viewer.viewport.panTo(target)
          this.viewer.viewport.applyConstraints()
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onCanvasDrag(event) {
        var canvasDragEventArgs = {
          tracker: event.eventSource,
          position: event.position,
          delta: event.delta,
          speed: event.speed,
          direction: event.direction,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefaultAction: false,
        }
        /**
         * Raised when a drag event occurs on the {@link OpenSeadragon.Viewer#navigator} element.
         *
         * @event navigator-drag
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {OpenSeadragon.Point} delta - The x,y components of the difference between start drag and end drag.
         * @property {Number} speed - Current computed speed, in pixels per second.
         * @property {Number} direction - Current computed direction, expressed as an angle counterclockwise relative to the positive X axis (-pi to pi, in radians). Only valid if speed > 0.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         * @property {Boolean} preventDefaultAction - Set to true to prevent default drag to pan behaviour. Default: false.
         */
        this.viewer.raiseEvent('navigator-drag', canvasDragEventArgs)

        if (!canvasDragEventArgs.preventDefaultAction && this.viewer.viewport) {
          if (!this.panHorizontal) {
            event.delta.x = 0
          }
          if (!this.panVertical) {
            event.delta.y = 0
          }

          if (this.viewer.viewport.flipped) {
            event.delta.x = -event.delta.x
          }

          this.viewer.viewport.panBy(
            this.viewport.deltaPointsFromPixels(event.delta)
          )
          if (this.viewer.constrainDuringPan) {
            this.viewer.viewport.applyConstraints()
          }
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onCanvasRelease(event) {
        if (event.insideElementPressed && this.viewer.viewport) {
          this.viewer.viewport.applyConstraints()
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onCanvasScroll(event) {
        var eventArgs = {
          tracker: event.eventSource,
          position: event.position,
          scroll: event.scroll,
          shift: event.shift,
          originalEvent: event.originalEvent,
          preventDefault: event.preventDefault,
        }

        /**
         * Raised when a scroll event occurs on the {@link OpenSeadragon.Viewer#navigator} element (mouse wheel, touch pinch, etc.).
         *
         * @event navigator-scroll
         * @memberof OpenSeadragon.Viewer
         * @type {object}
         * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
         * @property {OpenSeadragon.MouseTracker} tracker - A reference to the MouseTracker which originated this event.
         * @property {OpenSeadragon.Point} position - The position of the event relative to the tracked element.
         * @property {Number} scroll - The scroll delta for the event.
         * @property {Boolean} shift - True if the shift key was pressed during this event.
         * @property {Object} originalEvent - The original DOM event.
         * @property {Boolean} preventDefault - Set to true to prevent the default user-agent's handling of the wheel event.
         * @property {?Object} userData - Arbitrary subscriber-defined object.
         */
        this.viewer.raiseEvent('navigator-scroll', eventArgs)

        event.preventDefault = eventArgs.preventDefault
      }

      /**
       * @function
       * @private
       * @param {Object} element
       * @param {Number} degrees
       */
      function _setTransformRotate(element, degrees) {
        setElementTransform(element, 'rotate(' + degrees + 'deg)')
      }

      function setElementTransform(element, rule) {
        element.style.webkitTransform = rule
        element.style.mozTransform = rule
        element.style.msTransform = rule
        element.style.oTransform = rule
        element.style.transform = rule
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - getString/setString
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      //TODO: I guess this is where the i18n needs to be reimplemented.  I'll look
      //      into existing patterns for i18n in javascript but i think that mimicking
      //      pythons gettext might be a reasonable approach.
      var I18N = {
        Errors: {
          Dzc: "Sorry, we don't support Deep Zoom Collections!",
          Dzi: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
          Xml: "Hmm, this doesn't appear to be a valid Deep Zoom Image.",
          ImageFormat: "Sorry, we don't support {0}-based Deep Zoom Images.",
          Security:
            'It looks like a security restriction stopped us from ' +
            'loading this Deep Zoom Image.',
          Status: 'This space unintentionally left blank ({0} {1}).',
          OpenFailed: 'Unable to open {0}: {1}',
        },

        Tooltips: {
          FullPage: 'Toggle full page',
          Home: 'Go home',
          ZoomIn: 'Zoom in',
          ZoomOut: 'Zoom out',
          NextPage: 'Next page',
          PreviousPage: 'Previous page',
          RotateLeft: 'Rotate left',
          RotateRight: 'Rotate right',
          Flip: 'Flip Horizontally',
        },
      }

      $.extend(
        $,
        /** @lends OpenSeadragon */ {
          /**
           * @function
           * @param {String} property
           */
          getString: function (prop) {
            var props = prop.split('.'),
              string = null,
              args = arguments,
              container = I18N,
              i

            for (i = 0; i < props.length - 1; i++) {
              // in case not a subproperty
              container = container[props[i]] || {}
            }
            string = container[props[i]]

            if (typeof string !== 'string') {
              $.console.error('Untranslated source string:', prop)
              string = '' // FIXME: this breaks gettext()-style convention, which would return source
            }

            return string.replace(/\{\d+\}/g, function (capture) {
              var i = parseInt(capture.match(/\d+/), 10) + 1
              return i < args.length ? args[i] : ''
            })
          },

          /**
           * @function
           * @param {String} property
           * @param {*} value
           */
          setString: function (prop, value) {
            var props = prop.split('.'),
              container = I18N,
              i

            for (i = 0; i < props.length - 1; i++) {
              if (!container[props[i]]) {
                container[props[i]] = {}
              }
              container = container[props[i]]
            }

            container[props[i]] = value
          },
        }
      )
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Point
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Point
       * @classdesc A Point is really used as a 2-dimensional vector, equally useful for
       * representing a point on a plane, or the height and width of a plane
       * not requiring any other frame of reference.
       *
       * @memberof OpenSeadragon
       * @param {Number} [x] The vector component 'x'. Defaults to the origin at 0.
       * @param {Number} [y] The vector component 'y'. Defaults to the origin at 0.
       */
      $.Point = function (x, y) {
        /**
         * The vector component 'x'.
         * @member {Number} x
         * @memberof OpenSeadragon.Point#
         */
        this.x = typeof x === 'number' ? x : 0
        /**
         * The vector component 'y'.
         * @member {Number} y
         * @memberof OpenSeadragon.Point#
         */
        this.y = typeof y === 'number' ? y : 0
      }

      /** @lends OpenSeadragon.Point.prototype */
      $.Point.prototype = {
        /**
         * @function
         * @returns {OpenSeadragon.Point} a duplicate of this Point
         */
        clone: function () {
          return new $.Point(this.x, this.y)
        },

        /**
         * Add another Point to this point and return a new Point.
         * @function
         * @param {OpenSeadragon.Point} point The point to add vector components.
         * @returns {OpenSeadragon.Point} A new point representing the sum of the
         *  vector components
         */
        plus: function (point) {
          return new $.Point(this.x + point.x, this.y + point.y)
        },

        /**
         * Subtract another Point to this point and return a new Point.
         * @function
         * @param {OpenSeadragon.Point} point The point to subtract vector components.
         * @returns {OpenSeadragon.Point} A new point representing the subtraction of the
         *  vector components
         */
        minus: function (point) {
          return new $.Point(this.x - point.x, this.y - point.y)
        },

        /**
         * Multiply this point by a factor and return a new Point.
         * @function
         * @param {Number} factor The factor to multiply vector components.
         * @returns {OpenSeadragon.Point} A new point representing the multiplication
         *  of the vector components by the factor
         */
        times: function (factor) {
          return new $.Point(this.x * factor, this.y * factor)
        },

        /**
         * Divide this point by a factor and return a new Point.
         * @function
         * @param {Number} factor The factor to divide vector components.
         * @returns {OpenSeadragon.Point} A new point representing the division of the
         *  vector components by the factor
         */
        divide: function (factor) {
          return new $.Point(this.x / factor, this.y / factor)
        },

        /**
         * Compute the opposite of this point and return a new Point.
         * @function
         * @returns {OpenSeadragon.Point} A new point representing the opposite of the
         *  vector components
         */
        negate: function () {
          return new $.Point(-this.x, -this.y)
        },

        /**
         * Compute the distance between this point and another point.
         * @function
         * @param {OpenSeadragon.Point} point The point to compute the distance with.
         * @returns {Number} The distance between the 2 points
         */
        distanceTo: function (point) {
          return Math.sqrt(
            Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2)
          )
        },

        /**
         * Compute the squared distance between this point and another point.
         * Useful for optimizing things like comparing distances.
         * @function
         * @param {OpenSeadragon.Point} point The point to compute the squared distance with.
         * @returns {Number} The squared distance between the 2 points
         */
        squaredDistanceTo: function (point) {
          return Math.pow(this.x - point.x, 2) + Math.pow(this.y - point.y, 2)
        },

        /**
         * Apply a function to each coordinate of this point and return a new point.
         * @function
         * @param {function} func The function to apply to each coordinate.
         * @returns {OpenSeadragon.Point} A new point with the coordinates computed
         * by the specified function
         */
        apply: function (func) {
          return new $.Point(func(this.x), func(this.y))
        },

        /**
         * Check if this point is equal to another one.
         * @function
         * @param {OpenSeadragon.Point} point The point to compare this point with.
         * @returns {Boolean} true if they are equal, false otherwise.
         */
        equals: function (point) {
          return (
            point instanceof $.Point && this.x === point.x && this.y === point.y
          )
        },

        /**
         * Rotates the point around the specified pivot
         * From http://stackoverflow.com/questions/4465931/rotate-rectangle-around-a-point
         * @function
         * @param {Number} degress to rotate around the pivot.
         * @param {OpenSeadragon.Point} [pivot=(0,0)] Point around which to rotate.
         * Defaults to the origin.
         * @returns {OpenSeadragon.Point}. A new point representing the point rotated around the specified pivot
         */
        rotate: function (degrees, pivot) {
          pivot = pivot || new $.Point(0, 0)
          var cos
          var sin
          // Avoid float computations when possible
          if (degrees % 90 === 0) {
            var d = $.positiveModulo(degrees, 360)
            switch (d) {
              case 0:
                cos = 1
                sin = 0
                break
              case 90:
                cos = 0
                sin = 1
                break
              case 180:
                cos = -1
                sin = 0
                break
              case 270:
                cos = 0
                sin = -1
                break
            }
          } else {
            var angle = (degrees * Math.PI) / 180.0
            cos = Math.cos(angle)
            sin = Math.sin(angle)
          }
          var x = cos * (this.x - pivot.x) - sin * (this.y - pivot.y) + pivot.x
          var y = sin * (this.x - pivot.x) + cos * (this.y - pivot.y) + pivot.y
          return new $.Point(x, y)
        },

        /**
         * Convert this point to a string in the format (x,y) where x and y are
         * rounded to the nearest integer.
         * @function
         * @returns {String} A string representation of this point.
         */
        toString: function () {
          return (
            '(' +
            Math.round(this.x * 100) / 100 +
            ',' +
            Math.round(this.y * 100) / 100 +
            ')'
          )
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - TileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class TileSource
       * @classdesc The TileSource contains the most basic implementation required to create a
       * smooth transition between layers in an image pyramid. It has only a single key
       * interface that must be implemented to complete its key functionality:
       * 'getTileUrl'.  It also has several optional interfaces that can be
       * implemented if a new TileSource wishes to support configuration via a simple
       * object or array ('configure') and if the tile source supports or requires
       * configuration via retrieval of a document on the network ala AJAX or JSONP,
       * ('getImageInfo').
       * <br/>
       * By default the image pyramid is split into N layers where the image's longest
       * side in M (in pixels), where N is the smallest integer which satisfies
       *      <strong>2^(N+1) >= M</strong>.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.EventSource
       * @param {Object} options
       *      You can either specify a URL, or literally define the TileSource (by specifying
       *      width, height, tileSize, tileOverlap, minLevel, and maxLevel). For the former,
       *      the extending class is expected to implement 'getImageInfo' and 'configure'.
       *      For the latter, the construction is assumed to occur through
       *      the extending classes implementation of 'configure'.
       * @param {String} [options.url]
       *      The URL for the data necessary for this TileSource.
       * @param {String} [options.referenceStripThumbnailUrl]
       *      The URL for a thumbnail image to be used by the reference strip
       * @param {Function} [options.success]
       *      A function to be called upon successful creation.
       * @param {Boolean} [options.ajaxWithCredentials]
       *      If this TileSource needs to make an AJAX call, this specifies whether to set
       *      the XHR's withCredentials (for accessing secure data).
       * @param {Object} [options.ajaxHeaders]
       *      A set of headers to include in AJAX requests.
       * @param {Boolean} [options.splitHashDataForPost]
       *      First occurrence of '#' in the options.url is used to split URL
       *      and the latter part is treated as POST data (applies to getImageInfo(...))
       * @param {Number} [options.width]
       *      Width of the source image at max resolution in pixels.
       * @param {Number} [options.height]
       *      Height of the source image at max resolution in pixels.
       * @param {Number} [options.tileSize]
       *      The size of the tiles to assumed to make up each pyramid layer in pixels.
       *      Tile size determines the point at which the image pyramid must be
       *      divided into a matrix of smaller images.
       *      Use options.tileWidth and options.tileHeight to support non-square tiles.
       * @param {Number} [options.tileWidth]
       *      The width of the tiles to assumed to make up each pyramid layer in pixels.
       * @param {Number} [options.tileHeight]
       *      The height of the tiles to assumed to make up each pyramid layer in pixels.
       * @param {Number} [options.tileOverlap]
       *      The number of pixels each tile is expected to overlap touching tiles.
       * @param {Number} [options.minLevel]
       *      The minimum level to attempt to load.
       * @param {Number} [options.maxLevel]
       *      The maximum level to attempt to load.
       */
      $.TileSource = function (
        width,
        height,
        tileSize,
        tileOverlap,
        minLevel,
        maxLevel
      ) {
        var _this = this

        var args = arguments,
          options,
          i

        if ($.isPlainObject(width)) {
          options = width
        } else {
          options = {
            width: args[0],
            height: args[1],
            tileSize: args[2],
            tileOverlap: args[3],
            minLevel: args[4],
            maxLevel: args[5],
          }
        }

        //Tile sources supply some events, namely 'ready' when they must be configured
        //by asynchronously fetching their configuration data.
        $.EventSource.call(this)

        //we allow options to override anything we don't treat as
        //required via idiomatic options or which is functionally
        //set depending on the state of the readiness of this tile
        //source
        $.extend(true, this, options)

        if (!this.success) {
          //Any functions that are passed as arguments are bound to the ready callback
          for (i = 0; i < arguments.length; i++) {
            if ($.isFunction(arguments[i])) {
              this.success = arguments[i]
              //only one callback per constructor
              break
            }
          }
        }

        if (this.success) {
          this.addHandler('ready', function (event) {
            _this.success(event)
          })
        }

        /**
         * Ratio of width to height
         * @member {Number} aspectRatio
         * @memberof OpenSeadragon.TileSource#
         */
        /**
         * Vector storing x and y dimensions ( width and height respectively ).
         * @member {OpenSeadragon.Point} dimensions
         * @memberof OpenSeadragon.TileSource#
         */
        /**
         * The overlap in pixels each tile shares with its adjacent neighbors.
         * @member {Number} tileOverlap
         * @memberof OpenSeadragon.TileSource#
         */
        /**
         * The minimum pyramid level this tile source supports or should attempt to load.
         * @member {Number} minLevel
         * @memberof OpenSeadragon.TileSource#
         */
        /**
         * The maximum pyramid level this tile source supports or should attempt to load.
         * @member {Number} maxLevel
         * @memberof OpenSeadragon.TileSource#
         */
        /**
         *
         * @member {Boolean} ready
         * @memberof OpenSeadragon.TileSource#
         */

        if ('string' === $.type(arguments[0])) {
          this.url = arguments[0]
        }

        if (this.url) {
          //in case the getImageInfo method is overridden and/or implies an
          //async mechanism set some safe defaults first
          this.aspectRatio = 1
          this.dimensions = new $.Point(10, 10)
          this._tileWidth = 0
          this._tileHeight = 0
          this.tileOverlap = 0
          this.minLevel = 0
          this.maxLevel = 0
          this.ready = false
          //configuration via url implies the extending class
          //implements and 'configure'
          this.getImageInfo(this.url)
        } else {
          //explicit configuration via positional args in constructor
          //or the more idiomatic 'options' object
          this.ready = true
          this.aspectRatio =
            options.width && options.height ? options.width / options.height : 1
          this.dimensions = new $.Point(options.width, options.height)

          if (this.tileSize) {
            this._tileWidth = this._tileHeight = this.tileSize
            delete this.tileSize
          } else {
            if (this.tileWidth) {
              // We were passed tileWidth in options, but we want to rename it
              // with a leading underscore to make clear that it is not safe to directly modify it
              this._tileWidth = this.tileWidth
              delete this.tileWidth
            } else {
              this._tileWidth = 0
            }

            if (this.tileHeight) {
              // See note above about renaming this.tileWidth
              this._tileHeight = this.tileHeight
              delete this.tileHeight
            } else {
              this._tileHeight = 0
            }
          }

          this.tileOverlap = options.tileOverlap ? options.tileOverlap : 0
          this.minLevel = options.minLevel ? options.minLevel : 0
          this.maxLevel =
            undefined !== options.maxLevel && null !== options.maxLevel
              ? options.maxLevel
              : options.width && options.height
              ? Math.ceil(
                  Math.log(Math.max(options.width, options.height)) /
                    Math.log(2)
                )
              : 0
          if (this.success && $.isFunction(this.success)) {
            this.success(this)
          }
        }
      }

      /** @lends OpenSeadragon.TileSource.prototype */
      $.TileSource.prototype = {
        getTileSize: function (level) {
          $.console.error(
            '[TileSource.getTileSize] is deprecated. ' +
              'Use TileSource.getTileWidth() and TileSource.getTileHeight() instead'
          )
          return this._tileWidth
        },

        /**
         * Return the tileWidth for a given level.
         * Subclasses should override this if tileWidth can be different at different levels
         *   such as in IIIFTileSource.  Code should use this function rather than reading
         *   from ._tileWidth directly.
         * @function
         * @param {Number} level
         */
        getTileWidth: function (level) {
          if (!this._tileWidth) {
            return this.getTileSize(level)
          }
          return this._tileWidth
        },

        /**
         * Return the tileHeight for a given level.
         * Subclasses should override this if tileHeight can be different at different levels
         *   such as in IIIFTileSource.  Code should use this function rather than reading
         *   from ._tileHeight directly.
         * @function
         * @param {Number} level
         */
        getTileHeight: function (level) {
          if (!this._tileHeight) {
            return this.getTileSize(level)
          }
          return this._tileHeight
        },

        /**
         * Set the maxLevel to the given level, and perform the memoization of
         * getLevelScale with the new maxLevel. This function can be useful if the
         * memoization is required before the first call of getLevelScale, or both
         * memoized getLevelScale and maxLevel should be changed accordingly.
         * @function
         * @param {Number} level
         */
        setMaxLevel: function (level) {
          this.maxLevel = level
          this._memoizeLevelScale()
        },

        /**
         * @function
         * @param {Number} level
         */
        getLevelScale: function (level) {
          // if getLevelScale is not memoized, we generate the memoized version
          // at the first call and return the result
          this._memoizeLevelScale()
          return this.getLevelScale(level)
        },

        // private
        _memoizeLevelScale: function () {
          // see https://github.com/openseadragon/openseadragon/issues/22
          // we use the tilesources implementation of getLevelScale to generate
          // a memoized re-implementation
          var levelScaleCache = {},
            i
          for (i = 0; i <= this.maxLevel; i++) {
            levelScaleCache[i] = 1 / Math.pow(2, this.maxLevel - i)
          }
          this.getLevelScale = function (_level) {
            return levelScaleCache[_level]
          }
        },

        /**
         * @function
         * @param {Number} level
         */
        getNumTiles: function (level) {
          var scale = this.getLevelScale(level),
            x = Math.ceil(
              (scale * this.dimensions.x) / this.getTileWidth(level)
            ),
            y = Math.ceil(
              (scale * this.dimensions.y) / this.getTileHeight(level)
            )

          return new $.Point(x, y)
        },

        /**
         * @function
         * @param {Number} level
         */
        getPixelRatio: function (level) {
          var imageSizeScaled = this.dimensions.times(
              this.getLevelScale(level)
            ),
            rx = (1.0 / imageSizeScaled.x) * $.pixelDensityRatio,
            ry = (1.0 / imageSizeScaled.y) * $.pixelDensityRatio

          return new $.Point(rx, ry)
        },

        /**
         * @function
         * @returns {Number} The highest level in this tile source that can be contained in a single tile.
         */
        getClosestLevel: function () {
          var i, tiles

          for (i = this.minLevel + 1; i <= this.maxLevel; i++) {
            tiles = this.getNumTiles(i)
            if (tiles.x > 1 || tiles.y > 1) {
              break
            }
          }

          return i - 1
        },

        /**
         * @function
         * @param {Number} level
         * @param {OpenSeadragon.Point} point
         */
        getTileAtPoint: function (level, point) {
          var validPoint =
            point.x >= 0 &&
            point.x <= 1 &&
            point.y >= 0 &&
            point.y <= 1 / this.aspectRatio
          $.console.assert(
            validPoint,
            '[TileSource.getTileAtPoint] must be called with a valid point.'
          )

          var widthScaled = this.dimensions.x * this.getLevelScale(level)
          var pixelX = point.x * widthScaled
          var pixelY = point.y * widthScaled

          var x = Math.floor(pixelX / this.getTileWidth(level))
          var y = Math.floor(pixelY / this.getTileHeight(level))

          // When point.x == 1 or point.y == 1 / this.aspectRatio we want to
          // return the last tile of the row/column
          if (point.x >= 1) {
            x = this.getNumTiles(level).x - 1
          }
          var EPSILON = 1e-15
          if (point.y >= 1 / this.aspectRatio - EPSILON) {
            y = this.getNumTiles(level).y - 1
          }

          return new $.Point(x, y)
        },

        /**
         * @function
         * @param {Number} level
         * @param {Number} x
         * @param {Number} y
         * @param {Boolean} [isSource=false] Whether to return the source bounds of the tile.
         * @returns {OpenSeadragon.Rect} Either where this tile fits (in normalized coordinates) or the
         * portion of the tile to use as the source of the drawing operation (in pixels), depending on
         * the isSource parameter.
         */
        getTileBounds: function (level, x, y, isSource) {
          var dimensionsScaled = this.dimensions.times(
              this.getLevelScale(level)
            ),
            tileWidth = this.getTileWidth(level),
            tileHeight = this.getTileHeight(level),
            px = x === 0 ? 0 : tileWidth * x - this.tileOverlap,
            py = y === 0 ? 0 : tileHeight * y - this.tileOverlap,
            sx = tileWidth + (x === 0 ? 1 : 2) * this.tileOverlap,
            sy = tileHeight + (y === 0 ? 1 : 2) * this.tileOverlap,
            scale = 1.0 / dimensionsScaled.x

          sx = Math.min(sx, dimensionsScaled.x - px)
          sy = Math.min(sy, dimensionsScaled.y - py)

          if (isSource) {
            return new $.Rect(0, 0, sx, sy)
          }

          return new $.Rect(px * scale, py * scale, sx * scale, sy * scale)
        },

        /**
         * Responsible for retrieving, and caching the
         * image metadata pertinent to this TileSources implementation.
         * @function
         * @param {String} url
         * @throws {Error}
         */
        getImageInfo: function (url) {
          var _this = this,
            callbackName,
            callback,
            readySource,
            options,
            urlParts,
            filename,
            lastDot

          if (url) {
            urlParts = url.split('/')
            filename = urlParts[urlParts.length - 1]
            lastDot = filename.lastIndexOf('.')
            if (lastDot > -1) {
              urlParts[urlParts.length - 1] = filename.slice(0, lastDot)
            }
          }

          var postData = null
          if (this.splitHashDataForPost) {
            var hashIdx = url.indexOf('#')
            if (hashIdx !== -1) {
              postData = url.substring(hashIdx + 1)
              url = url.substr(0, hashIdx)
            }
          }

          callback = function (data) {
            if (typeof data === 'string') {
              data = $.parseXml(data)
            }
            var $TileSource = $.TileSource.determineType(_this, data, url)
            if (!$TileSource) {
              /**
               * Raised when an error occurs loading a TileSource.
               *
               * @event open-failed
               * @memberof OpenSeadragon.TileSource
               * @type {object}
               * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
               * @property {String} message
               * @property {String} source
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('open-failed', {
                message: 'Unable to load TileSource',
                source: url,
              })
              return
            }

            options = $TileSource.prototype.configure.apply(_this, [
              data,
              url,
              postData,
            ])
            if (options.ajaxWithCredentials === undefined) {
              options.ajaxWithCredentials = _this.ajaxWithCredentials
            }

            readySource = new $TileSource(options)
            _this.ready = true
            /**
             * Raised when a TileSource is opened and initialized.
             *
             * @event ready
             * @memberof OpenSeadragon.TileSource
             * @type {object}
             * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
             * @property {Object} tileSource
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            _this.raiseEvent('ready', { tileSource: readySource })
          }

          if (url.match(/\.js$/)) {
            //TODO: Its not very flexible to require tile sources to end jsonp
            //      request for info  with a url that ends with '.js' but for
            //      now it's the only way I see to distinguish uniformly.
            callbackName = url.split('/').pop().replace('.js', '')
            $.jsonp({
              url: url,
              async: false,
              callbackName: callbackName,
              callback: callback,
            })
          } else {
            // request info via xhr asynchronously.
            $.makeAjaxRequest({
              url: url,
              postData: postData,
              withCredentials: this.ajaxWithCredentials,
              headers: this.ajaxHeaders,
              success: function (xhr) {
                var data = processResponse(xhr)
                callback(data)
              },
              error: function (xhr, exc) {
                var msg

                /*
                            IE < 10 will block XHR requests to different origins. Any property access on the request
                            object will raise an exception which we'll attempt to handle by formatting the original
                            exception rather than the second one raised when we try to access xhr.status
                         */
                try {
                  msg =
                    'HTTP ' +
                    xhr.status +
                    ' attempting to load TileSource: ' +
                    url
                } catch (e) {
                  var formattedExc
                  if (typeof exc === 'undefined' || !exc.toString) {
                    formattedExc = 'Unknown error'
                  } else {
                    formattedExc = exc.toString()
                  }

                  msg = formattedExc + ' attempting to load TileSource: ' + url
                }

                $.console.error(msg)

                /***
                 * Raised when an error occurs loading a TileSource.
                 *
                 * @event open-failed
                 * @memberof OpenSeadragon.TileSource
                 * @type {object}
                 * @property {OpenSeadragon.TileSource} eventSource - A reference to the TileSource which raised the event.
                 * @property {String} message
                 * @property {String} source
                 * @property {String} postData - HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
                 *      see TileSource::getPostData) or null
                 * @property {?Object} userData - Arbitrary subscriber-defined object.
                 */
                _this.raiseEvent('open-failed', {
                  message: msg,
                  source: url,
                  postData: postData,
                })
              },
            })
          }
        },

        /**
         * Responsible determining if a the particular TileSource supports the
         * data format ( and allowed to apply logic against the url the data was
         * loaded from, if any ). Overriding implementations are expected to do
         * something smart with data and / or url to determine support.  Also
         * understand that iteration order of TileSources is not guarunteed so
         * please make sure your data or url is expressive enough to ensure a simple
         * and sufficient mechanisim for clear determination.
         * @function
         * @param {String|Object|Array|Document} data
         * @param {String} url - the url the data was loaded
         *      from if any.
         * @returns {Boolean}
         */
        supports: function (data, url) {
          return false
        },

        /**
         * Responsible for parsing and configuring the
         * image metadata pertinent to this TileSources implementation.
         * This method is not implemented by this class other than to throw an Error
         * announcing you have to implement it.  Because of the variety of tile
         * server technologies, and various specifications for building image
         * pyramids, this method is here to allow easy integration.
         * @function
         * @param {String|Object|Array|Document} data
         * @param {String} url - the url the data was loaded
         *      from if any.
         * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null value obtained from
         *      the protocol URL after '#' sign if flag splitHashDataForPost set to 'true'
         * @returns {Object} options - A dictionary of keyword arguments sufficient
         *      to configure the tile source constructor (include all values you want to
         *      instantiate the TileSource subclass with - what _options_ object should contain).
         * @throws {Error}
         */
        configure: function (data, url, postData) {
          throw new Error('Method not implemented.')
        },

        /**
         * Responsible for retrieving the url which will return an image for the
         * region specified by the given x, y, and level components.
         * This method is not implemented by this class other than to throw an Error
         * announcing you have to implement it.  Because of the variety of tile
         * server technologies, and various specifications for building image
         * pyramids, this method is here to allow easy integration.
         * @function
         * @param {Number} level
         * @param {Number} x
         * @param {Number} y
         * @returns {String|Function} url - A string for the url or a function that returns a url string.
         * @throws {Error}
         */
        getTileUrl: function (level, x, y) {
          throw new Error('Method not implemented.')
        },

        /**
         * Must use AJAX in order to work, i.e. loadTilesWithAjax = true is set.
         * If a value is returned, ajax issues POST request to the tile url.
         * If null is returned, ajax issues GET request.
         * The return value must comply to the header 'content type'.
         *
         * Examples (USED HEADER --> getTilePostData CODE):
         * 'Content-type': 'application/x-www-form-urlencoded' -->
         *   return "key1=value=1&key2=value2";
         *
         * 'Content-type': 'application/x-www-form-urlencoded' -->
         *   return JSON.stringify({key: "value", number: 5});
         *
         * 'Content-type': 'multipart/form-data' -->
         *   let result = new FormData();
         *   result.append("data", myData);
         *   return result;
         *
         * IMPORTANT: in case you move all the logic on image fetching
         * to post data, you must re-define 'getTileHashKey(...)' to
         * stay unique for different tile images.
         *
         * @param {Number} level
         * @param {Number} x
         * @param {Number} y
         * @returns {*|null} post data to send with tile configuration request
         */
        getTilePostData: function (level, x, y) {
          return null
        },

        /**
         * Responsible for retrieving the headers which will be attached to the image request for the
         * region specified by the given x, y, and level components.
         * This option is only relevant if {@link OpenSeadragon.Options}.loadTilesWithAjax is set to true.
         * The headers returned here will override headers specified at the Viewer or TiledImage level.
         * Specifying a falsy value for a header will clear its existing value set at the Viewer or
         * TiledImage level (if any).
         * @function
         * @param {Number} level
         * @param {Number} x
         * @param {Number} y
         * @returns {Object}
         */
        getTileAjaxHeaders: function (level, x, y) {
          return {}
        },

        /**
         * The tile cache object is uniquely determined by this key and used to lookup
         * the image data in cache: keys should be different if images are different.
         *
         * In case a tile has context2D property defined (TileSource.prototype.getContext2D)
         * or its context2D is set manually; the cache is not used and this function
         * is irrelevant.
         * Note: default behaviour does not take into account post data.
         * @param {Number} level tile level it was fetched with
         * @param {Number} x x-coordinate in the pyramid level
         * @param {Number} y y-coordinate in the pyramid level
         * @param {String} url the tile was fetched with
         * @param {Object} ajaxHeaders the tile was fetched with
         * @param {*} postData data the tile was fetched with (type depends on getTilePostData(..) return type)
         */
        getTileHashKey: function (level, x, y, url, ajaxHeaders, postData) {
          function withHeaders(hash) {
            return ajaxHeaders ? hash + '+' + JSON.stringify(ajaxHeaders) : hash
          }

          if (typeof url !== 'string') {
            return withHeaders(level + '/' + x + '_' + y)
          }
          return withHeaders(url)
        },

        /**
         * @function
         * @param {Number} level
         * @param {Number} x
         * @param {Number} y
         */
        tileExists: function (level, x, y) {
          var numTiles = this.getNumTiles(level)
          return (
            level >= this.minLevel &&
            level <= this.maxLevel &&
            x >= 0 &&
            y >= 0 &&
            x < numTiles.x &&
            y < numTiles.y
          )
        },

        /**
         * Decide whether tiles have transparency: this is crucial for correct images blending.
         * @returns {boolean} true if the image has transparency
         */
        hasTransparency: function (context2D, url, ajaxHeaders, post) {
          return !!context2D || url.match('.png')
        },

        /**
         * Download tile data.
         * Note that if you override this function, you should override also downloadTileAbort().
         * @param {ImageJob} context job context that you have to call finish(...) on.
         * @param {String} [context.src] - URL of image to download.
         * @param {String} [context.loadWithAjax] - Whether to load this image with AJAX.
         * @param {String} [context.ajaxHeaders] - Headers to add to the image request if using AJAX.
         * @param {Boolean} [context.ajaxWithCredentials] - Whether to set withCredentials on AJAX requests.
         * @param {String} [context.crossOriginPolicy] - CORS policy to use for downloads
         * @param {String} [context.postData] - HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
         *   see TileSource::getPostData) or null
         * @param {*} [context.userData] - Empty object to attach your own data and helper variables to.
         * @param {Function} [context.finish] - Should be called unless abort() was executed, e.g. on all occasions,
         *   be it successful or unsuccessful request.
         *   Usage: context.finish(data, request, errMessage). Pass the downloaded data object or null upon failure.
         *   Add also reference to an ajax request if used. Provide error message in case of failure.
         * @param {Function} [context.abort] - Called automatically when the job times out.
         *   Usage: context.abort().
         * @param {Function} [context.callback] @private - Called automatically once image has been downloaded
         *   (triggered by finish).
         * @param {Number} [context.timeout] @private - The max number of milliseconds that
         *   this image job may take to complete.
         * @param {string} [context.errorMsg] @private - The final error message, default null (set by finish).
         */
        downloadTileStart: function (context) {
          var dataStore = context.userData,
            image = new Image()

          dataStore.image = image
          dataStore.request = null

          var finish = function (error) {
            if (!image) {
              context.finish(
                null,
                dataStore.request,
                'Image load failed: undefined Image instance.'
              )
              return
            }
            image.onload = image.onerror = image.onabort = null
            context.finish(error ? null : image, dataStore.request, error)
          }
          image.onload = function () {
            finish()
          }
          image.onabort = image.onerror = function () {
            finish('Image load aborted.')
          }

          // Load the tile with an AJAX request if the loadWithAjax option is
          // set. Otherwise load the image by setting the source proprety of the image object.
          if (context.loadWithAjax) {
            dataStore.request = $.makeAjaxRequest({
              url: context.src,
              withCredentials: context.ajaxWithCredentials,
              headers: context.ajaxHeaders,
              responseType: 'arraybuffer',
              postData: context.postData,
              success: function (request) {
                var blb
                // Make the raw data into a blob.
                // BlobBuilder fallback adapted from
                // http://stackoverflow.com/questions/15293694/blob-constructor-browser-compatibility
                try {
                  blb = new window.Blob([request.response])
                } catch (e) {
                  var BlobBuilder =
                    window.BlobBuilder ||
                    window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder
                  if (e.name === 'TypeError' && BlobBuilder) {
                    var bb = new BlobBuilder()
                    bb.append(request.response)
                    blb = bb.getBlob()
                  }
                }
                // If the blob is empty for some reason consider the image load a failure.
                if (blb.size === 0) {
                  finish('Empty image response.')
                } else {
                  // Create a URL for the blob data and make it the source of the image object.
                  // This will still trigger Image.onload to indicate a successful tile load.
                  image.src = (window.URL || window.webkitURL).createObjectURL(
                    blb
                  )
                }
              },
              error: function (request) {
                finish('Image load aborted - XHR error')
              },
            })
          } else {
            if (context.crossOriginPolicy !== false) {
              image.crossOrigin = context.crossOriginPolicy
            }
            image.src = context.src
          }
        },

        /**
         * Provide means of aborting the execution.
         * Note that if you override this function, you should override also downloadTileStart().
         * @param {ImageJob} context job, the same object as with downloadTileStart(..)
         * @param {*} [context.userData] - Empty object to attach (and mainly read) your own data.
         */
        downloadTileAbort: function (context) {
          if (context.userData.request) {
            context.userData.request.abort()
          }
          var image = context.userData.image
          if (context.userData.image) {
            image.onload = image.onerror = image.onabort = null
          }
        },

        /**
         * Create cache object from the result of the download process. The
         * cacheObject parameter should be used to attach the data to, there are no
         * conventions on how it should be stored - all the logic is implemented within *TileCache() functions.
         *
         * Note that if you override any of *TileCache() functions, you should override all of them.
         * @param {object} cacheObject context cache object
         * @param {*} data image data, the data sent to ImageJob.prototype.finish(), by default an Image object
         * @param {Tile} tile instance the cache was created with
         */
        createTileCache: function (cacheObject, data, tile) {
          cacheObject._data = data
        },

        /**
         * Cache object destructor, unset all properties you created to allow GC collection.
         * Note that if you override any of *TileCache() functions, you should override all of them.
         * @param {object} cacheObject context cache object
         */
        destroyTileCache: function (cacheObject) {
          cacheObject._data = null
          cacheObject._renderedContext = null
        },

        /**
         * Raw data getter
         * Note that if you override any of *TileCache() functions, you should override all of them.
         * @param {object} cacheObject context cache object
         * @returns {*} cache data
         */
        getTileCacheData: function (cacheObject) {
          return cacheObject._data
        },

        /**
         * Compatibility image element getter
         *  - plugins might need image representation of the data
         *  - div HTML rendering relies on image element presence
         * Note that if you override any of *TileCache() functions, you should override all of them.
         *  @param {object} cacheObject context cache object
         *  @returns {Image} cache data as an Image
         */
        getTileCacheDataAsImage: function (cacheObject) {
          return cacheObject._data //the data itself by default is Image
        },

        /**
         * Compatibility context 2D getter
         *  - most heavily used rendering method is a canvas-based approach,
         *    convert the data to a canvas and return it's 2D context
         * Note that if you override any of *TileCache() functions, you should override all of them.
         * @param {object} cacheObject context cache object
         * @returns {CanvasRenderingContext2D} context of the canvas representation of the cache data
         */
        getTileCacheDataAsContext2D: function (cacheObject) {
          if (!cacheObject._renderedContext) {
            var canvas = document.createElement('canvas')
            canvas.width = cacheObject._data.width
            canvas.height = cacheObject._data.height
            cacheObject._renderedContext = canvas.getContext('2d')
            cacheObject._renderedContext.drawImage(cacheObject._data, 0, 0)
            //since we are caching the prerendered image on a canvas
            //allow the image to not be held in memory
            cacheObject._data = null
          }
          return cacheObject._renderedContext
        },
      }

      $.extend(true, $.TileSource.prototype, $.EventSource.prototype)

      /**
       * Decides whether to try to process the response as xml, json, or hand back
       * the text
       * @private
       * @inner
       * @function
       * @param {XMLHttpRequest} xhr - the completed network request
       */
      function processResponse(xhr) {
        var responseText = xhr.responseText,
          status = xhr.status,
          statusText,
          data

        if (!xhr) {
          throw new Error($.getString('Errors.Security'))
        } else if (xhr.status !== 200 && xhr.status !== 0) {
          status = xhr.status
          statusText = status === 404 ? 'Not Found' : xhr.statusText
          throw new Error($.getString('Errors.Status', status, statusText))
        }

        if (responseText.match(/\s*<.*/)) {
          try {
            data =
              xhr.responseXML && xhr.responseXML.documentElement
                ? xhr.responseXML
                : $.parseXml(responseText)
          } catch (e) {
            data = xhr.responseText
          }
        } else if (responseText.match(/\s*[{[].*/)) {
          try {
            data = $.parseJSON(responseText)
          } catch (e) {
            data = responseText
          }
        } else {
          data = responseText
        }
        return data
      }

      /**
       * Determines the TileSource Implementation by introspection of OpenSeadragon
       * namespace, calling each TileSource implementation of 'isType'
       * @private
       * @inner
       * @function
       * @param {Object|Array|Document} data - the tile source configuration object
       * @param {String} url - the url where the tile source configuration object was
       *      loaded from, if any.
       */
      $.TileSource.determineType = function (tileSource, data, url) {
        var property
        for (property in OpenSeadragon) {
          if (
            property.match(/.+TileSource$/) &&
            $.isFunction(OpenSeadragon[property]) &&
            $.isFunction(OpenSeadragon[property].prototype.supports) &&
            OpenSeadragon[property].prototype.supports.call(
              tileSource,
              data,
              url
            )
          ) {
            return OpenSeadragon[property]
          }
        }

        $.console.error('No TileSource was able to open %s %s', url, data)

        return null
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - DziTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class DziTileSource
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @param {Number|Object} width - the pixel width of the image or the idiomatic
       *      options object which is used instead of positional arguments.
       * @param {Number} height
       * @param {Number} tileSize
       * @param {Number} tileOverlap
       * @param {String} tilesUrl
       * @param {String} fileFormat
       * @param {OpenSeadragon.DisplayRect[]} displayRects
       * @property {String} tilesUrl
       * @property {String} fileFormat
       * @property {OpenSeadragon.DisplayRect[]} displayRects
       */
      $.DziTileSource = function (
        width,
        height,
        tileSize,
        tileOverlap,
        tilesUrl,
        fileFormat,
        displayRects,
        minLevel,
        maxLevel
      ) {
        var i, rect, level, options

        if ($.isPlainObject(width)) {
          options = width
        } else {
          options = {
            width: arguments[0],
            height: arguments[1],
            tileSize: arguments[2],
            tileOverlap: arguments[3],
            tilesUrl: arguments[4],
            fileFormat: arguments[5],
            displayRects: arguments[6],
            minLevel: arguments[7],
            maxLevel: arguments[8],
          }
        }

        this._levelRects = {}
        this.tilesUrl = options.tilesUrl
        this.fileFormat = options.fileFormat
        this.displayRects = options.displayRects

        if (this.displayRects) {
          for (i = this.displayRects.length - 1; i >= 0; i--) {
            rect = this.displayRects[i]
            for (level = rect.minLevel; level <= rect.maxLevel; level++) {
              if (!this._levelRects[level]) {
                this._levelRects[level] = []
              }
              this._levelRects[level].push(rect)
            }
          }
        }

        $.TileSource.apply(this, [options])
      }

      $.extend(
        $.DziTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.DziTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            var ns
            if (data.Image) {
              ns = data.Image.xmlns
            } else if (data.documentElement) {
              if (
                'Image' === data.documentElement.localName ||
                'Image' === data.documentElement.tagName
              ) {
                ns = data.documentElement.namespaceURI
              }
            }

            ns = (ns || '').toLowerCase()

            return (
              ns.indexOf('schemas.microsoft.com/deepzoom/2008') !== -1 ||
              ns.indexOf('schemas.microsoft.com/deepzoom/2009') !== -1
            )
          },

          /**
           *
           * @function
           * @param {Object|XMLDocument} data - the raw configuration
           * @param {String} url - the url the data was retrieved from if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (data, url, postData) {
            var options

            if (!$.isPlainObject(data)) {
              options = configureFromXML(this, data)
            } else {
              options = configureFromObject(this, data)
            }

            if (url && !options.tilesUrl) {
              options.tilesUrl = url.replace(
                /([^/]+?)(\.(dzi|xml|js)?(\?[^/]*)?)?\/?$/,
                '$1_files/'
              )

              if (url.search(/\.(dzi|xml|js)\?/) !== -1) {
                options.queryParams = url.match(/\?.*/)
              } else {
                options.queryParams = ''
              }
            }

            return options
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           */
          getTileUrl: function (level, x, y) {
            var tUrl = new URL(this.tilesUrl)
            var pathname = tUrl.pathname.slice(1)
            var urls = s3_bucket_url_js(
              [pathname, level, '/', x, '_', y, '.', this.fileFormat].join('')
            )
            return urls
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           */
          tileExists: function (level, x, y) {
            var rects = this._levelRects[level],
              rect,
              scale,
              xMin,
              yMin,
              xMax,
              yMax,
              i

            if (
              (this.minLevel && level < this.minLevel) ||
              (this.maxLevel && level > this.maxLevel)
            ) {
              return false
            }

            if (!rects || !rects.length) {
              return true
            }

            for (i = rects.length - 1; i >= 0; i--) {
              rect = rects[i]

              if (level < rect.minLevel || level > rect.maxLevel) {
                continue
              }

              scale = this.getLevelScale(level)
              xMin = rect.x * scale
              yMin = rect.y * scale
              xMax = xMin + rect.width * scale
              yMax = yMin + rect.height * scale

              xMin = Math.floor(xMin / this._tileWidth)
              yMin = Math.floor(yMin / this._tileWidth) // DZI tiles are square, so we just use _tileWidth
              xMax = Math.ceil(xMax / this._tileWidth)
              yMax = Math.ceil(yMax / this._tileWidth)

              if (xMin <= x && x < xMax && yMin <= y && y < yMax) {
                return true
              }
            }

            return false
          },
        }
      )

      /**
       * @private
       * @inner
       * @function
       * @param {String} key
       */
      function s3_bucket_url_js(key) {
        const s3 = new AWS.S3()
        var params = { Bucket: 'brucheion', Key: key, Expires: 60 * 300 }
        var s3_presigned = s3.getSignedUrl('getObject', params)
        return s3_presigned
      }

      /**
       * @private
       * @inner
       * @function
       */
      function configureFromXML(tileSource, xmlDoc) {
        if (!xmlDoc || !xmlDoc.documentElement) {
          throw new Error($.getString('Errors.Xml'))
        }

        var root = xmlDoc.documentElement,
          rootName = root.localName || root.tagName,
          ns = xmlDoc.documentElement.namespaceURI,
          configuration = null,
          displayRects = [],
          dispRectNodes,
          dispRectNode,
          rectNode,
          sizeNode,
          i

        if (rootName === 'Image') {
          try {
            sizeNode = root.getElementsByTagName('Size')[0]
            if (sizeNode === undefined) {
              sizeNode = root.getElementsByTagNameNS(ns, 'Size')[0]
            }

            configuration = {
              Image: {
                xmlns: 'http://schemas.microsoft.com/deepzoom/2008',
                Url: root.getAttribute('Url'),
                Format: root.getAttribute('Format'),
                DisplayRect: null,
                Overlap: parseInt(root.getAttribute('Overlap'), 10),
                TileSize: parseInt(root.getAttribute('TileSize'), 10),
                Size: {
                  Height: parseInt(sizeNode.getAttribute('Height'), 10),
                  Width: parseInt(sizeNode.getAttribute('Width'), 10),
                },
              },
            }

            if (!$.imageFormatSupported(configuration.Image.Format)) {
              throw new Error(
                $.getString(
                  'Errors.ImageFormat',
                  configuration.Image.Format.toUpperCase()
                )
              )
            }

            dispRectNodes = root.getElementsByTagName('DisplayRect')
            if (dispRectNodes === undefined) {
              dispRectNodes = root.getElementsByTagNameNS(ns, 'DisplayRect')[0]
            }

            for (i = 0; i < dispRectNodes.length; i++) {
              dispRectNode = dispRectNodes[i]
              rectNode = dispRectNode.getElementsByTagName('Rect')[0]
              if (rectNode === undefined) {
                rectNode = dispRectNode.getElementsByTagNameNS(ns, 'Rect')[0]
              }

              displayRects.push({
                Rect: {
                  X: parseInt(rectNode.getAttribute('X'), 10),
                  Y: parseInt(rectNode.getAttribute('Y'), 10),
                  Width: parseInt(rectNode.getAttribute('Width'), 10),
                  Height: parseInt(rectNode.getAttribute('Height'), 10),
                  MinLevel: parseInt(dispRectNode.getAttribute('MinLevel'), 10),
                  MaxLevel: parseInt(dispRectNode.getAttribute('MaxLevel'), 10),
                },
              })
            }

            if (displayRects.length) {
              configuration.Image.DisplayRect = displayRects
            }

            return configureFromObject(tileSource, configuration)
          } catch (e) {
            throw e instanceof Error ? e : new Error($.getString('Errors.Dzi'))
          }
        } else if (rootName === 'Collection') {
          throw new Error($.getString('Errors.Dzc'))
        } else if (rootName === 'Error') {
          var messageNode = root.getElementsByTagName('Message')[0]
          var message = messageNode.firstChild.nodeValue
          throw new Error(message)
        }

        throw new Error($.getString('Errors.Dzi'))
      }

      /**
       * @private
       * @inner
       * @function
       */
      function configureFromObject(tileSource, configuration) {
        var imageData = configuration.Image,
          tilesUrl = imageData.Url,
          fileFormat = imageData.Format,
          sizeData = imageData.Size,
          dispRectData = imageData.DisplayRect || [],
          width = parseInt(sizeData.Width, 10),
          height = parseInt(sizeData.Height, 10),
          tileSize = parseInt(imageData.TileSize, 10),
          tileOverlap = parseInt(imageData.Overlap, 10),
          displayRects = [],
          rectData,
          i

        //TODO: need to figure out out to better handle image format compatibility
        //      which actually includes additional file formats like xml and pdf
        //      and plain text for various tilesource implementations to avoid low
        //      level errors.
        //
        //      For now, just don't perform the check.
        //
        /*if ( !imageFormatSupported( fileFormat ) ) {
            throw new Error(
                $.getString( "Errors.ImageFormat", fileFormat.toUpperCase() )
            );
        }*/

        for (i = 0; i < dispRectData.length; i++) {
          rectData = dispRectData[i].Rect

          displayRects.push(
            new $.DisplayRect(
              parseInt(rectData.X, 10),
              parseInt(rectData.Y, 10),
              parseInt(rectData.Width, 10),
              parseInt(rectData.Height, 10),
              parseInt(rectData.MinLevel, 10),
              parseInt(rectData.MaxLevel, 10)
            )
          )
        }

        return $.extend(
          true,
          {
            width: width /* width *required */,
            height: height /* height *required */,
            tileSize: tileSize /* tileSize *required */,
            tileOverlap: tileOverlap /* tileOverlap *required */,
            minLevel: null /* minLevel */,
            maxLevel: null /* maxLevel */,
            tilesUrl: tilesUrl /* tilesUrl */,
            fileFormat: fileFormat /* fileFormat */,
            displayRects: displayRects /* displayRects */,
          },
          configuration
        )
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - IIIFTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class IIIFTileSource
       * @classdesc A client implementation of the International Image Interoperability Framework
       * Format: Image API 1.0 - 2.1
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @see http://iiif.io/api/image/
       * @param {String} [options.tileFormat='jpg']
       *      The extension that will be used when requiring tiles.
       */
      $.IIIFTileSource = function (options) {
        /* eslint-disable camelcase */

        $.extend(true, this, options)

        /* Normalizes v3-style 'id' keys to an "_id" internal property */
        this._id = this['@id'] || this['id'] || this['identifier'] || null

        if (!(this.height && this.width && this._id)) {
          throw new Error(
            'IIIF required parameters (width, height, or id) not provided.'
          )
        }

        options.tileSizePerScaleFactor = {}

        this.tileFormat = this.tileFormat || 'jpg'

        this.version = options.version

        // N.B. 2.0 renamed scale_factors to scaleFactors
        if (this.tile_width && this.tile_height) {
          options.tileWidth = this.tile_width
          options.tileHeight = this.tile_height
        } else if (this.tile_width) {
          options.tileSize = this.tile_width
        } else if (this.tile_height) {
          options.tileSize = this.tile_height
        } else if (this.tiles) {
          // Version 2.0 forwards
          if (this.tiles.length === 1) {
            options.tileWidth = this.tiles[0].width
            // Use height if provided, otherwise assume square tiles and use width.
            options.tileHeight = this.tiles[0].height || this.tiles[0].width
            this.scale_factors = this.tiles[0].scaleFactors
          } else {
            // Multiple tile sizes at different levels
            this.scale_factors = []
            for (var t = 0; t < this.tiles.length; t++) {
              for (var sf = 0; sf < this.tiles[t].scaleFactors.length; sf++) {
                var scaleFactor = this.tiles[t].scaleFactors[sf]
                this.scale_factors.push(scaleFactor)
                options.tileSizePerScaleFactor[scaleFactor] = {
                  width: this.tiles[t].width,
                  height: this.tiles[t].height || this.tiles[t].width,
                }
              }
            }
          }
        } else if (canBeTiled(options)) {
          // use the largest of tileOptions that is smaller than the short dimension
          var shortDim = Math.min(this.height, this.width),
            tileOptions = [256, 512, 1024],
            smallerTiles = []

          for (var c = 0; c < tileOptions.length; c++) {
            if (tileOptions[c] <= shortDim) {
              smallerTiles.push(tileOptions[c])
            }
          }

          if (smallerTiles.length > 0) {
            options.tileSize = Math.max.apply(null, smallerTiles)
          } else {
            // If we're smaller than 256, just use the short side.
            options.tileSize = shortDim
          }
        } else if (this.sizes && this.sizes.length > 0) {
          // This info.json can't be tiled, but we can still construct a legacy pyramid from the sizes array.
          // In this mode, IIIFTileSource will call functions from the abstract baseTileSource or the
          // LegacyTileSource instead of performing IIIF tiling.
          this.emulateLegacyImagePyramid = true

          options.levels = constructLevels(this)
          // use the largest available size to define tiles
          $.extend(true, options, {
            width: options.levels[options.levels.length - 1].width,
            height: options.levels[options.levels.length - 1].height,
            tileSize: Math.max(options.height, options.width),
            tileOverlap: 0,
            minLevel: 0,
            maxLevel: options.levels.length - 1,
          })
          this.levels = options.levels
        } else {
          $.console.error(
            'Nothing in the info.json to construct image pyramids from'
          )
        }

        if (!options.maxLevel && !this.emulateLegacyImagePyramid) {
          if (!this.scale_factors) {
            options.maxLevel = Number(
              Math.round(Math.log(Math.max(this.width, this.height), 2))
            )
          } else {
            var maxScaleFactor = Math.max.apply(null, this.scale_factors)
            options.maxLevel = Math.round(Math.log(maxScaleFactor) * Math.LOG2E)
          }
        }

        $.TileSource.apply(this, [options])
      }

      $.extend(
        $.IIIFTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.IIIFTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} [url] - url
           */

          supports: function (data, url) {
            // Version 2.0 and forwards
            if (data.protocol && data.protocol === 'http://iiif.io/api/image') {
              return true
              // Version 1.1
            } else if (
              data['@context'] &&
              (data['@context'] ===
                'http://library.stanford.edu/iiif/image-api/1.1/context.json' ||
                data['@context'] === 'http://iiif.io/api/image/1/context.json')
            ) {
              // N.B. the iiif.io context is wrong, but where the representation lives so likely to be used
              return true

              // Version 1.0
            } else if (
              data.profile &&
              data.profile.indexOf(
                'http://library.stanford.edu/iiif/image-api/compliance.html'
              ) === 0
            ) {
              return true
            } else if (data.identifier && data.width && data.height) {
              return true
            } else if (
              data.documentElement &&
              'info' === data.documentElement.tagName &&
              'http://library.stanford.edu/iiif/image-api/ns/' ===
                data.documentElement.namespaceURI
            ) {
              return true

              // Not IIIF
            } else {
              return false
            }
          },

          /**
           * A static function used to prepare an incoming IIIF Image API info.json
           * response for processing by the tile handler. Normalizes data for all
           * versions of IIIF (1.0, 1.1, 2.x, 3.x) and returns a data object that
           * may be passed to the IIIFTileSource.
           *
           * @function
           * @static
           * @param {Object} data - the raw configuration
           * @param {String} url - the url configuration was retrieved from
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} A normalized IIIF data object
           * @example <caption>IIIF 2.x Info Looks like this</caption>
           * {
           * "@context": "http://iiif.io/api/image/2/context.json",
           * "@id": "http://iiif.example.com/prefix/1E34750D-38DB-4825-A38A-B60A345E591C",
           * "protocol": "http://iiif.io/api/image",
           * "height": 1024,
           * "width": 775,
           * "tiles" : [{"width":256, "scaleFactors":[1,2,4,8]}],
           *  "profile": ["http://iiif.io/api/image/2/level1.json", {
           *    "qualities": [ "native", "bitonal", "grey", "color" ],
           *    "formats": [ "jpg", "png", "gif" ]
           *   }]
           * }
           */
          configure: function (data, url, postData) {
            // Try to deduce our version and fake it upwards if needed
            if (!$.isPlainObject(data)) {
              var options = configureFromXml10(data)
              options['@context'] = 'http://iiif.io/api/image/1.0/context.json'
              options['@id'] = url.replace('/info.xml', '')
              options.version = 1
              return options
            } else {
              if (!data['@context']) {
                data['@context'] = 'http://iiif.io/api/image/1.0/context.json'
                data['@id'] = url.replace('/info.json', '')
                data.version = 1
              } else {
                var context = data['@context']
                if (Array.isArray(context)) {
                  for (var i = 0; i < context.length; i++) {
                    if (
                      typeof context[i] === 'string' &&
                      (/^http:\/\/iiif\.io\/api\/image\/[1-3]\/context\.json$/.test(
                        context[i]
                      ) ||
                        context[i] ===
                          'http://library.stanford.edu/iiif/image-api/1.1/context.json')
                    ) {
                      context = context[i]
                      break
                    }
                  }
                }
                switch (context) {
                  case 'http://iiif.io/api/image/1/context.json':
                  case 'http://library.stanford.edu/iiif/image-api/1.1/context.json':
                    data.version = 1
                    break
                  case 'http://iiif.io/api/image/2/context.json':
                    data.version = 2
                    break
                  case 'http://iiif.io/api/image/3/context.json':
                    data.version = 3
                    break
                  default:
                    $.console.error(
                      'Data has a @context property which contains no known IIIF context URI.'
                    )
                }
              }

              if (data.preferredFormats) {
                for (var f = 0; f < data.preferredFormats.length; f++) {
                  if (
                    OpenSeadragon.imageFormatSupported(data.preferredFormats[f])
                  ) {
                    data.tileFormat = data.preferredFormats[f]
                    break
                  }
                }
              }
              return data
            }
          },

          /**
           * Return the tileWidth for the given level.
           * @function
           * @param {Number} level
           */
          getTileWidth: function (level) {
            if (this.emulateLegacyImagePyramid) {
              return $.TileSource.prototype.getTileWidth.call(this, level)
            }

            var scaleFactor = Math.pow(2, this.maxLevel - level)

            if (
              this.tileSizePerScaleFactor &&
              this.tileSizePerScaleFactor[scaleFactor]
            ) {
              return this.tileSizePerScaleFactor[scaleFactor].width
            }
            return this._tileWidth
          },

          /**
           * Return the tileHeight for the given level.
           * @function
           * @param {Number} level
           */
          getTileHeight: function (level) {
            if (this.emulateLegacyImagePyramid) {
              return $.TileSource.prototype.getTileHeight.call(this, level)
            }

            var scaleFactor = Math.pow(2, this.maxLevel - level)

            if (
              this.tileSizePerScaleFactor &&
              this.tileSizePerScaleFactor[scaleFactor]
            ) {
              return this.tileSizePerScaleFactor[scaleFactor].height
            }
            return this._tileHeight
          },

          /**
           * @function
           * @param {Number} level
           */
          getLevelScale: function (level) {
            if (this.emulateLegacyImagePyramid) {
              var levelScale = NaN
              if (
                this.levels.length > 0 &&
                level >= this.minLevel &&
                level <= this.maxLevel
              ) {
                levelScale =
                  this.levels[level].width / this.levels[this.maxLevel].width
              }
              return levelScale
            }

            return $.TileSource.prototype.getLevelScale.call(this, level)
          },

          /**
           * @function
           * @param {Number} level
           */
          getNumTiles: function (level) {
            if (this.emulateLegacyImagePyramid) {
              var scale = this.getLevelScale(level)
              if (scale) {
                return new $.Point(1, 1)
              } else {
                return new $.Point(0, 0)
              }
            }

            return $.TileSource.prototype.getNumTiles.call(this, level)
          },

          /**
           * @function
           * @param {Number} level
           * @param {OpenSeadragon.Point} point
           */
          getTileAtPoint: function (level, point) {
            if (this.emulateLegacyImagePyramid) {
              return new $.Point(0, 0)
            }

            return $.TileSource.prototype.getTileAtPoint.call(
              this,
              level,
              point
            )
          },

          /**
           * Responsible for retrieving the url which will return an image for the
           * region specified by the given x, y, and level components.
           * @function
           * @param {Number} level - z index
           * @param {Number} x
           * @param {Number} y
           * @throws {Error}
           */
          getTileUrl: function (level, x, y) {
            if (this.emulateLegacyImagePyramid) {
              var url = null
              if (
                this.levels.length > 0 &&
                level >= this.minLevel &&
                level <= this.maxLevel
              ) {
                url = this.levels[level].url
              }
              return url
            }

            //# constants
            var IIIF_ROTATION = '0',
              //## get the scale (level as a decimal)
              scale = Math.pow(0.5, this.maxLevel - level),
              //# image dimensions at this level
              levelWidth = Math.round(this.width * scale),
              levelHeight = Math.round(this.height * scale),
              //## iiif region
              tileWidth,
              tileHeight,
              iiifTileSizeWidth,
              iiifTileSizeHeight,
              iiifRegion,
              iiifTileX,
              iiifTileY,
              iiifTileW,
              iiifTileH,
              iiifSize,
              iiifSizeW,
              iiifSizeH,
              iiifQuality,
              uri

            tileWidth = this.getTileWidth(level)
            tileHeight = this.getTileHeight(level)
            iiifTileSizeWidth = Math.round(tileWidth / scale)
            iiifTileSizeHeight = Math.round(tileHeight / scale)
            if (this.version === 1) {
              iiifQuality = 'native.' + this.tileFormat
            } else {
              iiifQuality = 'default.' + this.tileFormat
            }
            if (levelWidth < tileWidth && levelHeight < tileHeight) {
              if (this.version === 2 && levelWidth === this.width) {
                iiifSize = 'full'
              } else if (
                this.version === 3 &&
                levelWidth === this.width &&
                levelHeight === this.height
              ) {
                iiifSize = 'max'
              } else if (this.version === 3) {
                iiifSize = levelWidth + ',' + levelHeight
              } else {
                iiifSize = levelWidth + ','
              }
              iiifRegion = 'full'
            } else {
              iiifTileX = x * iiifTileSizeWidth
              iiifTileY = y * iiifTileSizeHeight
              iiifTileW = Math.min(iiifTileSizeWidth, this.width - iiifTileX)
              iiifTileH = Math.min(iiifTileSizeHeight, this.height - iiifTileY)
              if (
                x === 0 &&
                y === 0 &&
                iiifTileW === this.width &&
                iiifTileH === this.height
              ) {
                iiifRegion = 'full'
              } else {
                iiifRegion = [iiifTileX, iiifTileY, iiifTileW, iiifTileH].join(
                  ','
                )
              }
              iiifSizeW = Math.round(iiifTileW * scale)
              iiifSizeH = Math.round(iiifTileH * scale)
              if (this.version === 2 && iiifSizeW === this.width) {
                iiifSize = 'full'
              } else if (
                this.version === 3 &&
                iiifSizeW === this.width &&
                iiifSizeH === this.height
              ) {
                iiifSize = 'max'
              } else if (this.version === 3) {
                iiifSize = iiifSizeW + ',' + iiifSizeH
              } else {
                iiifSize = iiifSizeW + ','
              }
            }
            uri = [
              this._id,
              iiifRegion,
              iiifSize,
              IIIF_ROTATION,
              iiifQuality,
            ].join('/')

            return uri
          },

          __testonly__: {
            canBeTiled: canBeTiled,
            constructLevels: constructLevels,
          },
        }
      )

      /**
       * Determine whether arbitrary tile requests can be made against a service with the given profile
       * @function
       * @param {Object} options
       * @param {Array|String} options.profile
       * @param {Number} options.version
       * @param {String[]} options.extraFeatures
       * @returns {Boolean}
       */
      function canBeTiled(options) {
        var level0Profiles = [
          'http://library.stanford.edu/iiif/image-api/compliance.html#level0',
          'http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0',
          'http://iiif.io/api/image/2/level0.json',
          'level0',
          'https://iiif.io/api/image/3/level0.json',
        ]
        var profileLevel = Array.isArray(options.profile)
          ? options.profile[0]
          : options.profile
        var isLevel0 = level0Profiles.indexOf(profileLevel) !== -1
        var hasCanoncicalSizeFeature = false
        if (
          options.version === 2 &&
          options.profile.length > 1 &&
          options.profile[1].supports
        ) {
          hasCanoncicalSizeFeature =
            options.profile[1].supports.indexOf('sizeByW') !== -1
        }
        if (options.version === 3 && options.extraFeatures) {
          hasCanoncicalSizeFeature =
            options.extraFeatures.indexOf('sizeByWh') !== -1
        }
        return !isLevel0 || hasCanoncicalSizeFeature
      }

      /**
       * Build the legacy pyramid URLs (one tile per level)
       * @function
       * @param {object} options - infoJson
       * @throws {Error}
       */
      function constructLevels(options) {
        var levels = []
        for (var i = 0; i < options.sizes.length; i++) {
          levels.push({
            url:
              options._id +
              '/full/' +
              options.sizes[i].width +
              ',' +
              (options.version === 3 ? options.sizes[i].height : '') +
              '/0/default.' +
              options.tileFormat,
            width: options.sizes[i].width,
            height: options.sizes[i].height,
          })
        }
        return levels.sort(function (a, b) {
          return a.width - b.width
        })
      }

      function configureFromXml10(xmlDoc) {
        //parse the xml
        if (!xmlDoc || !xmlDoc.documentElement) {
          throw new Error($.getString('Errors.Xml'))
        }

        var root = xmlDoc.documentElement,
          rootName = root.tagName,
          configuration = null

        if (rootName === 'info') {
          try {
            configuration = {}
            parseXML10(root, configuration)
            return configuration
          } catch (e) {
            throw e instanceof Error ? e : new Error($.getString('Errors.IIIF'))
          }
        }
        throw new Error($.getString('Errors.IIIF'))
      }

      function parseXML10(node, configuration, property) {
        var i, value
        if (node.nodeType === 3 && property) {
          //text node
          value = node.nodeValue.trim()
          if (value.match(/^\d*$/)) {
            value = Number(value)
          }
          if (!configuration[property]) {
            configuration[property] = value
          } else {
            if (!$.isArray(configuration[property])) {
              configuration[property] = [configuration[property]]
            }
            configuration[property].push(value)
          }
        } else if (node.nodeType === 1) {
          for (i = 0; i < node.childNodes.length; i++) {
            parseXML10(node.childNodes[i], configuration, node.nodeName)
          }
        }
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - OsmTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    /*
     * Derived from the OSM tile source in Rainer Simon's seajax-utils project
     * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
     * the included code to the OpenSeadragon project under the New BSD license;
     * see <https://github.com/openseadragon/openseadragon/issues/58>.
     */
    ;(function ($) {
      /**
       * @class OsmTileSource
       * @classdesc A tilesource implementation for OpenStreetMap.<br><br>
       *
       * Note 1. Zoomlevels. Deep Zoom and OSM define zoom levels differently. In  Deep
       * Zoom, level 0 equals an image of 1x1 pixels. In OSM, level 0 equals an image of
       * 256x256 levels (see http://gasi.ch/blog/inside-deep-zoom-2). I.e. there is a
       * difference of log2(256)=8 levels.<br><br>
       *
       * Note 2. Image dimension. According to the OSM Wiki
       * (http://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Zoom_levels)
       * the highest Mapnik zoom level has 256.144x256.144 tiles, with a 256x256
       * pixel size. I.e. the Deep Zoom image dimension is 65.572.864x65.572.864
       * pixels.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @param {Number|Object} width - the pixel width of the image or the idiomatic
       *      options object which is used instead of positional arguments.
       * @param {Number} height
       * @param {Number} tileSize
       * @param {Number} tileOverlap
       * @param {String} tilesUrl
       */
      $.OsmTileSource = function (
        width,
        height,
        tileSize,
        tileOverlap,
        tilesUrl
      ) {
        var options

        if ($.isPlainObject(width)) {
          options = width
        } else {
          options = {
            width: arguments[0],
            height: arguments[1],
            tileSize: arguments[2],
            tileOverlap: arguments[3],
            tilesUrl: arguments[4],
          }
        }
        //apply default setting for standard public OpenStreatMaps service
        //but allow them to be specified so fliks can host there own instance
        //or apply against other services supportting the same standard
        if (!options.width || !options.height) {
          options.width = 65572864
          options.height = 65572864
        }
        if (!options.tileSize) {
          options.tileSize = 256
          options.tileOverlap = 0
        }
        if (!options.tilesUrl) {
          options.tilesUrl = 'http://tile.openstreetmap.org/'
        }
        options.minLevel = 8

        $.TileSource.apply(this, [options])
      }

      $.extend(
        $.OsmTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.OsmTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            return data.type && 'openstreetmaps' === data.type
          },

          /**
           *
           * @function
           * @param {Object} data - the raw configuration
           * @param {String} url - the url the data was retrieved from if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (data, url, postData) {
            return data
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           */
          getTileUrl: function (level, x, y) {
            return this.tilesUrl + (level - 8) + '/' + x + '/' + y + '.png'
          },
        }
      )
    })(OpenSeadragon)

    /*
     * OpenSeadragon - TmsTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */

    /*
     * Derived from the TMS tile source in Rainer Simon's seajax-utils project
     * <http://github.com/rsimon/seajax-utils>.  Rainer Simon has contributed
     * the included code to the OpenSeadragon project under the New BSD license;
     * see <https://github.com/openseadragon/openseadragon/issues/58>.
     */
    ;(function ($) {
      /**
       * @class TmsTileSource
       * @classdesc A tilesource implementation for Tiled Map Services (TMS).
       * TMS tile scheme ( [ as supported by OpenLayers ] is described here
       * ( http://openlayers.org/dev/examples/tms.html ).
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @param {Number|Object} width - the pixel width of the image or the idiomatic
       *      options object which is used instead of positional arguments.
       * @param {Number} height
       * @param {Number} tileSize
       * @param {Number} tileOverlap
       * @param {String} tilesUrl
       */
      $.TmsTileSource = function (
        width,
        height,
        tileSize,
        tileOverlap,
        tilesUrl
      ) {
        var options

        if ($.isPlainObject(width)) {
          options = width
        } else {
          options = {
            width: arguments[0],
            height: arguments[1],
            tileSize: arguments[2],
            tileOverlap: arguments[3],
            tilesUrl: arguments[4],
          }
        }
        // TMS has integer multiples of 256 for width/height and adds buffer
        // if necessary -> account for this!
        var bufferedWidth = Math.ceil(options.width / 256) * 256,
          bufferedHeight = Math.ceil(options.height / 256) * 256,
          max

        // Compute number of zoomlevels in this tileset
        if (bufferedWidth > bufferedHeight) {
          max = bufferedWidth / 256
        } else {
          max = bufferedHeight / 256
        }
        options.maxLevel = Math.ceil(Math.log(max) / Math.log(2)) - 1
        options.tileSize = 256
        options.width = bufferedWidth
        options.height = bufferedHeight

        $.TileSource.apply(this, [options])
      }

      $.extend(
        $.TmsTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.TmsTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            return data.type && 'tiledmapservice' === data.type
          },

          /**
           *
           * @function
           * @param {Object} data - the raw configuration
           * @param {String} url - the url the data was retrieved from if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (data, url, postData) {
            return data
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           */
          getTileUrl: function (level, x, y) {
            // Convert from Deep Zoom definition to TMS zoom definition
            var yTiles = this.getNumTiles(level).y - 1

            return this.tilesUrl + level + '/' + x + '/' + (yTiles - y) + '.png'
          },
        }
      )
    })(OpenSeadragon)
    ;(function ($) {
      /**
         * @class ZoomifyTileSource
         * @classdesc A tilesource implementation for the zoomify format.
         *
         * A description of the format can be found here:
         * https://ecommons.cornell.edu/bitstream/handle/1813/5410/Introducing_Zoomify_Image.pdf
         *
         * There are two ways of creating a zoomify tilesource for openseadragon
         *
         * 1) Supplying all necessary information in the tilesource object. A minimal example object for this method looks like this:
         *
         * {
         *      type: "zoomifytileservice",
         *      width: 1000,
         *      height: 1000,
         *      tilesUrl: "/test/data/zoomify/"
         * }
         *
         * The tileSize is set to 256 (the usual Zoomify default) when it is not defined. The tileUrl must the path to the image _directory_.
         *
         * 2) Loading image metadata from xml file: (CURRENTLY NOT SUPPORTED)
         *
         * When creating zoomify formatted images one "xml" like file with name ImageProperties.xml
         * will be created as well. Here is an example of such a file:
         *
         * <IMAGE_PROPERTIES WIDTH="1000" HEIGHT="1000" NUMTILES="21" NUMIMAGES="1" VERSION="1.8" TILESIZE="256" />
         *
         * To use this xml file as metadata source you must supply the path to the ImageProperties.xml file and leave out all other parameters:
         * As stated above, this method of loading a zoomify tilesource is currently not supported
         *
         * {
         *      type: "zoomifytileservice",
         *      tilesUrl: "/test/data/zoomify/ImageProperties.xml"
         * }

        *
        * @memberof OpenSeadragon
         * @extends OpenSeadragon.TileSource
         * @param {Number} width - the pixel width of the image.
         * @param {Number} height
         * @param {Number} tileSize
         * @param {String} tilesUrl
         */
      $.ZoomifyTileSource = function (options) {
        if (typeof options.tileSize === 'undefined') {
          options.tileSize = 256
        }

        if (typeof options.fileFormat === 'undefined') {
          options.fileFormat = 'jpg'
          this.fileFormat = options.fileFormat
        }

        var currentImageSize = {
          x: options.width,
          y: options.height,
        }
        options.imageSizes = [
          {
            x: options.width,
            y: options.height,
          },
        ]
        options.gridSize = [
          this._getGridSize(options.width, options.height, options.tileSize),
        ]

        while (
          parseInt(currentImageSize.x, 10) > options.tileSize ||
          parseInt(currentImageSize.y, 10) > options.tileSize
        ) {
          currentImageSize.x = Math.floor(currentImageSize.x / 2)
          currentImageSize.y = Math.floor(currentImageSize.y / 2)
          options.imageSizes.push({
            x: currentImageSize.x,
            y: currentImageSize.y,
          })
          options.gridSize.push(
            this._getGridSize(
              currentImageSize.x,
              currentImageSize.y,
              options.tileSize
            )
          )
        }
        options.imageSizes.reverse()
        options.gridSize.reverse()
        options.minLevel = 0
        options.maxLevel = options.gridSize.length - 1

        OpenSeadragon.TileSource.apply(this, [options])
      }

      $.extend(
        $.ZoomifyTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.ZoomifyTileSource.prototype */ {
          //private
          _getGridSize: function (width, height, tileSize) {
            return {
              x: Math.ceil(width / tileSize),
              y: Math.ceil(height / tileSize),
            }
          },

          //private
          _calculateAbsoluteTileNumber: function (level, x, y) {
            var num = 0
            var size = {}

            //Sum up all tiles below the level we want the number of tiles
            for (var z = 0; z < level; z++) {
              size = this.gridSize[z]
              num += size.x * size.y
            }
            //Add the tiles of the level
            size = this.gridSize[level]
            num += size.x * y + x
            return num
          },

          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            return data.type && 'zoomifytileservice' === data.type
          },

          /**
           *
           * @function
           * @param {Object} data - the raw configuration
           * @param {String} url - the url the data was retrieved from if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (data, url, postData) {
            return data
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           */
          getTileUrl: function (level, x, y) {
            //console.log(level);
            var result = 0
            var num = this._calculateAbsoluteTileNumber(level, x, y)
            result = Math.floor(num / 256)
            return (
              this.tilesUrl +
              'TileGroup' +
              result +
              '/' +
              level +
              '-' +
              x +
              '-' +
              y +
              '.' +
              this.fileFormat
            )
          },
        }
      )
    })(OpenSeadragon)

    /*
     * OpenSeadragon - LegacyTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class LegacyTileSource
       * @classdesc The LegacyTileSource allows simple, traditional image pyramids to be loaded
       * into an OpenSeadragon Viewer.  Basically, this translates to the historically
       * common practice of starting with a 'master' image, maybe a tiff for example,
       * and generating a set of 'service' images like one or more thumbnails, a medium
       * resolution image and a high resolution image in standard web formats like
       * png or jpg.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @param {Array} levels An array of file descriptions, each is an object with
       *      a 'url', a 'width', and a 'height'.  Overriding classes can expect more
       *      properties but these properties are sufficient for this implementation.
       *      Additionally, the levels are required to be listed in order from
       *      smallest to largest.
       * @property {Number} aspectRatio
       * @property {Number} dimensions
       * @property {Number} tileSize
       * @property {Number} tileOverlap
       * @property {Number} minLevel
       * @property {Number} maxLevel
       * @property {Array}  levels
       */
      $.LegacyTileSource = function (levels) {
        var options, width, height

        if ($.isArray(levels)) {
          options = {
            type: 'legacy-image-pyramid',
            levels: levels,
          }
        }

        //clean up the levels to make sure we support all formats
        options.levels = filterFiles(options.levels)

        if (options.levels.length > 0) {
          width = options.levels[options.levels.length - 1].width
          height = options.levels[options.levels.length - 1].height
        } else {
          width = 0
          height = 0
          $.console.error('No supported image formats found')
        }

        $.extend(true, options, {
          width: width,
          height: height,
          tileSize: Math.max(height, width),
          tileOverlap: 0,
          minLevel: 0,
          maxLevel: options.levels.length > 0 ? options.levels.length - 1 : 0,
        })

        $.TileSource.apply(this, [options])

        this.levels = options.levels
      }

      $.extend(
        $.LegacyTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.LegacyTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            return (
              (data.type && 'legacy-image-pyramid' === data.type) ||
              (data.documentElement &&
                'legacy-image-pyramid' ===
                  data.documentElement.getAttribute('type'))
            )
          },

          /**
           *
           * @function
           * @param {Object|XMLDocument} configuration - the raw configuration
           * @param {String} dataUrl - the url the data was retrieved from if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (configuration, dataUrl, postData) {
            var options

            if (!$.isPlainObject(configuration)) {
              options = configureFromXML(this, configuration)
            } else {
              options = configureFromObject(this, configuration)
            }

            return options
          },

          /**
           * @function
           * @param {Number} level
           */
          getLevelScale: function (level) {
            var levelScale = NaN
            if (
              this.levels.length > 0 &&
              level >= this.minLevel &&
              level <= this.maxLevel
            ) {
              levelScale =
                this.levels[level].width / this.levels[this.maxLevel].width
            }
            return levelScale
          },

          /**
           * @function
           * @param {Number} level
           */
          getNumTiles: function (level) {
            var scale = this.getLevelScale(level)
            if (scale) {
              return new $.Point(1, 1)
            } else {
              return new $.Point(0, 0)
            }
          },

          /**
           * This method is not implemented by this class other than to throw an Error
           * announcing you have to implement it.  Because of the variety of tile
           * server technologies, and various specifications for building image
           * pyramids, this method is here to allow easy integration.
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           * @throws {Error}
           */
          getTileUrl: function (level, x, y) {
            var url = null
            if (
              this.levels.length > 0 &&
              level >= this.minLevel &&
              level <= this.maxLevel
            ) {
              url = this.levels[level].url
            }
            return url
          },
        }
      )

      /**
       * This method removes any files from the Array which don't conform to our
       * basic requirements for a 'level' in the LegacyTileSource.
       * @private
       * @inner
       * @function
       */
      function filterFiles(files) {
        var filtered = [],
          file,
          i
        for (i = 0; i < files.length; i++) {
          file = files[i]
          if (file.height && file.width && file.url) {
            //This is sufficient to serve as a level
            filtered.push({
              url: file.url,
              width: Number(file.width),
              height: Number(file.height),
            })
          } else {
            $.console.error(
              'Unsupported image format: %s',
              file.url ? file.url : '<no URL>'
            )
          }
        }

        return filtered.sort(function (a, b) {
          return a.height - b.height
        })
      }

      /**
       * @private
       * @inner
       * @function
       */
      function configureFromXML(tileSource, xmlDoc) {
        if (!xmlDoc || !xmlDoc.documentElement) {
          throw new Error($.getString('Errors.Xml'))
        }

        var root = xmlDoc.documentElement,
          rootName = root.tagName,
          conf = null,
          levels = [],
          level,
          i

        if (rootName === 'image') {
          try {
            conf = {
              type: root.getAttribute('type'),
              levels: [],
            }

            levels = root.getElementsByTagName('level')
            for (i = 0; i < levels.length; i++) {
              level = levels[i]

              conf.levels.push({
                url: level.getAttribute('url'),
                width: parseInt(level.getAttribute('width'), 10),
                height: parseInt(level.getAttribute('height'), 10),
              })
            }

            return configureFromObject(tileSource, conf)
          } catch (e) {
            throw e instanceof Error
              ? e
              : new Error('Unknown error parsing Legacy Image Pyramid XML.')
          }
        } else if (rootName === 'collection') {
          throw new Error('Legacy Image Pyramid Collections not yet supported.')
        } else if (rootName === 'error') {
          throw new Error('Error: ' + xmlDoc)
        }

        throw new Error('Unknown element ' + rootName)
      }

      /**
       * @private
       * @inner
       * @function
       */
      function configureFromObject(tileSource, configuration) {
        return configuration.levels
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - ImageTileSource
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class ImageTileSource
       * @classdesc The ImageTileSource allows a simple image to be loaded
       * into an OpenSeadragon Viewer.
       * There are 2 ways to open an ImageTileSource:
       * 1. viewer.open({type: 'image', url: fooUrl});
       * 2. viewer.open(new OpenSeadragon.ImageTileSource({url: fooUrl}));
       *
       * With the first syntax, the crossOriginPolicy, ajaxWithCredentials and
       * useCanvas options are inherited from the viewer if they are not
       * specified directly in the options object.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.TileSource
       * @param {Object} options Options object.
       * @param {String} options.url URL of the image
       * @param {Boolean} [options.buildPyramid=true] If set to true (default), a
       * pyramid will be built internally to provide a better downsampling.
       * @param {String|Boolean} [options.crossOriginPolicy=false] Valid values are
       * 'Anonymous', 'use-credentials', and false. If false, image requests will
       * not use CORS preventing internal pyramid building for images from other
       * domains.
       * @param {String|Boolean} [options.ajaxWithCredentials=false] Whether to set
       * the withCredentials XHR flag for AJAX requests (when loading tile sources).
       * @param {Boolean} [options.useCanvas=true] Set to false to prevent any use
       * of the canvas API.
       */
      $.ImageTileSource = function (options) {
        options = $.extend(
          {
            buildPyramid: true,
            crossOriginPolicy: false,
            ajaxWithCredentials: false,
            useCanvas: true,
          },
          options
        )
        $.TileSource.apply(this, [options])
      }

      $.extend(
        $.ImageTileSource.prototype,
        $.TileSource.prototype,
        /** @lends OpenSeadragon.ImageTileSource.prototype */ {
          /**
           * Determine if the data and/or url imply the image service is supported by
           * this tile source.
           * @function
           * @param {Object|Array} data
           * @param {String} optional - url
           */
          supports: function (data, url) {
            return data.type && data.type === 'image'
          },
          /**
           *
           * @function
           * @param {Object} options - the options
           * @param {String} dataUrl - the url the image was retrieved from, if any.
           * @param {String} postData - HTTP POST data in k=v&k2=v2... form or null
           * @returns {Object} options - A dictionary of keyword arguments sufficient
           *      to configure this tile sources constructor.
           */
          configure: function (options, dataUrl, postData) {
            return options
          },
          /**
           * Responsible for retrieving, and caching the
           * image metadata pertinent to this TileSources implementation.
           * @function
           * @param {String} url
           * @throws {Error}
           */
          getImageInfo: function (url) {
            var image = (this._image = new Image())
            var _this = this

            if (this.crossOriginPolicy) {
              image.crossOrigin = this.crossOriginPolicy
            }
            if (this.ajaxWithCredentials) {
              image.useCredentials = this.ajaxWithCredentials
            }

            $.addEvent(image, 'load', function () {
              _this.width = image.naturalWidth
              _this.height = image.naturalHeight
              _this.aspectRatio = _this.width / _this.height
              _this.dimensions = new $.Point(_this.width, _this.height)
              _this._tileWidth = _this.width
              _this._tileHeight = _this.height
              _this.tileOverlap = 0
              _this.minLevel = 0
              _this.levels = _this._buildLevels()
              _this.maxLevel = _this.levels.length - 1

              _this.ready = true

              // Note: this event is documented elsewhere, in TileSource
              _this.raiseEvent('ready', { tileSource: _this })
            })

            $.addEvent(image, 'error', function () {
              // Note: this event is documented elsewhere, in TileSource
              _this.raiseEvent('open-failed', {
                message: 'Error loading image at ' + url,
                source: url,
              })
            })

            image.src = url
          },
          /**
           * @function
           * @param {Number} level
           */
          getLevelScale: function (level) {
            var levelScale = NaN
            if (level >= this.minLevel && level <= this.maxLevel) {
              levelScale =
                this.levels[level].width / this.levels[this.maxLevel].width
            }
            return levelScale
          },
          /**
           * @function
           * @param {Number} level
           */
          getNumTiles: function (level) {
            var scale = this.getLevelScale(level)
            if (scale) {
              return new $.Point(1, 1)
            } else {
              return new $.Point(0, 0)
            }
          },
          /**
           * Retrieves a tile url
           * @function
           * @param {Number} level Level of the tile
           * @param {Number} x x coordinate of the tile
           * @param {Number} y y coordinate of the tile
           */
          getTileUrl: function (level, x, y) {
            var url = null
            if (level >= this.minLevel && level <= this.maxLevel) {
              url = this.levels[level].url
            }
            return url
          },
          /**
           * Retrieves a tile context 2D
           * @function
           * @param {Number} level Level of the tile
           * @param {Number} x x coordinate of the tile
           * @param {Number} y y coordinate of the tile
           */
          getContext2D: function (level, x, y) {
            var context = null
            if (level >= this.minLevel && level <= this.maxLevel) {
              context = this.levels[level].context2D
            }
            return context
          },
          /**
           * Destroys ImageTileSource
           * @function
           */
          destroy: function () {
            this._freeupCanvasMemory()
          },

          // private
          //
          // Builds the different levels of the pyramid if possible
          // (i.e. if canvas API enabled and no canvas tainting issue).
          _buildLevels: function () {
            var levels = [
              {
                url: this._image.src,
                width: this._image.naturalWidth,
                height: this._image.naturalHeight,
              },
            ]

            if (!this.buildPyramid || !$.supportsCanvas || !this.useCanvas) {
              // We don't need the image anymore. Allows it to be GC.
              delete this._image
              return levels
            }

            var currentWidth = this._image.naturalWidth
            var currentHeight = this._image.naturalHeight

            var bigCanvas = document.createElement('canvas')
            var bigContext = bigCanvas.getContext('2d')

            bigCanvas.width = currentWidth
            bigCanvas.height = currentHeight
            bigContext.drawImage(this._image, 0, 0, currentWidth, currentHeight)
            // We cache the context of the highest level because the browser
            // is a lot faster at downsampling something it already has
            // downsampled before.
            levels[0].context2D = bigContext
            // We don't need the image anymore. Allows it to be GC.
            delete this._image

            if ($.isCanvasTainted(bigCanvas)) {
              // If the canvas is tainted, we can't compute the pyramid.
              return levels
            }

            // We build smaller levels until either width or height becomes
            // 1 pixel wide.
            while (currentWidth >= 2 && currentHeight >= 2) {
              currentWidth = Math.floor(currentWidth / 2)
              currentHeight = Math.floor(currentHeight / 2)
              var smallCanvas = document.createElement('canvas')
              var smallContext = smallCanvas.getContext('2d')
              smallCanvas.width = currentWidth
              smallCanvas.height = currentHeight
              smallContext.drawImage(
                bigCanvas,
                0,
                0,
                currentWidth,
                currentHeight
              )

              levels.splice(0, 0, {
                context2D: smallContext,
                width: currentWidth,
                height: currentHeight,
              })

              bigCanvas = smallCanvas
              bigContext = smallContext
            }
            return levels
          },
          /**
           * Free up canvas memory
           * (iOS 12 or higher on 2GB RAM device has only 224MB canvas memory,
           * and Safari keeps canvas until its height and width will be set to 0).
           * @function
           */
          _freeupCanvasMemory: function () {
            for (var i = 0; i < this.levels.length; i++) {
              if (this.levels[i].context2D) {
                this.levels[i].context2D.canvas.height = 0
                this.levels[i].context2D.canvas.width = 0
              }
            }
          },
        }
      )
    })(OpenSeadragon)

    /*
     * OpenSeadragon - TileSourceCollection
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      // deprecated
      $.TileSourceCollection = function (tileSize, tileSources, rows, layout) {
        $.console.error('TileSourceCollection is deprecated; use World instead')
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Button
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * An enumeration of button states
       * @member ButtonState
       * @memberof OpenSeadragon
       * @static
       * @type {Object}
       * @property {Number} REST
       * @property {Number} GROUP
       * @property {Number} HOVER
       * @property {Number} DOWN
       */
      $.ButtonState = {
        REST: 0,
        GROUP: 1,
        HOVER: 2,
        DOWN: 3,
      }

      /**
       * @class Button
       * @classdesc Manages events, hover states for individual buttons, tool-tips, as well
       * as fading the buttons out when the user has not interacted with them
       * for a specified period.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.EventSource
       * @param {Object} options
       * @param {Element} [options.element=null] Element to use as the button. If not specified, an HTML &lt;div&gt; element is created.
       * @param {String} [options.tooltip=null] Provides context help for the button when the
       *  user hovers over it.
       * @param {String} [options.srcRest=null] URL of image to use in 'rest' state.
       * @param {String} [options.srcGroup=null] URL of image to use in 'up' state.
       * @param {String} [options.srcHover=null] URL of image to use in 'hover' state.
       * @param {String} [options.srcDown=null] URL of image to use in 'down' state.
       * @param {Number} [options.fadeDelay=0] How long to wait before fading.
       * @param {Number} [options.fadeLength=2000] How long should it take to fade the button.
       * @param {OpenSeadragon.EventHandler} [options.onPress=null] Event handler callback for {@link OpenSeadragon.Button.event:press}.
       * @param {OpenSeadragon.EventHandler} [options.onRelease=null] Event handler callback for {@link OpenSeadragon.Button.event:release}.
       * @param {OpenSeadragon.EventHandler} [options.onClick=null] Event handler callback for {@link OpenSeadragon.Button.event:click}.
       * @param {OpenSeadragon.EventHandler} [options.onEnter=null] Event handler callback for {@link OpenSeadragon.Button.event:enter}.
       * @param {OpenSeadragon.EventHandler} [options.onExit=null] Event handler callback for {@link OpenSeadragon.Button.event:exit}.
       * @param {OpenSeadragon.EventHandler} [options.onFocus=null] Event handler callback for {@link OpenSeadragon.Button.event:focus}.
       * @param {OpenSeadragon.EventHandler} [options.onBlur=null] Event handler callback for {@link OpenSeadragon.Button.event:blur}.
       * @param {Object} [options.userData=null] Arbitrary object to be passed unchanged to any attached handler methods.
       */
      $.Button = function (options) {
        var _this = this

        $.EventSource.call(this)

        $.extend(
          true,
          this,
          {
            tooltip: null,
            srcRest: null,
            srcGroup: null,
            srcHover: null,
            srcDown: null,
            clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
            /**
             * How long to wait before fading.
             * @member {Number} fadeDelay
             * @memberof OpenSeadragon.Button#
             */
            fadeDelay: 0,
            /**
             * How long should it take to fade the button.
             * @member {Number} fadeLength
             * @memberof OpenSeadragon.Button#
             */
            fadeLength: 2000,
            onPress: null,
            onRelease: null,
            onClick: null,
            onEnter: null,
            onExit: null,
            onFocus: null,
            onBlur: null,
            userData: null,
          },
          options
        )

        /**
         * The button element.
         * @member {Element} element
         * @memberof OpenSeadragon.Button#
         */
        this.element = options.element || $.makeNeutralElement('div')

        //if the user has specified the element to bind the control to explicitly
        //then do not add the default control images
        if (!options.element) {
          this.imgRest = $.makeTransparentImage(this.srcRest)
          this.imgGroup = $.makeTransparentImage(this.srcGroup)
          this.imgHover = $.makeTransparentImage(this.srcHover)
          this.imgDown = $.makeTransparentImage(this.srcDown)

          this.imgRest.alt =
            this.imgGroup.alt =
            this.imgHover.alt =
            this.imgDown.alt =
              this.tooltip

          // Allow pointer events to pass through the img elements so implicit
          //   pointer capture works on touch devices
          $.setElementPointerEventsNone(this.imgRest)
          $.setElementPointerEventsNone(this.imgGroup)
          $.setElementPointerEventsNone(this.imgHover)
          $.setElementPointerEventsNone(this.imgDown)

          this.element.style.position = 'relative'
          $.setElementTouchActionNone(this.element)

          this.imgGroup.style.position =
            this.imgHover.style.position =
            this.imgDown.style.position =
              'absolute'

          this.imgGroup.style.top =
            this.imgHover.style.top =
            this.imgDown.style.top =
              '0px'

          this.imgGroup.style.left =
            this.imgHover.style.left =
            this.imgDown.style.left =
              '0px'

          this.imgHover.style.visibility = this.imgDown.style.visibility =
            'hidden'

          if (
            $.Browser.vendor === $.BROWSERS.FIREFOX &&
            $.Browser.version < 3
          ) {
            this.imgGroup.style.top =
              this.imgHover.style.top =
              this.imgDown.style.top =
                ''
          }

          this.element.appendChild(this.imgRest)
          this.element.appendChild(this.imgGroup)
          this.element.appendChild(this.imgHover)
          this.element.appendChild(this.imgDown)
        }

        this.addHandler('press', this.onPress)
        this.addHandler('release', this.onRelease)
        this.addHandler('click', this.onClick)
        this.addHandler('enter', this.onEnter)
        this.addHandler('exit', this.onExit)
        this.addHandler('focus', this.onFocus)
        this.addHandler('blur', this.onBlur)

        /**
         * The button's current state.
         * @member {OpenSeadragon.ButtonState} currentState
         * @memberof OpenSeadragon.Button#
         */
        this.currentState = $.ButtonState.GROUP

        // When the button last began to fade.
        this.fadeBeginTime = null
        // Whether this button should fade after user stops interacting with the viewport.
        this.shouldFade = false

        this.element.style.display = 'inline-block'
        this.element.style.position = 'relative'
        this.element.title = this.tooltip

        /**
         * Tracks mouse/touch/key events on the button.
         * @member {OpenSeadragon.MouseTracker} tracker
         * @memberof OpenSeadragon.Button#
         */
        this.tracker = new $.MouseTracker({
          userData: 'Button.tracker',
          element: this.element,
          clickTimeThreshold: this.clickTimeThreshold,
          clickDistThreshold: this.clickDistThreshold,

          enterHandler: function (event) {
            if (event.insideElementPressed) {
              inTo(_this, $.ButtonState.DOWN)
              /**
               * Raised when the cursor enters the Button element.
               *
               * @event enter
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('enter', { originalEvent: event.originalEvent })
            } else if (!event.buttonDownAny) {
              inTo(_this, $.ButtonState.HOVER)
            }
          },

          focusHandler: function (event) {
            _this.tracker.enterHandler(event)
            /**
             * Raised when the Button element receives focus.
             *
             * @event focus
             * @memberof OpenSeadragon.Button
             * @type {object}
             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
             * @property {Object} originalEvent - The original DOM event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            _this.raiseEvent('focus', { originalEvent: event.originalEvent })
          },

          leaveHandler: function (event) {
            outTo(_this, $.ButtonState.GROUP)
            if (event.insideElementPressed) {
              /**
               * Raised when the cursor leaves the Button element.
               *
               * @event exit
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('exit', { originalEvent: event.originalEvent })
            }
          },

          blurHandler: function (event) {
            _this.tracker.leaveHandler(event)
            /**
             * Raised when the Button element loses focus.
             *
             * @event blur
             * @memberof OpenSeadragon.Button
             * @type {object}
             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
             * @property {Object} originalEvent - The original DOM event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            _this.raiseEvent('blur', { originalEvent: event.originalEvent })
          },

          pressHandler: function (event) {
            inTo(_this, $.ButtonState.DOWN)
            /**
             * Raised when a mouse button is pressed or touch occurs in the Button element.
             *
             * @event press
             * @memberof OpenSeadragon.Button
             * @type {object}
             * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
             * @property {Object} originalEvent - The original DOM event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            _this.raiseEvent('press', { originalEvent: event.originalEvent })
          },

          releaseHandler: function (event) {
            if (event.insideElementPressed && event.insideElementReleased) {
              outTo(_this, $.ButtonState.HOVER)
              /**
               * Raised when the mouse button is released or touch ends in the Button element.
               *
               * @event release
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('release', {
                originalEvent: event.originalEvent,
              })
            } else if (event.insideElementPressed) {
              outTo(_this, $.ButtonState.GROUP)
            } else {
              inTo(_this, $.ButtonState.HOVER)
            }
          },

          clickHandler: function (event) {
            if (event.quick) {
              /**
               * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
               *
               * @event click
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('click', { originalEvent: event.originalEvent })
            }
          },

          keyHandler: function (event) {
            //console.log( "%s : handling key %s!", _this.tooltip, event.keyCode);
            if (13 === event.keyCode) {
              /***
               * Raised when a mouse button is pressed and released or touch is initiated and ended in the Button element within the time and distance threshold.
               *
               * @event click
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('click', { originalEvent: event.originalEvent })
              /***
               * Raised when the mouse button is released or touch ends in the Button element.
               *
               * @event release
               * @memberof OpenSeadragon.Button
               * @type {object}
               * @property {OpenSeadragon.Button} eventSource - A reference to the Button which raised the event.
               * @property {Object} originalEvent - The original DOM event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              _this.raiseEvent('release', {
                originalEvent: event.originalEvent,
              })

              event.preventDefault = true
            } else {
              event.preventDefault = false
            }
          },
        })

        outTo(this, $.ButtonState.REST)
      }

      $.extend(
        $.Button.prototype,
        $.EventSource.prototype,
        /** @lends OpenSeadragon.Button.prototype */ {
          /**
           * Used by a button container element (e.g. a ButtonGroup) to transition the button state
           * to ButtonState.GROUP.
           * @function
           */
          notifyGroupEnter: function () {
            inTo(this, $.ButtonState.GROUP)
          },

          /**
           * Used by a button container element (e.g. a ButtonGroup) to transition the button state
           * to ButtonState.REST.
           * @function
           */
          notifyGroupExit: function () {
            outTo(this, $.ButtonState.REST)
          },

          /**
           * @function
           */
          disable: function () {
            this.notifyGroupExit()
            this.element.disabled = true
            this.tracker.setTracking(false)
            $.setElementOpacity(this.element, 0.2, true)
          },

          /**
           * @function
           */
          enable: function () {
            this.element.disabled = false
            this.tracker.setTracking(true)
            $.setElementOpacity(this.element, 1.0, true)
            this.notifyGroupEnter()
          },

          destroy: function () {
            if (this.imgRest) {
              this.element.removeChild(this.imgRest)
              this.imgRest = null
            }
            if (this.imgGroup) {
              this.element.removeChild(this.imgGroup)
              this.imgGroup = null
            }
            if (this.imgHover) {
              this.element.removeChild(this.imgHover)
              this.imgHover = null
            }
            if (this.imgDown) {
              this.element.removeChild(this.imgDown)
              this.imgDown = null
            }
            this.removeAllHandlers()
            this.tracker.destroy()
            this.element = null
          },
        }
      )

      function scheduleFade(button) {
        $.requestAnimationFrame(function () {
          updateFade(button)
        })
      }

      function updateFade(button) {
        var currentTime, deltaTime, opacity

        if (button.shouldFade) {
          currentTime = $.now()
          deltaTime = currentTime - button.fadeBeginTime
          opacity = 1.0 - deltaTime / button.fadeLength
          opacity = Math.min(1.0, opacity)
          opacity = Math.max(0.0, opacity)

          if (button.imgGroup) {
            $.setElementOpacity(button.imgGroup, opacity, true)
          }
          if (opacity > 0) {
            // fade again
            scheduleFade(button)
          }
        }
      }

      function beginFading(button) {
        button.shouldFade = true
        button.fadeBeginTime = $.now() + button.fadeDelay
        window.setTimeout(function () {
          scheduleFade(button)
        }, button.fadeDelay)
      }

      function stopFading(button) {
        button.shouldFade = false
        if (button.imgGroup) {
          $.setElementOpacity(button.imgGroup, 1.0, true)
        }
      }

      function inTo(button, newState) {
        if (button.element.disabled) {
          return
        }

        if (
          newState >= $.ButtonState.GROUP &&
          button.currentState === $.ButtonState.REST
        ) {
          stopFading(button)
          button.currentState = $.ButtonState.GROUP
        }

        if (
          newState >= $.ButtonState.HOVER &&
          button.currentState === $.ButtonState.GROUP
        ) {
          if (button.imgHover) {
            button.imgHover.style.visibility = ''
          }
          button.currentState = $.ButtonState.HOVER
        }

        if (
          newState >= $.ButtonState.DOWN &&
          button.currentState === $.ButtonState.HOVER
        ) {
          if (button.imgDown) {
            button.imgDown.style.visibility = ''
          }
          button.currentState = $.ButtonState.DOWN
        }
      }

      function outTo(button, newState) {
        if (button.element.disabled) {
          return
        }

        if (
          newState <= $.ButtonState.HOVER &&
          button.currentState === $.ButtonState.DOWN
        ) {
          if (button.imgDown) {
            button.imgDown.style.visibility = 'hidden'
          }
          button.currentState = $.ButtonState.HOVER
        }

        if (
          newState <= $.ButtonState.GROUP &&
          button.currentState === $.ButtonState.HOVER
        ) {
          if (button.imgHover) {
            button.imgHover.style.visibility = 'hidden'
          }
          button.currentState = $.ButtonState.GROUP
        }

        if (
          newState <= $.ButtonState.REST &&
          button.currentState === $.ButtonState.GROUP
        ) {
          beginFading(button)
          button.currentState = $.ButtonState.REST
        }
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - ButtonGroup
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class ButtonGroup
       * @classdesc Manages events on groups of buttons.
       *
       * @memberof OpenSeadragon
       * @param {Object} options - A dictionary of settings applied against the entire group of buttons.
       * @param {Array} options.buttons Array of buttons
       * @param {Element} [options.element] Element to use as the container
       **/
      $.ButtonGroup = function (options) {
        $.extend(
          true,
          this,
          {
            /**
             * An array containing the buttons themselves.
             * @member {Array} buttons
             * @memberof OpenSeadragon.ButtonGroup#
             */
            buttons: [],
            clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
            clickDistThreshold: $.DEFAULT_SETTINGS.clickDistThreshold,
            labelText: '',
          },
          options
        )

        // copy the button elements  TODO: Why?
        var buttons = this.buttons.concat([]),
          _this = this,
          i

        /**
         * The shared container for the buttons.
         * @member {Element} element
         * @memberof OpenSeadragon.ButtonGroup#
         */
        this.element = options.element || $.makeNeutralElement('div')

        // TODO What if there IS an options.group specified?
        if (!options.group) {
          this.element.style.display = 'inline-block'
          //this.label   = $.makeNeutralElement( "label" );
          //TODO: support labels for ButtonGroups
          //this.label.innerHTML = this.labelText;
          //this.element.appendChild( this.label );
          for (i = 0; i < buttons.length; i++) {
            this.element.appendChild(buttons[i].element)
          }
        }

        $.setElementTouchActionNone(this.element)

        /**
         * Tracks mouse/touch/key events across the group of buttons.
         * @member {OpenSeadragon.MouseTracker} tracker
         * @memberof OpenSeadragon.ButtonGroup#
         */
        this.tracker = new $.MouseTracker({
          userData: 'ButtonGroup.tracker',
          element: this.element,
          clickTimeThreshold: this.clickTimeThreshold,
          clickDistThreshold: this.clickDistThreshold,
          enterHandler: function (event) {
            var i
            for (i = 0; i < _this.buttons.length; i++) {
              _this.buttons[i].notifyGroupEnter()
            }
          },
          leaveHandler: function (event) {
            var i
            if (!event.insideElementPressed) {
              for (i = 0; i < _this.buttons.length; i++) {
                _this.buttons[i].notifyGroupExit()
              }
            }
          },
        })
      }

      /** @lends OpenSeadragon.ButtonGroup.prototype */
      $.ButtonGroup.prototype = {
        /**
         * TODO: Figure out why this is used on the public API and if a more useful
         * api can be created.
         * @function
         * @private
         */
        emulateEnter: function () {
          this.tracker.enterHandler({ eventSource: this.tracker })
        },

        /**
         * TODO: Figure out why this is used on the public API and if a more useful
         * api can be created.
         * @function
         * @private
         */
        emulateLeave: function () {
          this.tracker.leaveHandler({ eventSource: this.tracker })
        },

        destroy: function () {
          while (this.buttons.length) {
            var button = this.buttons.pop()
            this.element.removeChild(button.element)
            button.destroy()
          }
          this.tracker.destroy()
          this.element = null
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Rect
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Rect
       * @classdesc A Rectangle is described by it top left coordinates (x, y), width,
       * height and degrees of rotation around (x, y).
       * Note that the coordinate system used is the one commonly used with images:
       * x increases when going to the right
       * y increases when going to the bottom
       * degrees increases clockwise with 0 being the horizontal
       *
       * The constructor normalizes the rectangle to always have 0 <= degrees < 90
       *
       * @memberof OpenSeadragon
       * @param {Number} [x=0] The vector component 'x'.
       * @param {Number} [y=0] The vector component 'y'.
       * @param {Number} [width=0] The vector component 'width'.
       * @param {Number} [height=0] The vector component 'height'.
       * @param {Number} [degrees=0] Rotation of the rectangle around (x,y) in degrees.
       */
      $.Rect = function (x, y, width, height, degrees) {
        /**
         * The vector component 'x'.
         * @member {Number} x
         * @memberof OpenSeadragon.Rect#
         */
        this.x = typeof x === 'number' ? x : 0
        /**
         * The vector component 'y'.
         * @member {Number} y
         * @memberof OpenSeadragon.Rect#
         */
        this.y = typeof y === 'number' ? y : 0
        /**
         * The vector component 'width'.
         * @member {Number} width
         * @memberof OpenSeadragon.Rect#
         */
        this.width = typeof width === 'number' ? width : 0
        /**
         * The vector component 'height'.
         * @member {Number} height
         * @memberof OpenSeadragon.Rect#
         */
        this.height = typeof height === 'number' ? height : 0

        /**
         * The rotation of the rectangle, in degrees.
         * @member {Number} degrees
         * @memberof OpenSeadragon.Rect#
         */
        this.degrees = typeof degrees === 'number' ? degrees : 0

        // Normalizes the rectangle.
        this.degrees = $.positiveModulo(this.degrees, 360)
        var newTopLeft, newWidth
        if (this.degrees >= 270) {
          newTopLeft = this.getTopRight()
          this.x = newTopLeft.x
          this.y = newTopLeft.y
          newWidth = this.height
          this.height = this.width
          this.width = newWidth
          this.degrees -= 270
        } else if (this.degrees >= 180) {
          newTopLeft = this.getBottomRight()
          this.x = newTopLeft.x
          this.y = newTopLeft.y
          this.degrees -= 180
        } else if (this.degrees >= 90) {
          newTopLeft = this.getBottomLeft()
          this.x = newTopLeft.x
          this.y = newTopLeft.y
          newWidth = this.height
          this.height = this.width
          this.width = newWidth
          this.degrees -= 90
        }
      }

      /**
       * Builds a rectangle having the 3 specified points as summits.
       * @static
       * @memberof OpenSeadragon.Rect
       * @param {OpenSeadragon.Point} topLeft
       * @param {OpenSeadragon.Point} topRight
       * @param {OpenSeadragon.Point} bottomLeft
       * @returns {OpenSeadragon.Rect}
       */
      $.Rect.fromSummits = function (topLeft, topRight, bottomLeft) {
        var width = topLeft.distanceTo(topRight)
        var height = topLeft.distanceTo(bottomLeft)
        var diff = topRight.minus(topLeft)
        var radians = Math.atan(diff.y / diff.x)
        if (diff.x < 0) {
          radians += Math.PI
        } else if (diff.y < 0) {
          radians += 2 * Math.PI
        }
        return new $.Rect(
          topLeft.x,
          topLeft.y,
          width,
          height,
          (radians / Math.PI) * 180
        )
      }

      /** @lends OpenSeadragon.Rect.prototype */
      $.Rect.prototype = {
        /**
         * @function
         * @returns {OpenSeadragon.Rect} a duplicate of this Rect
         */
        clone: function () {
          return new $.Rect(
            this.x,
            this.y,
            this.width,
            this.height,
            this.degrees
          )
        },

        /**
         * The aspect ratio is simply the ratio of width to height.
         * @function
         * @returns {Number} The ratio of width to height.
         */
        getAspectRatio: function () {
          return this.width / this.height
        },

        /**
         * Provides the coordinates of the upper-left corner of the rectangle as a
         * point.
         * @function
         * @returns {OpenSeadragon.Point} The coordinate of the upper-left corner of
         *  the rectangle.
         */
        getTopLeft: function () {
          return new $.Point(this.x, this.y)
        },

        /**
         * Provides the coordinates of the bottom-right corner of the rectangle as a
         * point.
         * @function
         * @returns {OpenSeadragon.Point} The coordinate of the bottom-right corner of
         *  the rectangle.
         */
        getBottomRight: function () {
          return new $.Point(this.x + this.width, this.y + this.height).rotate(
            this.degrees,
            this.getTopLeft()
          )
        },

        /**
         * Provides the coordinates of the top-right corner of the rectangle as a
         * point.
         * @function
         * @returns {OpenSeadragon.Point} The coordinate of the top-right corner of
         *  the rectangle.
         */
        getTopRight: function () {
          return new $.Point(this.x + this.width, this.y).rotate(
            this.degrees,
            this.getTopLeft()
          )
        },

        /**
         * Provides the coordinates of the bottom-left corner of the rectangle as a
         * point.
         * @function
         * @returns {OpenSeadragon.Point} The coordinate of the bottom-left corner of
         *  the rectangle.
         */
        getBottomLeft: function () {
          return new $.Point(this.x, this.y + this.height).rotate(
            this.degrees,
            this.getTopLeft()
          )
        },

        /**
         * Computes the center of the rectangle.
         * @function
         * @returns {OpenSeadragon.Point} The center of the rectangle as represented
         *  as represented by a 2-dimensional vector (x,y)
         */
        getCenter: function () {
          return new $.Point(
            this.x + this.width / 2.0,
            this.y + this.height / 2.0
          ).rotate(this.degrees, this.getTopLeft())
        },

        /**
         * Returns the width and height component as a vector OpenSeadragon.Point
         * @function
         * @returns {OpenSeadragon.Point} The 2 dimensional vector representing the
         *  width and height of the rectangle.
         */
        getSize: function () {
          return new $.Point(this.width, this.height)
        },

        /**
         * Determines if two Rectangles have equivalent components.
         * @function
         * @param {OpenSeadragon.Rect} rectangle The Rectangle to compare to.
         * @returns {Boolean} 'true' if all components are equal, otherwise 'false'.
         */
        equals: function (other) {
          return (
            other instanceof $.Rect &&
            this.x === other.x &&
            this.y === other.y &&
            this.width === other.width &&
            this.height === other.height &&
            this.degrees === other.degrees
          )
        },

        /**
         * Multiply all dimensions (except degrees) in this Rect by a factor and
         * return a new Rect.
         * @function
         * @param {Number} factor The factor to multiply vector components.
         * @returns {OpenSeadragon.Rect} A new rect representing the multiplication
         *  of the vector components by the factor
         */
        times: function (factor) {
          return new $.Rect(
            this.x * factor,
            this.y * factor,
            this.width * factor,
            this.height * factor,
            this.degrees
          )
        },

        /**
         * Translate/move this Rect by a vector and return new Rect.
         * @function
         * @param {OpenSeadragon.Point} delta The translation vector.
         * @returns {OpenSeadragon.Rect} A new rect with altered position
         */
        translate: function (delta) {
          return new $.Rect(
            this.x + delta.x,
            this.y + delta.y,
            this.width,
            this.height,
            this.degrees
          )
        },

        /**
         * Returns the smallest rectangle that will contain this and the given
         * rectangle bounding boxes.
         * @param {OpenSeadragon.Rect} rect
         * @returns {OpenSeadragon.Rect} The new rectangle.
         */
        union: function (rect) {
          var thisBoundingBox = this.getBoundingBox()
          var otherBoundingBox = rect.getBoundingBox()

          var left = Math.min(thisBoundingBox.x, otherBoundingBox.x)
          var top = Math.min(thisBoundingBox.y, otherBoundingBox.y)
          var right = Math.max(
            thisBoundingBox.x + thisBoundingBox.width,
            otherBoundingBox.x + otherBoundingBox.width
          )
          var bottom = Math.max(
            thisBoundingBox.y + thisBoundingBox.height,
            otherBoundingBox.y + otherBoundingBox.height
          )

          return new $.Rect(left, top, right - left, bottom - top)
        },

        /**
         * Returns the bounding box of the intersection of this rectangle with the
         * given rectangle.
         * @param {OpenSeadragon.Rect} rect
         * @returns {OpenSeadragon.Rect} the bounding box of the intersection
         * or null if the rectangles don't intersect.
         */
        intersection: function (rect) {
          // Simplified version of Weiler Atherton clipping algorithm
          // https://en.wikipedia.org/wiki/Weiler%E2%80%93Atherton_clipping_algorithm
          // Because we just want the bounding box of the intersection,
          // we can just compute the bounding box of:
          // 1. all the summits of this which are inside rect
          // 2. all the summits of rect which are inside this
          // 3. all the intersections of rect and this
          var EPSILON = 0.0000000001

          var intersectionPoints = []

          var thisTopLeft = this.getTopLeft()
          if (rect.containsPoint(thisTopLeft, EPSILON)) {
            intersectionPoints.push(thisTopLeft)
          }
          var thisTopRight = this.getTopRight()
          if (rect.containsPoint(thisTopRight, EPSILON)) {
            intersectionPoints.push(thisTopRight)
          }
          var thisBottomLeft = this.getBottomLeft()
          if (rect.containsPoint(thisBottomLeft, EPSILON)) {
            intersectionPoints.push(thisBottomLeft)
          }
          var thisBottomRight = this.getBottomRight()
          if (rect.containsPoint(thisBottomRight, EPSILON)) {
            intersectionPoints.push(thisBottomRight)
          }

          var rectTopLeft = rect.getTopLeft()
          if (this.containsPoint(rectTopLeft, EPSILON)) {
            intersectionPoints.push(rectTopLeft)
          }
          var rectTopRight = rect.getTopRight()
          if (this.containsPoint(rectTopRight, EPSILON)) {
            intersectionPoints.push(rectTopRight)
          }
          var rectBottomLeft = rect.getBottomLeft()
          if (this.containsPoint(rectBottomLeft, EPSILON)) {
            intersectionPoints.push(rectBottomLeft)
          }
          var rectBottomRight = rect.getBottomRight()
          if (this.containsPoint(rectBottomRight, EPSILON)) {
            intersectionPoints.push(rectBottomRight)
          }

          var thisSegments = this._getSegments()
          var rectSegments = rect._getSegments()
          for (var i = 0; i < thisSegments.length; i++) {
            var thisSegment = thisSegments[i]
            for (var j = 0; j < rectSegments.length; j++) {
              var rectSegment = rectSegments[j]
              var intersect = getIntersection(
                thisSegment[0],
                thisSegment[1],
                rectSegment[0],
                rectSegment[1]
              )
              if (intersect) {
                intersectionPoints.push(intersect)
              }
            }
          }

          // Get intersection point of segments [a,b] and [c,d]
          function getIntersection(a, b, c, d) {
            // http://stackoverflow.com/a/1968345/1440403
            var abVector = b.minus(a)
            var cdVector = d.minus(c)

            var denom = -cdVector.x * abVector.y + abVector.x * cdVector.y
            if (denom === 0) {
              return null
            }

            var s =
              (abVector.x * (a.y - c.y) - abVector.y * (a.x - c.x)) / denom
            var t =
              (cdVector.x * (a.y - c.y) - cdVector.y * (a.x - c.x)) / denom

            if (
              -EPSILON <= s &&
              s <= 1 - EPSILON &&
              -EPSILON <= t &&
              t <= 1 - EPSILON
            ) {
              return new $.Point(a.x + t * abVector.x, a.y + t * abVector.y)
            }
            return null
          }

          if (intersectionPoints.length === 0) {
            return null
          }

          var minX = intersectionPoints[0].x
          var maxX = intersectionPoints[0].x
          var minY = intersectionPoints[0].y
          var maxY = intersectionPoints[0].y
          for (var k = 1; k < intersectionPoints.length; k++) {
            var point = intersectionPoints[k]
            if (point.x < minX) {
              minX = point.x
            }
            if (point.x > maxX) {
              maxX = point.x
            }
            if (point.y < minY) {
              minY = point.y
            }
            if (point.y > maxY) {
              maxY = point.y
            }
          }
          return new $.Rect(minX, minY, maxX - minX, maxY - minY)
        },

        // private
        _getSegments: function () {
          var topLeft = this.getTopLeft()
          var topRight = this.getTopRight()
          var bottomLeft = this.getBottomLeft()
          var bottomRight = this.getBottomRight()
          return [
            [topLeft, topRight],
            [topRight, bottomRight],
            [bottomRight, bottomLeft],
            [bottomLeft, topLeft],
          ]
        },

        /**
         * Rotates a rectangle around a point.
         * @function
         * @param {Number} degrees The angle in degrees to rotate.
         * @param {OpenSeadragon.Point} [pivot] The point about which to rotate.
         * Defaults to the center of the rectangle.
         * @returns {OpenSeadragon.Rect}
         */
        rotate: function (degrees, pivot) {
          degrees = $.positiveModulo(degrees, 360)
          if (degrees === 0) {
            return this.clone()
          }

          pivot = pivot || this.getCenter()
          var newTopLeft = this.getTopLeft().rotate(degrees, pivot)
          var newTopRight = this.getTopRight().rotate(degrees, pivot)

          var diff = newTopRight.minus(newTopLeft)
          // Handle floating point error
          diff = diff.apply(function (x) {
            var EPSILON = 1e-15
            return Math.abs(x) < EPSILON ? 0 : x
          })
          var radians = Math.atan(diff.y / diff.x)
          if (diff.x < 0) {
            radians += Math.PI
          } else if (diff.y < 0) {
            radians += 2 * Math.PI
          }
          return new $.Rect(
            newTopLeft.x,
            newTopLeft.y,
            this.width,
            this.height,
            (radians / Math.PI) * 180
          )
        },

        /**
         * Retrieves the smallest horizontal (degrees=0) rectangle which contains
         * this rectangle.
         * @returns {OpenSeadragon.Rect}
         */
        getBoundingBox: function () {
          if (this.degrees === 0) {
            return this.clone()
          }
          var topLeft = this.getTopLeft()
          var topRight = this.getTopRight()
          var bottomLeft = this.getBottomLeft()
          var bottomRight = this.getBottomRight()
          var minX = Math.min(
            topLeft.x,
            topRight.x,
            bottomLeft.x,
            bottomRight.x
          )
          var maxX = Math.max(
            topLeft.x,
            topRight.x,
            bottomLeft.x,
            bottomRight.x
          )
          var minY = Math.min(
            topLeft.y,
            topRight.y,
            bottomLeft.y,
            bottomRight.y
          )
          var maxY = Math.max(
            topLeft.y,
            topRight.y,
            bottomLeft.y,
            bottomRight.y
          )
          return new $.Rect(minX, minY, maxX - minX, maxY - minY)
        },

        /**
         * Retrieves the smallest horizontal (degrees=0) rectangle which contains
         * this rectangle and has integers x, y, width and height
         * @returns {OpenSeadragon.Rect}
         */
        getIntegerBoundingBox: function () {
          var boundingBox = this.getBoundingBox()
          var x = Math.floor(boundingBox.x)
          var y = Math.floor(boundingBox.y)
          var width = Math.ceil(boundingBox.width + boundingBox.x - x)
          var height = Math.ceil(boundingBox.height + boundingBox.y - y)
          return new $.Rect(x, y, width, height)
        },

        /**
         * Determines whether a point is inside this rectangle (edge included).
         * @function
         * @param {OpenSeadragon.Point} point
         * @param {Number} [epsilon=0] the margin of error allowed
         * @returns {Boolean} true if the point is inside this rectangle, false
         * otherwise.
         */
        containsPoint: function (point, epsilon) {
          epsilon = epsilon || 0

          // See http://stackoverflow.com/a/2752754/1440403 for explanation
          var topLeft = this.getTopLeft()
          var topRight = this.getTopRight()
          var bottomLeft = this.getBottomLeft()
          var topDiff = topRight.minus(topLeft)
          var leftDiff = bottomLeft.minus(topLeft)

          return (
            (point.x - topLeft.x) * topDiff.x +
              (point.y - topLeft.y) * topDiff.y >=
              -epsilon &&
            (point.x - topRight.x) * topDiff.x +
              (point.y - topRight.y) * topDiff.y <=
              epsilon &&
            (point.x - topLeft.x) * leftDiff.x +
              (point.y - topLeft.y) * leftDiff.y >=
              -epsilon &&
            (point.x - bottomLeft.x) * leftDiff.x +
              (point.y - bottomLeft.y) * leftDiff.y <=
              epsilon
          )
        },

        /**
         * Provides a string representation of the rectangle which is useful for
         * debugging.
         * @function
         * @returns {String} A string representation of the rectangle.
         */
        toString: function () {
          return (
            '[' +
            Math.round(this.x * 100) / 100 +
            ', ' +
            Math.round(this.y * 100) / 100 +
            ', ' +
            Math.round(this.width * 100) / 100 +
            'x' +
            Math.round(this.height * 100) / 100 +
            ', ' +
            Math.round(this.degrees * 100) / 100 +
            'deg' +
            ']'
          )
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - ReferenceStrip
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      // dictionary from id to private properties
      var THIS = {}

      /**
       *  The CollectionDrawer is a reimplementation if the Drawer API that
       *  focuses on allowing a viewport to be redefined as a collection
       *  of smaller viewports, defined by a clear number of rows and / or
       *  columns of which each item in the matrix of viewports has its own
       *  source.
       *
       *  This idea is a reexpression of the idea of dzi collections
       *  which allows a clearer algorithm to reuse the tile sources already
       *  supported by OpenSeadragon, in heterogenious or homogenious
       *  sequences just like mixed groups already supported by the viewer
       *  for the purpose of image sequnces.
       *
       *  TODO:   The difficult part of this feature is figuring out how to express
       *          this functionality as a combination of the functionality already
       *          provided by Drawer, Viewport, TileSource, and Navigator.  It may
       *          require better abstraction at those points in order to efficiently
       *          reuse those paradigms.
       */
      /**
       * @class ReferenceStrip
       * @memberof OpenSeadragon
       * @param {Object} options
       */
      $.ReferenceStrip = function (options) {
        var _this = this,
          viewer = options.viewer,
          viewerSize = $.getElementSize(viewer.element),
          element,
          style,
          i

        //We may need to create a new element and id if they did not
        //provide the id for the existing element
        if (!options.id) {
          options.id = 'referencestrip-' + $.now()
          this.element = $.makeNeutralElement('div')
          this.element.id = options.id
          this.element.className = 'referencestrip'
        }

        options = $.extend(
          true,
          {
            sizeRatio: $.DEFAULT_SETTINGS.referenceStripSizeRatio,
            position: $.DEFAULT_SETTINGS.referenceStripPosition,
            scroll: $.DEFAULT_SETTINGS.referenceStripScroll,
            clickTimeThreshold: $.DEFAULT_SETTINGS.clickTimeThreshold,
          },
          options,
          {
            element: this.element,
          }
        )

        $.extend(this, options)
        //Private state properties
        THIS[this.id] = {
          animating: false,
        }

        this.minPixelRatio = this.viewer.minPixelRatio

        this.element.tabIndex = 0

        style = this.element.style
        style.marginTop = '0px'
        style.marginRight = '0px'
        style.marginBottom = '0px'
        style.marginLeft = '0px'
        style.left = '0px'
        style.bottom = '0px'
        style.border = '0px'
        style.background = '#000'
        style.position = 'relative'

        $.setElementTouchActionNone(this.element)

        $.setElementOpacity(this.element, 0.8)

        this.viewer = viewer
        this.tracker = new $.MouseTracker({
          userData: 'ReferenceStrip.tracker',
          element: this.element,
          clickHandler: $.delegate(this, onStripClick),
          dragHandler: $.delegate(this, onStripDrag),
          scrollHandler: $.delegate(this, onStripScroll),
          enterHandler: $.delegate(this, onStripEnter),
          leaveHandler: $.delegate(this, onStripLeave),
          keyDownHandler: $.delegate(this, onKeyDown),
          keyHandler: $.delegate(this, onKeyPress),
          preProcessEventHandler: function (eventInfo) {
            if (eventInfo.eventType === 'wheel') {
              eventInfo.preventDefault = true
            }
          },
        })

        //Controls the position and orientation of the reference strip and sets the
        //appropriate width and height
        if (options.width && options.height) {
          this.element.style.width = options.width + 'px'
          this.element.style.height = options.height + 'px'
          viewer.addControl(this.element, {
            anchor: $.ControlAnchor.BOTTOM_LEFT,
          })
        } else {
          if ('horizontal' === options.scroll) {
            this.element.style.width =
              viewerSize.x * options.sizeRatio * viewer.tileSources.length +
              12 * viewer.tileSources.length +
              'px'

            this.element.style.height = viewerSize.y * options.sizeRatio + 'px'

            viewer.addControl(this.element, {
              anchor: $.ControlAnchor.BOTTOM_LEFT,
            })
          } else {
            this.element.style.height =
              viewerSize.y * options.sizeRatio * viewer.tileSources.length +
              12 * viewer.tileSources.length +
              'px'

            this.element.style.width = viewerSize.x * options.sizeRatio + 'px'

            viewer.addControl(this.element, {
              anchor: $.ControlAnchor.TOP_LEFT,
            })
          }
        }

        this.panelWidth = viewerSize.x * this.sizeRatio + 8
        this.panelHeight = viewerSize.y * this.sizeRatio + 8
        this.panels = []
        this.miniViewers = {}

        /*jshint loopfunc:true*/
        for (i = 0; i < viewer.tileSources.length; i++) {
          element = $.makeNeutralElement('div')
          element.id = this.element.id + '-' + i

          element.style.width = _this.panelWidth + 'px'
          element.style.height = _this.panelHeight + 'px'
          element.style.display = 'inline'
          element.style['float'] = 'left' //Webkit
          element.style.cssFloat = 'left' //Firefox
          element.style.styleFloat = 'left' //IE
          element.style.padding = '2px'
          $.setElementTouchActionNone(element)
          $.setElementPointerEventsNone(element)

          this.element.appendChild(element)

          element.activePanel = false

          this.panels.push(element)
        }
        loadPanels(
          this,
          this.scroll === 'vertical' ? viewerSize.y : viewerSize.x,
          0
        )
        this.setFocus(0)
      }

      /** @lends OpenSeadragon.ReferenceStrip.prototype */
      $.ReferenceStrip.prototype = {
        /**
         * @function
         */
        setFocus: function (page) {
          var element = this.element.querySelector(
              '#' + this.element.id + '-' + page
            ),
            viewerSize = $.getElementSize(this.viewer.canvas),
            scrollWidth = Number(this.element.style.width.replace('px', '')),
            scrollHeight = Number(this.element.style.height.replace('px', '')),
            offsetLeft = -Number(
              this.element.style.marginLeft.replace('px', '')
            ),
            offsetTop = -Number(this.element.style.marginTop.replace('px', '')),
            offset

          if (this.currentSelected !== element) {
            if (this.currentSelected) {
              this.currentSelected.style.background = '#000'
            }
            this.currentSelected = element
            this.currentSelected.style.background = '#999'

            if ('horizontal' === this.scroll) {
              //right left
              offset = Number(page) * (this.panelWidth + 3)
              if (offset > offsetLeft + viewerSize.x - this.panelWidth) {
                offset = Math.min(offset, scrollWidth - viewerSize.x)
                this.element.style.marginLeft = -offset + 'px'
                loadPanels(this, viewerSize.x, -offset)
              } else if (offset < offsetLeft) {
                offset = Math.max(0, offset - viewerSize.x / 2)
                this.element.style.marginLeft = -offset + 'px'
                loadPanels(this, viewerSize.x, -offset)
              }
            } else {
              offset = Number(page) * (this.panelHeight + 3)
              if (offset > offsetTop + viewerSize.y - this.panelHeight) {
                offset = Math.min(offset, scrollHeight - viewerSize.y)
                this.element.style.marginTop = -offset + 'px'
                loadPanels(this, viewerSize.y, -offset)
              } else if (offset < offsetTop) {
                offset = Math.max(0, offset - viewerSize.y / 2)
                this.element.style.marginTop = -offset + 'px'
                loadPanels(this, viewerSize.y, -offset)
              }
            }

            this.currentPage = page
            onStripEnter.call(this, { eventSource: this.tracker })
          }
        },

        /**
         * @function
         */
        update: function () {
          if (THIS[this.id].animating) {
            // $.console.log( 'image reference strip update' );
            return true
          }
          return false
        },

        destroy: function () {
          if (this.miniViewers) {
            for (var key in this.miniViewers) {
              this.miniViewers[key].destroy()
            }
          }

          this.tracker.destroy()

          if (this.element) {
            this.viewer.removeControl(this.element)
          }
        },
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onStripClick(event) {
        if (event.quick) {
          var page

          if ('horizontal' === this.scroll) {
            page = Math.floor(event.position.x / this.panelWidth)
          } else {
            page = Math.floor(event.position.y / this.panelHeight)
          }

          this.viewer.goToPage(page)
        }

        this.element.focus()
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onStripDrag(event) {
        this.dragging = true
        if (this.element) {
          var offsetLeft = Number(
              this.element.style.marginLeft.replace('px', '')
            ),
            offsetTop = Number(this.element.style.marginTop.replace('px', '')),
            scrollWidth = Number(this.element.style.width.replace('px', '')),
            scrollHeight = Number(this.element.style.height.replace('px', '')),
            viewerSize = $.getElementSize(this.viewer.canvas)

          if ('horizontal' === this.scroll) {
            if (-event.delta.x > 0) {
              //forward
              if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                this.element.style.marginLeft =
                  offsetLeft + event.delta.x * 2 + 'px'
                loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2)
              }
            } else if (-event.delta.x < 0) {
              //reverse
              if (offsetLeft < 0) {
                this.element.style.marginLeft =
                  offsetLeft + event.delta.x * 2 + 'px'
                loadPanels(this, viewerSize.x, offsetLeft + event.delta.x * 2)
              }
            }
          } else {
            if (-event.delta.y > 0) {
              //forward
              if (offsetTop > -(scrollHeight - viewerSize.y)) {
                this.element.style.marginTop =
                  offsetTop + event.delta.y * 2 + 'px'
                loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2)
              }
            } else if (-event.delta.y < 0) {
              //reverse
              if (offsetTop < 0) {
                this.element.style.marginTop =
                  offsetTop + event.delta.y * 2 + 'px'
                loadPanels(this, viewerSize.y, offsetTop + event.delta.y * 2)
              }
            }
          }
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onStripScroll(event) {
        if (this.element) {
          var offsetLeft = Number(
              this.element.style.marginLeft.replace('px', '')
            ),
            offsetTop = Number(this.element.style.marginTop.replace('px', '')),
            scrollWidth = Number(this.element.style.width.replace('px', '')),
            scrollHeight = Number(this.element.style.height.replace('px', '')),
            viewerSize = $.getElementSize(this.viewer.canvas)

          if ('horizontal' === this.scroll) {
            if (event.scroll > 0) {
              //forward
              if (offsetLeft > -(scrollWidth - viewerSize.x)) {
                this.element.style.marginLeft =
                  offsetLeft - event.scroll * 60 + 'px'
                loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60)
              }
            } else if (event.scroll < 0) {
              //reverse
              if (offsetLeft < 0) {
                this.element.style.marginLeft =
                  offsetLeft - event.scroll * 60 + 'px'
                loadPanels(this, viewerSize.x, offsetLeft - event.scroll * 60)
              }
            }
          } else {
            if (event.scroll < 0) {
              //scroll up
              if (offsetTop > viewerSize.y - scrollHeight) {
                this.element.style.marginTop =
                  offsetTop + event.scroll * 60 + 'px'
                loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60)
              }
            } else if (event.scroll > 0) {
              //scroll dowm
              if (offsetTop < 0) {
                this.element.style.marginTop =
                  offsetTop + event.scroll * 60 + 'px'
                loadPanels(this, viewerSize.y, offsetTop + event.scroll * 60)
              }
            }
          }

          event.preventDefault = true
        }
      }

      function loadPanels(strip, viewerSize, scroll) {
        var panelSize,
          activePanelsStart,
          activePanelsEnd,
          miniViewer,
          i,
          element
        if ('horizontal' === strip.scroll) {
          panelSize = strip.panelWidth
        } else {
          panelSize = strip.panelHeight
        }
        activePanelsStart = Math.ceil(viewerSize / panelSize) + 5
        activePanelsEnd =
          Math.ceil((Math.abs(scroll) + viewerSize) / panelSize) + 1
        activePanelsStart = activePanelsEnd - activePanelsStart
        activePanelsStart = activePanelsStart < 0 ? 0 : activePanelsStart

        for (
          i = activePanelsStart;
          i < activePanelsEnd && i < strip.panels.length;
          i++
        ) {
          element = strip.panels[i]
          if (!element.activePanel) {
            var miniTileSource
            var originalTileSource = strip.viewer.tileSources[i]
            if (originalTileSource.referenceStripThumbnailUrl) {
              miniTileSource = {
                type: 'image',
                url: originalTileSource.referenceStripThumbnailUrl,
              }
            } else {
              miniTileSource = originalTileSource
            }
            miniViewer = new $.Viewer({
              id: element.id,
              tileSources: [miniTileSource],
              element: element,
              navigatorSizeRatio: strip.sizeRatio,
              showNavigator: false,
              mouseNavEnabled: false,
              showNavigationControl: false,
              showSequenceControl: false,
              immediateRender: true,
              blendTime: 0,
              animationTime: 0,
              loadTilesWithAjax: strip.viewer.loadTilesWithAjax,
              ajaxHeaders: strip.viewer.ajaxHeaders,
              useCanvas: strip.useCanvas,
            })
            // Allow pointer events to pass through miniViewer's canvas/container
            //   elements so implicit pointer capture works on touch devices
            $.setElementPointerEventsNone(miniViewer.canvas)
            $.setElementPointerEventsNone(miniViewer.container)
            // We'll use event delegation from the reference strip element instead of
            //   handling events on every miniViewer
            miniViewer.innerTracker.setTracking(false)
            miniViewer.outerTracker.setTracking(false)

            strip.miniViewers[element.id] = miniViewer

            element.activePanel = true
          }
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onStripEnter(event) {
        var element = event.eventSource.element

        //$.setElementOpacity(element, 0.8);

        //element.style.border = '1px solid #555';
        //element.style.background = '#000';

        if ('horizontal' === this.scroll) {
          //element.style.paddingTop = "0px";
          element.style.marginBottom = '0px'
        } else {
          //element.style.paddingRight = "0px";
          element.style.marginLeft = '0px'
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onStripLeave(event) {
        var element = event.eventSource.element

        if ('horizontal' === this.scroll) {
          //element.style.paddingTop = "10px";
          element.style.marginBottom =
            '-' + $.getElementSize(element).y / 2 + 'px'
        } else {
          //element.style.paddingRight = "10px";
          element.style.marginLeft =
            '-' + $.getElementSize(element).x / 2 + 'px'
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onKeyDown(event) {
        //console.log( event.keyCode );

        if (!event.ctrl && !event.alt && !event.meta) {
          switch (event.keyCode) {
            case 38: //up arrow
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: 1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 40: //down arrow
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: -1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 37: //left arrow
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: -1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 39: //right arrow
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: 1,
                shift: null,
              })
              event.preventDefault = true
              break
            default:
              //console.log( 'navigator keycode %s', event.keyCode );
              event.preventDefault = false
              break
          }
        } else {
          event.preventDefault = false
        }
      }

      /**
       * @private
       * @inner
       * @function
       */
      function onKeyPress(event) {
        //console.log( event.keyCode );

        if (!event.ctrl && !event.alt && !event.meta) {
          switch (event.keyCode) {
            case 61: //=|+
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: 1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 45: //-|_
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: -1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 48: //0|)
            case 119: //w
            case 87: //W
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: 1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 115: //s
            case 83: //S
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: -1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 97: //a
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: -1,
                shift: null,
              })
              event.preventDefault = true
              break
            case 100: //d
              onStripScroll.call(this, {
                eventSource: this.tracker,
                position: null,
                scroll: 1,
                shift: null,
              })
              event.preventDefault = true
              break
            default:
              //console.log( 'navigator keycode %s', event.keyCode );
              event.preventDefault = false
              break
          }
        } else {
          event.preventDefault = false
        }
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - DisplayRect
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class DisplayRect
       * @classdesc A display rectangle is very similar to {@link OpenSeadragon.Rect} but adds two
       * fields, 'minLevel' and 'maxLevel' which denote the supported zoom levels
       * for this rectangle.
       *
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.Rect
       * @param {Number} x The vector component 'x'.
       * @param {Number} y The vector component 'y'.
       * @param {Number} width The vector component 'height'.
       * @param {Number} height The vector component 'width'.
       * @param {Number} minLevel The lowest zoom level supported.
       * @param {Number} maxLevel The highest zoom level supported.
       */
      $.DisplayRect = function (x, y, width, height, minLevel, maxLevel) {
        $.Rect.apply(this, [x, y, width, height])

        /**
         * The lowest zoom level supported.
         * @member {Number} minLevel
         * @memberof OpenSeadragon.DisplayRect#
         */
        this.minLevel = minLevel
        /**
         * The highest zoom level supported.
         * @member {Number} maxLevel
         * @memberof OpenSeadragon.DisplayRect#
         */
        this.maxLevel = maxLevel
      }

      $.extend($.DisplayRect.prototype, $.Rect.prototype)
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Spring
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Spring
       * @memberof OpenSeadragon
       * @param {Object} options - Spring configuration settings.
       * @param {Number} options.springStiffness - Spring stiffness. Must be greater than zero.
       * The closer to zero, the closer to linear animation.
       * @param {Number} options.animationTime - Animation duration per spring, in seconds.
       * Must be zero or greater.
       * @param {Number} [options.initial=0] - Initial value of spring.
       * @param {Boolean} [options.exponential=false] - Whether this spring represents
       * an exponential scale (such as zoom) and should be animated accordingly. Note that
       * exponential springs must have non-zero values.
       */
      $.Spring = function (options) {
        var args = arguments

        if (typeof options !== 'object') {
          //allows backward compatible use of ( initialValue, config ) as
          //constructor parameters
          options = {
            initial:
              args.length && typeof args[0] === 'number' ? args[0] : undefined,
            /**
             * Spring stiffness.
             * @member {Number} springStiffness
             * @memberof OpenSeadragon.Spring#
             */
            springStiffness: args.length > 1 ? args[1].springStiffness : 5.0,
            /**
             * Animation duration per spring.
             * @member {Number} animationTime
             * @memberof OpenSeadragon.Spring#
             */
            animationTime: args.length > 1 ? args[1].animationTime : 1.5,
          }
        }

        $.console.assert(
          typeof options.springStiffness === 'number' &&
            options.springStiffness !== 0,
          '[OpenSeadragon.Spring] options.springStiffness must be a non-zero number'
        )

        $.console.assert(
          typeof options.animationTime === 'number' &&
            options.animationTime >= 0,
          '[OpenSeadragon.Spring] options.animationTime must be a number greater than or equal to 0'
        )

        if (options.exponential) {
          this._exponential = true
          delete options.exponential
        }

        $.extend(true, this, options)

        /**
         * @member {Object} current
         * @memberof OpenSeadragon.Spring#
         * @property {Number} value
         * @property {Number} time
         */
        this.current = {
          value:
            typeof this.initial === 'number'
              ? this.initial
              : this._exponential
              ? 0
              : 1,
          time: $.now(), // always work in milliseconds
        }

        $.console.assert(
          !this._exponential || this.current.value !== 0,
          '[OpenSeadragon.Spring] value must be non-zero for exponential springs'
        )

        /**
         * @member {Object} start
         * @memberof OpenSeadragon.Spring#
         * @property {Number} value
         * @property {Number} time
         */
        this.start = {
          value: this.current.value,
          time: this.current.time,
        }

        /**
         * @member {Object} target
         * @memberof OpenSeadragon.Spring#
         * @property {Number} value
         * @property {Number} time
         */
        this.target = {
          value: this.current.value,
          time: this.current.time,
        }

        if (this._exponential) {
          this.start._logValue = Math.log(this.start.value)
          this.target._logValue = Math.log(this.target.value)
          this.current._logValue = Math.log(this.current.value)
        }
      }

      /** @lends OpenSeadragon.Spring.prototype */
      $.Spring.prototype = {
        /**
         * @function
         * @param {Number} target
         */
        resetTo: function (target) {
          $.console.assert(
            !this._exponential || target !== 0,
            '[OpenSeadragon.Spring.resetTo] target must be non-zero for exponential springs'
          )

          this.start.value = this.target.value = this.current.value = target
          this.start.time = this.target.time = this.current.time = $.now()

          if (this._exponential) {
            this.start._logValue = Math.log(this.start.value)
            this.target._logValue = Math.log(this.target.value)
            this.current._logValue = Math.log(this.current.value)
          }
        },

        /**
         * @function
         * @param {Number} target
         */
        springTo: function (target) {
          $.console.assert(
            !this._exponential || target !== 0,
            '[OpenSeadragon.Spring.springTo] target must be non-zero for exponential springs'
          )

          this.start.value = this.current.value
          this.start.time = this.current.time
          this.target.value = target
          this.target.time = this.start.time + 1000 * this.animationTime

          if (this._exponential) {
            this.start._logValue = Math.log(this.start.value)
            this.target._logValue = Math.log(this.target.value)
          }
        },

        /**
         * @function
         * @param {Number} delta
         */
        shiftBy: function (delta) {
          this.start.value += delta
          this.target.value += delta

          if (this._exponential) {
            $.console.assert(
              this.target.value !== 0 && this.start.value !== 0,
              '[OpenSeadragon.Spring.shiftBy] spring value must be non-zero for exponential springs'
            )

            this.start._logValue = Math.log(this.start.value)
            this.target._logValue = Math.log(this.target.value)
          }
        },

        setExponential: function (value) {
          this._exponential = value

          if (this._exponential) {
            $.console.assert(
              this.current.value !== 0 &&
                this.target.value !== 0 &&
                this.start.value !== 0,
              '[OpenSeadragon.Spring.setExponential] spring value must be non-zero for exponential springs'
            )

            this.start._logValue = Math.log(this.start.value)
            this.target._logValue = Math.log(this.target.value)
            this.current._logValue = Math.log(this.current.value)
          }
        },

        /**
         * @function
         * @returns true if the value got updated, false otherwise
         */
        update: function () {
          this.current.time = $.now()

          var startValue, targetValue
          if (this._exponential) {
            startValue = this.start._logValue
            targetValue = this.target._logValue
          } else {
            startValue = this.start.value
            targetValue = this.target.value
          }

          var currentValue =
            this.current.time >= this.target.time
              ? targetValue
              : startValue +
                (targetValue - startValue) *
                  transform(
                    this.springStiffness,
                    (this.current.time - this.start.time) /
                      (this.target.time - this.start.time)
                  )

          var oldValue = this.current.value
          if (this._exponential) {
            this.current.value = Math.exp(currentValue)
          } else {
            this.current.value = currentValue
          }

          return oldValue !== this.current.value
        },

        /**
         * Returns whether the spring is at the target value
         * @function
         * @returns {Boolean} True if at target value, false otherwise
         */
        isAtTargetValue: function () {
          return this.current.value === this.target.value
        },
      }

      /**
       * @private
       */
      function transform(stiffness, x) {
        return (1.0 - Math.exp(stiffness * -x)) / (1.0 - Math.exp(-stiffness))
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - ImageLoader
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors

     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class ImageJob
       * @classdesc Handles downloading of a single image.
       * @param {Object} options - Options for this ImageJob.
       * @param {String} [options.src] - URL of image to download.
       * @param {Tile} [options.tile] - Tile that belongs the data to.
       * @param {TileSource} [options.source] - Image loading strategy
       * @param {String} [options.loadWithAjax] - Whether to load this image with AJAX.
       * @param {String} [options.ajaxHeaders] - Headers to add to the image request if using AJAX.
       * @param {Boolean} [options.ajaxWithCredentials] - Whether to set withCredentials on AJAX requests.
       * @param {String} [options.crossOriginPolicy] - CORS policy to use for downloads
       * @param {String} [options.postData] - HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
       *      see TileSource::getPostData) or null
       * @param {Function} [options.callback] - Called once image has been downloaded.
       * @param {Function} [options.abort] - Called when this image job is aborted.
       * @param {Number} [options.timeout] - The max number of milliseconds that this image job may take to complete.
       */
      $.ImageJob = function (options) {
        $.extend(
          true,
          this,
          {
            timeout: $.DEFAULT_SETTINGS.timeout,
            jobId: null,
          },
          options
        )

        /**
         * Data object which will contain downloaded image data.
         * @member {Image|*} image data object, by default an Image object (depends on TileSource)
         * @memberof OpenSeadragon.ImageJob#
         */
        this.data = null

        /**
         * User workspace to populate with helper variables
         * @member {*} userData to append custom data and avoid namespace collision
         * @memberof OpenSeadragon.ImageJob#
         */
        this.userData = {}

        /**
         * Error message holder
         * @member {string} error message
         * @memberof OpenSeadragon.ImageJob#
         * @private
         */
        this.errorMsg = null
      }

      $.ImageJob.prototype = {
        /**
         * Starts the image job.
         * @method
         */
        start: function () {
          var self = this
          var selfAbort = this.abort

          this.jobId = window.setTimeout(function () {
            self.finish(
              null,
              null,
              'Image load exceeded timeout (' + self.timeout + ' ms)'
            )
          }, this.timeout)

          this.abort = function () {
            self.source.downloadTileAbort(self)
            if (typeof selfAbort === 'function') {
              selfAbort()
            }
          }

          this.source.downloadTileStart(this)
        },

        /**
         * Finish this job.
         * @param {*} data data that has been downloaded
         * @param {XMLHttpRequest} request reference to the request if used
         * @param {string} errorMessage description upon failure
         */
        finish: function (data, request, errorMessage) {
          this.data = data
          this.request = request
          this.errorMsg = errorMessage

          if (this.jobId) {
            window.clearTimeout(this.jobId)
          }

          this.callback(this)
        },
      }

      /**
       * @class ImageLoader
       * @memberof OpenSeadragon
       * @classdesc Handles downloading of a set of images using asynchronous queue pattern.
       * You generally won't have to interact with the ImageLoader directly.
       * @param {Object} options - Options for this ImageLoader.
       * @param {Number} [options.jobLimit] - The number of concurrent image requests. See imageLoaderLimit in {@link OpenSeadragon.Options} for details.
       * @param {Number} [options.timeout] - The max number of milliseconds that an image job may take to complete.
       */
      $.ImageLoader = function (options) {
        $.extend(
          true,
          this,
          {
            jobLimit: $.DEFAULT_SETTINGS.imageLoaderLimit,
            timeout: $.DEFAULT_SETTINGS.timeout,
            jobQueue: [],
            jobsInProgress: 0,
          },
          options
        )
      }

      /** @lends OpenSeadragon.ImageLoader.prototype */
      $.ImageLoader.prototype = {
        /**
         * Add an unloaded image to the loader queue.
         * @method
         * @param {Object} options - Options for this job.
         * @param {String} [options.src] - URL of image to download.
         * @param {Tile} [options.tile] - Tile that belongs the data to. The tile instance
         *      is not internally used and serves for custom TileSources implementations.
         * @param {TileSource} [options.source] - Image loading strategy
         * @param {String} [options.loadWithAjax] - Whether to load this image with AJAX.
         * @param {String} [options.ajaxHeaders] - Headers to add to the image request if using AJAX.
         * @param {String|Boolean} [options.crossOriginPolicy] - CORS policy to use for downloads
         * @param {String} [options.postData] - POST parameters (usually but not necessarily in k=v&k2=v2... form,
         *      see TileSource::getPostData) or null
         * @param {Boolean} [options.ajaxWithCredentials] - Whether to set withCredentials on AJAX
         *      requests.
         * @param {Function} [options.callback] - Called once image has been downloaded.
         * @param {Function} [options.abort] - Called when this image job is aborted.
         */
        addJob: function (options) {
          if (!options.source) {
            $.console.error(
              'ImageLoader.prototype.addJob() requires [options.source]. ' +
                'TileSource since new API defines how images are fetched. Creating a dummy TileSource.'
            )
            var implementation = $.TileSource.prototype
            options.source = {
              downloadTileStart: implementation.downloadTileStart,
              downloadTileAbort: implementation.downloadTileAbort,
            }
          }

          var _this = this,
            complete = function (job) {
              completeJob(_this, job, options.callback)
            },
            jobOptions = {
              src: options.src,
              tile: options.tile || {},
              source: options.source,
              loadWithAjax: options.loadWithAjax,
              ajaxHeaders: options.loadWithAjax ? options.ajaxHeaders : null,
              crossOriginPolicy: options.crossOriginPolicy,
              ajaxWithCredentials: options.ajaxWithCredentials,
              postData: options.postData,
              callback: complete,
              abort: options.abort,
              timeout: this.timeout,
            },
            newJob = new $.ImageJob(jobOptions)

          if (!this.jobLimit || this.jobsInProgress < this.jobLimit) {
            newJob.start()
            this.jobsInProgress++
          } else {
            this.jobQueue.push(newJob)
          }
        },

        /**
         * Clear any unstarted image loading jobs from the queue.
         * @method
         */
        clear: function () {
          for (var i = 0; i < this.jobQueue.length; i++) {
            var job = this.jobQueue[i]
            if (typeof job.abort === 'function') {
              job.abort()
            }
          }

          this.jobQueue = []
        },
      }

      /**
       * Cleans up ImageJob once completed.
       * @method
       * @private
       * @param loader - ImageLoader used to start job.
       * @param job - The ImageJob that has completed.
       * @param callback - Called once cleanup is finished.
       */
      function completeJob(loader, job, callback) {
        var nextJob

        loader.jobsInProgress--

        if (
          (!loader.jobLimit || loader.jobsInProgress < loader.jobLimit) &&
          loader.jobQueue.length > 0
        ) {
          nextJob = loader.jobQueue.shift()
          nextJob.start()
          loader.jobsInProgress++
        }

        callback(job.data, job.errorMsg, job.request)
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Tile
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Tile
       * @memberof OpenSeadragon
       * @param {Number} level The zoom level this tile belongs to.
       * @param {Number} x The vector component 'x'.
       * @param {Number} y The vector component 'y'.
       * @param {OpenSeadragon.Rect} bounds Where this tile fits, in normalized
       *      coordinates.
       * @param {Boolean} exists Is this tile a part of a sparse image? ( Also has
       *      this tile failed to load? )
       * @param {String|Function} url The URL of this tile's image or a function that returns a url.
       * @param {CanvasRenderingContext2D} context2D The context2D of this tile if it
       *      is provided directly by the tile source.
       * @param {Boolean} loadWithAjax Whether this tile image should be loaded with an AJAX request .
       * @param {Object} ajaxHeaders The headers to send with this tile's AJAX request (if applicable).
       * @param {OpenSeadragon.Rect} sourceBounds The portion of the tile to use as the source of the
       *      drawing operation, in pixels. Note that this only works when drawing with canvas; when drawing
       *      with HTML the entire tile is always used.
       * @param {String} postData HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
       *      see TileSource::getPostData) or null
       * @param {String} cacheKey key to act as a tile cache, must be unique for tiles with unique image data
       */
      $.Tile = function (
        level,
        x,
        y,
        bounds,
        exists,
        url,
        context2D,
        loadWithAjax,
        ajaxHeaders,
        sourceBounds,
        postData,
        cacheKey
      ) {
        /**
         * The zoom level this tile belongs to.
         * @member {Number} level
         * @memberof OpenSeadragon.Tile#
         */
        this.level = level
        /**
         * The vector component 'x'.
         * @member {Number} x
         * @memberof OpenSeadragon.Tile#
         */
        this.x = x
        /**
         * The vector component 'y'.
         * @member {Number} y
         * @memberof OpenSeadragon.Tile#
         */
        this.y = y
        /**
         * Where this tile fits, in normalized coordinates
         * @member {OpenSeadragon.Rect} bounds
         * @memberof OpenSeadragon.Tile#
         */
        this.bounds = bounds
        /**
         * The portion of the tile to use as the source of the drawing operation, in pixels. Note that
         * this only works when drawing with canvas; when drawing with HTML the entire tile is always used.
         * @member {OpenSeadragon.Rect} sourceBounds
         * @memberof OpenSeadragon.Tile#
         */
        this.sourceBounds = sourceBounds
        /**
         * Is this tile a part of a sparse image? Also has this tile failed to load?
         * @member {Boolean} exists
         * @memberof OpenSeadragon.Tile#
         */
        this.exists = exists
        /**
         * Private property to hold string url or url retriever function.
         * Consumers should access via Tile.getUrl()
         * @private
         * @member {String|Function} url
         * @memberof OpenSeadragon.Tile#
         */
        this._url = url
        /**
         * Post parameters for this tile. For example, it can be an URL-encoded string
         * in k1=v1&k2=v2... format, or a JSON, or a FormData instance... or null if no POST request used
         * @member {String} postData HTTP POST data (usually but not necessarily in k=v&k2=v2... form,
         *      see TileSource::getPostData) or null
         * @memberof OpenSeadragon.Tile#
         */
        this.postData = postData
        /**
         * The context2D of this tile if it is provided directly by the tile source.
         * @member {CanvasRenderingContext2D} context2D
         * @memberOf OpenSeadragon.Tile#
         */
        this.context2D = context2D
        /**
         * Whether to load this tile's image with an AJAX request.
         * @member {Boolean} loadWithAjax
         * @memberof OpenSeadragon.Tile#
         */
        this.loadWithAjax = loadWithAjax
        /**
         * The headers to be used in requesting this tile's image.
         * Only used if loadWithAjax is set to true.
         * @member {Object} ajaxHeaders
         * @memberof OpenSeadragon.Tile#
         */
        this.ajaxHeaders = ajaxHeaders

        if (cacheKey === undefined) {
          $.console.warn(
            "Tile constructor needs 'cacheKey' variable: creation tile cache" +
              ' in Tile class is deprecated. TileSource.prototype.getTileHashKey will be used.'
          )
          cacheKey = $.TileSource.prototype.getTileHashKey(
            level,
            x,
            y,
            url,
            ajaxHeaders,
            postData
          )
        }
        /**
         * The unique cache key for this tile.
         * @member {String} cacheKey
         * @memberof OpenSeadragon.Tile#
         */
        this.cacheKey = cacheKey
        /**
         * Is this tile loaded?
         * @member {Boolean} loaded
         * @memberof OpenSeadragon.Tile#
         */
        this.loaded = false
        /**
         * Is this tile loading?
         * @member {Boolean} loading
         * @memberof OpenSeadragon.Tile#
         */
        this.loading = false

        /**
         * The HTML div element for this tile
         * @member {Element} element
         * @memberof OpenSeadragon.Tile#
         */
        this.element = null
        /**
         * The HTML img element for this tile.
         * @member {Element} imgElement
         * @memberof OpenSeadragon.Tile#
         */
        this.imgElement = null

        /**
         * The alias of this.element.style.
         * @member {String} style
         * @memberof OpenSeadragon.Tile#
         */
        this.style = null
        /**
         * This tile's position on screen, in pixels.
         * @member {OpenSeadragon.Point} position
         * @memberof OpenSeadragon.Tile#
         */
        this.position = null
        /**
         * This tile's size on screen, in pixels.
         * @member {OpenSeadragon.Point} size
         * @memberof OpenSeadragon.Tile#
         */
        this.size = null
        /**
         * Whether to flip the tile when rendering.
         * @member {Boolean} flipped
         * @memberof OpenSeadragon.Tile#
         */
        this.flipped = false
        /**
         * The start time of this tile's blending.
         * @member {Number} blendStart
         * @memberof OpenSeadragon.Tile#
         */
        this.blendStart = null
        /**
         * The current opacity this tile should be.
         * @member {Number} opacity
         * @memberof OpenSeadragon.Tile#
         */
        this.opacity = null
        /**
         * The squared distance of this tile to the viewport center.
         * Use for comparing tiles.
         * @private
         * @member {Number} squaredDistance
         * @memberof OpenSeadragon.Tile#
         */
        this.squaredDistance = null
        /**
         * The visibility score of this tile.
         * @member {Number} visibility
         * @memberof OpenSeadragon.Tile#
         */
        this.visibility = null

        /**
         * The transparency indicator of this tile.
         * @member {Boolean} hasTransparency true if tile contains transparency for correct rendering
         * @memberof OpenSeadragon.Tile#
         */
        this.hasTransparency = false

        /**
         * Whether this tile is currently being drawn.
         * @member {Boolean} beingDrawn
         * @memberof OpenSeadragon.Tile#
         */
        this.beingDrawn = false

        /**
         * Timestamp the tile was last touched.
         * @member {Number} lastTouchTime
         * @memberof OpenSeadragon.Tile#
         */
        this.lastTouchTime = 0

        /**
         * Whether this tile is in the right-most column for its level.
         * @member {Boolean} isRightMost
         * @memberof OpenSeadragon.Tile#
         */
        this.isRightMost = false

        /**
         * Whether this tile is in the bottom-most row for its level.
         * @member {Boolean} isBottomMost
         * @memberof OpenSeadragon.Tile#
         */
        this.isBottomMost = false
      }

      /** @lends OpenSeadragon.Tile.prototype */
      $.Tile.prototype = {
        /**
         * Provides a string representation of this tiles level and (x,y)
         * components.
         * @function
         * @returns {String}
         */
        toString: function () {
          return this.level + '/' + this.x + '_' + this.y
        },

        // private
        _hasTransparencyChannel: function () {
          console.warn(
            'Tile.prototype._hasTransparencyChannel() has been ' +
              'deprecated and will be removed in the future. Use TileSource.prototype.hasTransparency() instead.'
          )
          return !!this.context2D || this.getUrl().match('.png')
        },

        /**
         * Renders the tile in an html container.
         * @function
         * @param {Element} container
         */
        drawHTML: function (container) {
          if (!this.cacheImageRecord) {
            $.console.warn(
              "[Tile.drawHTML] attempting to draw tile %s when it's not cached",
              this.toString()
            )
            return
          }

          if (!this.loaded) {
            $.console.warn(
              "Attempting to draw tile %s when it's not yet loaded.",
              this.toString()
            )
            return
          }

          //EXPERIMENTAL - trying to figure out how to scale the container
          //               content during animation of the container size.

          if (!this.element) {
            var image = this.getImage()
            if (!image) {
              return
            }

            this.element = $.makeNeutralElement('div')
            this.imgElement = image.cloneNode()
            this.imgElement.style.msInterpolationMode = 'nearest-neighbor'
            this.imgElement.style.width = '100%'
            this.imgElement.style.height = '100%'

            this.style = this.element.style
            this.style.position = 'absolute'
          }
          if (this.element.parentNode !== container) {
            container.appendChild(this.element)
          }
          if (this.imgElement.parentNode !== this.element) {
            this.element.appendChild(this.imgElement)
          }

          this.style.top = this.position.y + 'px'
          this.style.left = this.position.x + 'px'
          this.style.height = this.size.y + 'px'
          this.style.width = this.size.x + 'px'

          if (this.flipped) {
            this.style.transform = 'scaleX(-1)'
          }

          $.setElementOpacity(this.element, this.opacity)
        },

        /**
         * The Image object for this tile.
         * @member {Object} image
         * @memberof OpenSeadragon.Tile#
         * @deprecated
         * @returns {Image}
         */
        get image() {
          $.console.error(
            '[Tile.image] property has been deprecated. Use [Tile.prototype.getImage] instead.'
          )
          return this.getImage()
        },

        /**
         * The URL of this tile's image.
         * @member {String} url
         * @memberof OpenSeadragon.Tile#
         * @deprecated
         * @returns {String}
         */
        get url() {
          $.console.error(
            '[Tile.url] property has been deprecated. Use [Tile.prototype.getUrl] instead.'
          )
          return this.getUrl()
        },

        /**
         * Get the Image object for this tile.
         * @returns {Image}
         */
        getImage: function () {
          return this.cacheImageRecord.getImage()
        },

        /**
         * Get the url string for this tile.
         * @returns {String}
         */
        getUrl: function () {
          if (typeof this._url === 'function') {
            return this._url()
          }

          return this._url
        },

        /**
         * Get the CanvasRenderingContext2D instance for tile image data drawn
         * onto Canvas if enabled and available
         * @returns {CanvasRenderingContext2D}
         */
        getCanvasContext: function () {
          return this.context2D || this.cacheImageRecord.getRenderedContext()
        },

        /**
         * Renders the tile in a canvas-based context.
         * @function
         * @param {Canvas} context
         * @param {Function} drawingHandler - Method for firing the drawing event.
         * drawingHandler({context, tile, rendered})
         * where <code>rendered</code> is the context with the pre-drawn image.
         * @param {Number} [scale=1] - Apply a scale to position and size
         * @param {OpenSeadragon.Point} [translate] - A translation vector
         * @param {Boolean} [shouldRoundPositionAndSize] - Tells whether to round
         * position and size of tiles supporting alpha channel in non-transparency
         * context.
         * @param {OpenSeadragon.TileSource} source - The source specification of the tile.
         */
        drawCanvas: function (
          context,
          drawingHandler,
          scale,
          translate,
          shouldRoundPositionAndSize,
          source
        ) {
          var position = this.position.times($.pixelDensityRatio),
            size = this.size.times($.pixelDensityRatio),
            rendered

          if (!this.context2D && !this.cacheImageRecord) {
            $.console.warn(
              "[Tile.drawCanvas] attempting to draw tile %s when it's not cached",
              this.toString()
            )
            return
          }

          rendered = this.getCanvasContext()

          if (!this.loaded || !rendered) {
            $.console.warn(
              "Attempting to draw tile %s when it's not yet loaded.",
              this.toString()
            )

            return
          }

          context.save()
          context.globalAlpha = this.opacity

          if (typeof scale === 'number' && scale !== 1) {
            // draw tile at a different scale
            position = position.times(scale)
            size = size.times(scale)
          }

          if (translate instanceof $.Point) {
            // shift tile position slightly
            position = position.plus(translate)
          }

          //if we are supposed to be rendering fully opaque rectangle,
          //ie its done fading or fading is turned off, and if we are drawing
          //an image with an alpha channel, then the only way
          //to avoid seeing the tile underneath is to clear the rectangle
          if (context.globalAlpha === 1 && this.hasTransparency) {
            if (shouldRoundPositionAndSize) {
              // Round to the nearest whole pixel so we don't get seams from overlap.
              position.x = Math.round(position.x)
              position.y = Math.round(position.y)
              size.x = Math.round(size.x)
              size.y = Math.round(size.y)
            }

            //clearing only the inside of the rectangle occupied
            //by the png prevents edge flikering
            context.clearRect(position.x, position.y, size.x, size.y)
          }

          // This gives the application a chance to make image manipulation
          // changes as we are rendering the image
          drawingHandler({ context: context, tile: this, rendered: rendered })

          var sourceWidth, sourceHeight
          if (this.sourceBounds) {
            sourceWidth = Math.min(
              this.sourceBounds.width,
              rendered.canvas.width
            )
            sourceHeight = Math.min(
              this.sourceBounds.height,
              rendered.canvas.height
            )
          } else {
            sourceWidth = rendered.canvas.width
            sourceHeight = rendered.canvas.height
          }

          context.translate(position.x + size.x / 2, 0)
          if (this.flipped) {
            context.scale(-1, 1)
          }
          context.drawImage(
            rendered.canvas,
            0,
            0,
            sourceWidth,
            sourceHeight,
            -size.x / 2,
            position.y,
            size.x,
            size.y
          )

          context.restore()
        },

        /**
         * Get the ratio between current and original size.
         * @function
         * @returns {Float}
         */
        getScaleForEdgeSmoothing: function () {
          var context
          if (this.cacheImageRecord) {
            context = this.cacheImageRecord.getRenderedContext()
          } else if (this.context2D) {
            context = this.context2D
          } else {
            $.console.warn(
              "[Tile.drawCanvas] attempting to get tile scale %s when tile's not cached",
              this.toString()
            )
            return 1
          }
          return context.canvas.width / (this.size.x * $.pixelDensityRatio)
        },

        /**
         * Get a translation vector that when applied to the tile position produces integer coordinates.
         * Needed to avoid swimming and twitching.
         * @function
         * @param {Number} [scale=1] - Scale to be applied to position.
         * @returns {OpenSeadragon.Point}
         */
        getTranslationForEdgeSmoothing: function (
          scale,
          canvasSize,
          sketchCanvasSize
        ) {
          // The translation vector must have positive values, otherwise the image goes a bit off
          // the sketch canvas to the top and left and we must use negative coordinates to repaint it
          // to the main canvas. In that case, some browsers throw:
          // INDEX_SIZE_ERR: DOM Exception 1: Index or size was negative, or greater than the allowed value.
          var x = Math.max(
            1,
            Math.ceil((sketchCanvasSize.x - canvasSize.x) / 2)
          )
          var y = Math.max(
            1,
            Math.ceil((sketchCanvasSize.y - canvasSize.y) / 2)
          )
          return new $.Point(x, y).minus(
            this.position
              .times($.pixelDensityRatio)
              .times(scale || 1)
              .apply(function (x) {
                return x % 1
              })
          )
        },

        /**
         * Removes tile from its container.
         * @function
         */
        unload: function () {
          if (this.imgElement && this.imgElement.parentNode) {
            this.imgElement.parentNode.removeChild(this.imgElement)
          }
          if (this.element && this.element.parentNode) {
            this.element.parentNode.removeChild(this.element)
          }

          this.element = null
          this.imgElement = null
          this.loaded = false
          this.loading = false
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Overlay
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * An enumeration of positions that an overlay may be assigned relative to
       * the viewport.
       * It is identical to OpenSeadragon.Placement but is kept for backward
       * compatibility.
       * @member OverlayPlacement
       * @memberof OpenSeadragon
       * @see OpenSeadragon.Placement
       * @static
       * @readonly
       * @type {Object}
       * @property {Number} CENTER
       * @property {Number} TOP_LEFT
       * @property {Number} TOP
       * @property {Number} TOP_RIGHT
       * @property {Number} RIGHT
       * @property {Number} BOTTOM_RIGHT
       * @property {Number} BOTTOM
       * @property {Number} BOTTOM_LEFT
       * @property {Number} LEFT
       */
      $.OverlayPlacement = $.Placement

      /**
       * An enumeration of possible ways to handle overlays rotation
       * @member OverlayRotationMode
       * @memberOf OpenSeadragon
       * @static
       * @readonly
       * @property {Number} NO_ROTATION The overlay ignore the viewport rotation.
       * @property {Number} EXACT The overlay use CSS 3 transforms to rotate with
       * the viewport. If the overlay contains text, it will get rotated as well.
       * @property {Number} BOUNDING_BOX The overlay adjusts for rotation by
       * taking the size of the bounding box of the rotated bounds.
       * Only valid for overlays with Rect location and scalable in both directions.
       */
      $.OverlayRotationMode = $.freezeObject({
        NO_ROTATION: 1,
        EXACT: 2,
        BOUNDING_BOX: 3,
      })

      /**
       * @class Overlay
       * @classdesc Provides a way to float an HTML element on top of the viewer element.
       *
       * @memberof OpenSeadragon
       * @param {Object} options
       * @param {Element} options.element
       * @param {OpenSeadragon.Point|OpenSeadragon.Rect} options.location - The
       * location of the overlay on the image. If a {@link OpenSeadragon.Point}
       * is specified, the overlay will be located at this location with respect
       * to the placement option. If a {@link OpenSeadragon.Rect} is specified,
       * the overlay will be placed at this location with the corresponding width
       * and height and placement TOP_LEFT.
       * @param {OpenSeadragon.Placement} [options.placement=OpenSeadragon.Placement.TOP_LEFT]
       * Defines what part of the overlay should be at the specified options.location
       * @param {OpenSeadragon.Overlay.OnDrawCallback} [options.onDraw]
       * @param {Boolean} [options.checkResize=true] Set to false to avoid to
       * check the size of the overlay every time it is drawn in the directions
       * which are not scaled. It will improve performances but will cause a
       * misalignment if the overlay size changes.
       * @param {Number} [options.width] The width of the overlay in viewport
       * coordinates. If specified, the width of the overlay will be adjusted when
       * the zoom changes.
       * @param {Number} [options.height] The height of the overlay in viewport
       * coordinates. If specified, the height of the overlay will be adjusted when
       * the zoom changes.
       * @param {Boolean} [options.rotationMode=OpenSeadragon.OverlayRotationMode.EXACT]
       * How to handle the rotation of the viewport.
       */
      $.Overlay = function (element, location, placement) {
        /**
         * onDraw callback signature used by {@link OpenSeadragon.Overlay}.
         *
         * @callback OnDrawCallback
         * @memberof OpenSeadragon.Overlay
         * @param {OpenSeadragon.Point} position
         * @param {OpenSeadragon.Point} size
         * @param {Element} element
         */

        var options
        if ($.isPlainObject(element)) {
          options = element
        } else {
          options = {
            element: element,
            location: location,
            placement: placement,
          }
        }

        this.element = options.element
        this.style = options.element.style
        this._init(options)
      }

      /** @lends OpenSeadragon.Overlay.prototype */
      $.Overlay.prototype = {
        // private
        _init: function (options) {
          this.location = options.location
          this.placement =
            options.placement === undefined
              ? $.Placement.TOP_LEFT
              : options.placement
          this.onDraw = options.onDraw
          this.checkResize =
            options.checkResize === undefined ? true : options.checkResize

          // When this.width is not null, the overlay get scaled horizontally
          this.width = options.width === undefined ? null : options.width

          // When this.height is not null, the overlay get scaled vertically
          this.height = options.height === undefined ? null : options.height

          this.rotationMode =
            options.rotationMode || $.OverlayRotationMode.EXACT

          // Having a rect as location is a syntactic sugar
          if (this.location instanceof $.Rect) {
            this.width = this.location.width
            this.height = this.location.height
            this.location = this.location.getTopLeft()
            this.placement = $.Placement.TOP_LEFT
          }

          // Deprecated properties kept for backward compatibility.
          this.scales = this.width !== null && this.height !== null
          this.bounds = new $.Rect(
            this.location.x,
            this.location.y,
            this.width,
            this.height
          )
          this.position = this.location
        },

        /**
         * Internal function to adjust the position of an overlay
         * depending on it size and placement.
         * @function
         * @param {OpenSeadragon.Point} position
         * @param {OpenSeadragon.Point} size
         */
        adjust: function (position, size) {
          var properties = $.Placement.properties[this.placement]
          if (!properties) {
            return
          }
          if (properties.isHorizontallyCentered) {
            position.x -= size.x / 2
          } else if (properties.isRight) {
            position.x -= size.x
          }
          if (properties.isVerticallyCentered) {
            position.y -= size.y / 2
          } else if (properties.isBottom) {
            position.y -= size.y
          }
        },

        /**
         * @function
         */
        destroy: function () {
          var element = this.element
          var style = this.style

          if (element.parentNode) {
            element.parentNode.removeChild(element)
            //this should allow us to preserve overlays when required between
            //pages
            if (element.prevElementParent) {
              style.display = 'none'
              //element.prevElementParent.insertBefore(
              //    element,
              //    element.prevNextSibling
              //);
              document.body.appendChild(element)
            }
          }

          // clear the onDraw callback
          this.onDraw = null

          style.top = ''
          style.left = ''
          style.position = ''

          if (this.width !== null) {
            style.width = ''
          }
          if (this.height !== null) {
            style.height = ''
          }
          var transformOriginProp =
            $.getCssPropertyWithVendorPrefix('transformOrigin')
          var transformProp = $.getCssPropertyWithVendorPrefix('transform')
          if (transformOriginProp && transformProp) {
            style[transformOriginProp] = ''
            style[transformProp] = ''
          }
        },

        /**
         * @function
         * @param {Element} container
         */
        drawHTML: function (container, viewport) {
          var element = this.element
          if (element.parentNode !== container) {
            //save the source parent for later if we need it
            element.prevElementParent = element.parentNode
            element.prevNextSibling = element.nextSibling
            container.appendChild(element)

            // have to set position before calculating size, fix #1116
            this.style.position = 'absolute'
            // this.size is used by overlays which don't get scaled in at
            // least one direction when this.checkResize is set to false.
            this.size = $.getElementSize(element)
          }

          var positionAndSize = this._getOverlayPositionAndSize(viewport)

          var position = positionAndSize.position
          var size = (this.size = positionAndSize.size)
          var rotate = positionAndSize.rotate

          // call the onDraw callback if it exists to allow one to overwrite
          // the drawing/positioning/sizing of the overlay
          if (this.onDraw) {
            this.onDraw(position, size, this.element)
          } else {
            var style = this.style
            style.left = position.x + 'px'
            style.top = position.y + 'px'
            if (this.width !== null) {
              style.width = size.x + 'px'
            }
            if (this.height !== null) {
              style.height = size.y + 'px'
            }
            var transformOriginProp =
              $.getCssPropertyWithVendorPrefix('transformOrigin')
            var transformProp = $.getCssPropertyWithVendorPrefix('transform')
            if (transformOriginProp && transformProp) {
              if (rotate) {
                style[transformOriginProp] = this._getTransformOrigin()
                style[transformProp] = 'rotate(' + rotate + 'deg)'
              } else {
                style[transformOriginProp] = ''
                style[transformProp] = ''
              }
            }
            style.display = 'block'
          }
        },

        // private
        _getOverlayPositionAndSize: function (viewport) {
          var position = viewport.pixelFromPoint(this.location, true)
          var size = this._getSizeInPixels(viewport)
          this.adjust(position, size)

          var rotate = 0
          if (
            viewport.getRotation(true) &&
            this.rotationMode !== $.OverlayRotationMode.NO_ROTATION
          ) {
            // BOUNDING_BOX is only valid if both directions get scaled.
            // Get replaced by EXACT otherwise.
            if (
              this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX &&
              this.width !== null &&
              this.height !== null
            ) {
              var rect = new $.Rect(position.x, position.y, size.x, size.y)
              var boundingBox = this._getBoundingBox(
                rect,
                viewport.getRotation(true)
              )
              position = boundingBox.getTopLeft()
              size = boundingBox.getSize()
            } else {
              rotate = viewport.getRotation(true)
            }
          }

          return {
            position: position,
            size: size,
            rotate: rotate,
          }
        },

        // private
        _getSizeInPixels: function (viewport) {
          var width = this.size.x
          var height = this.size.y
          if (this.width !== null || this.height !== null) {
            var scaledSize = viewport.deltaPixelsFromPointsNoRotate(
              new $.Point(this.width || 0, this.height || 0),
              true
            )
            if (this.width !== null) {
              width = scaledSize.x
            }
            if (this.height !== null) {
              height = scaledSize.y
            }
          }
          if (
            this.checkResize &&
            (this.width === null || this.height === null)
          ) {
            var eltSize = (this.size = $.getElementSize(this.element))
            if (this.width === null) {
              width = eltSize.x
            }
            if (this.height === null) {
              height = eltSize.y
            }
          }
          return new $.Point(width, height)
        },

        // private
        _getBoundingBox: function (rect, degrees) {
          var refPoint = this._getPlacementPoint(rect)
          return rect.rotate(degrees, refPoint).getBoundingBox()
        },

        // private
        _getPlacementPoint: function (rect) {
          var result = new $.Point(rect.x, rect.y)
          var properties = $.Placement.properties[this.placement]
          if (properties) {
            if (properties.isHorizontallyCentered) {
              result.x += rect.width / 2
            } else if (properties.isRight) {
              result.x += rect.width
            }
            if (properties.isVerticallyCentered) {
              result.y += rect.height / 2
            } else if (properties.isBottom) {
              result.y += rect.height
            }
          }
          return result
        },

        // private
        _getTransformOrigin: function () {
          var result = ''
          var properties = $.Placement.properties[this.placement]
          if (!properties) {
            return result
          }
          if (properties.isLeft) {
            result = 'left'
          } else if (properties.isRight) {
            result = 'right'
          }
          if (properties.isTop) {
            result += ' top'
          } else if (properties.isBottom) {
            result += ' bottom'
          }
          return result
        },

        /**
         * Changes the overlay settings.
         * @function
         * @param {OpenSeadragon.Point|OpenSeadragon.Rect|Object} location
         * If an object is specified, the options are the same than the constructor
         * except for the element which can not be changed.
         * @param {OpenSeadragon.Placement} placement
         */
        update: function (location, placement) {
          var options = $.isPlainObject(location)
            ? location
            : {
                location: location,
                placement: placement,
              }
          this._init({
            location: options.location || this.location,
            placement:
              options.placement !== undefined
                ? options.placement
                : this.placement,
            onDraw: options.onDraw || this.onDraw,
            checkResize: options.checkResize || this.checkResize,
            width: options.width !== undefined ? options.width : this.width,
            height: options.height !== undefined ? options.height : this.height,
            rotationMode: options.rotationMode || this.rotationMode,
          })
        },

        /**
         * Returns the current bounds of the overlay in viewport coordinates
         * @function
         * @param {OpenSeadragon.Viewport} viewport the viewport
         * @returns {OpenSeadragon.Rect} overlay bounds
         */
        getBounds: function (viewport) {
          $.console.assert(
            viewport,
            'A viewport must now be passed to Overlay.getBounds.'
          )
          var width = this.width
          var height = this.height
          if (width === null || height === null) {
            var size = viewport.deltaPointsFromPixelsNoRotate(this.size, true)
            if (width === null) {
              width = size.x
            }
            if (height === null) {
              height = size.y
            }
          }
          var location = this.location.clone()
          this.adjust(location, new $.Point(width, height))
          return this._adjustBoundsForRotation(
            viewport,
            new $.Rect(location.x, location.y, width, height)
          )
        },

        // private
        _adjustBoundsForRotation: function (viewport, bounds) {
          if (
            !viewport ||
            viewport.getRotation(true) === 0 ||
            this.rotationMode === $.OverlayRotationMode.EXACT
          ) {
            return bounds
          }
          if (this.rotationMode === $.OverlayRotationMode.BOUNDING_BOX) {
            // If overlay not fully scalable, BOUNDING_BOX falls back to EXACT
            if (this.width === null || this.height === null) {
              return bounds
            }
            // It is easier to just compute the position and size and
            // convert to viewport coordinates.
            var positionAndSize = this._getOverlayPositionAndSize(viewport)
            return viewport.viewerElementToViewportRectangle(
              new $.Rect(
                positionAndSize.position.x,
                positionAndSize.position.y,
                positionAndSize.size.x,
                positionAndSize.size.y
              )
            )
          }

          // NO_ROTATION case
          return bounds.rotate(
            -viewport.getRotation(true),
            this._getPlacementPoint(bounds)
          )
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Drawer
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Drawer
       * @memberof OpenSeadragon
       * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
       * @param {Object} options - Options for this Drawer.
       * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this Drawer.
       * @param {OpenSeadragon.Viewport} options.viewport - Reference to Viewer viewport.
       * @param {Element} options.element - Parent element.
       * @param {Number} [options.debugGridColor] - See debugGridColor in {@link OpenSeadragon.Options} for details.
       */
      $.Drawer = function (options) {
        $.console.assert(options.viewer, '[Drawer] options.viewer is required')

        //backward compatibility for positional args while preferring more
        //idiomatic javascript options object as the only argument
        var args = arguments

        if (!$.isPlainObject(options)) {
          options = {
            source: args[0], // Reference to Viewer tile source.
            viewport: args[1], // Reference to Viewer viewport.
            element: args[2], // Parent element.
          }
        }

        $.console.assert(
          options.viewport,
          '[Drawer] options.viewport is required'
        )
        $.console.assert(
          options.element,
          '[Drawer] options.element is required'
        )

        if (options.source) {
          $.console.error(
            '[Drawer] options.source is no longer accepted; use TiledImage instead'
          )
        }

        this.viewer = options.viewer
        this.viewport = options.viewport
        this.debugGridColor =
          typeof options.debugGridColor === 'string'
            ? [options.debugGridColor]
            : options.debugGridColor || $.DEFAULT_SETTINGS.debugGridColor
        if (options.opacity) {
          $.console.error(
            '[Drawer] options.opacity is no longer accepted; set the opacity on the TiledImage instead'
          )
        }

        this.useCanvas =
          $.supportsCanvas && (this.viewer ? this.viewer.useCanvas : true)
        /**
         * The parent element of this Drawer instance, passed in when the Drawer was created.
         * The parent of {@link OpenSeadragon.Drawer#canvas}.
         * @member {Element} container
         * @memberof OpenSeadragon.Drawer#
         */
        this.container = $.getElement(options.element)
        /**
         * A &lt;canvas&gt; element if the browser supports them, otherwise a &lt;div&gt; element.
         * Child element of {@link OpenSeadragon.Drawer#container}.
         * @member {Element} canvas
         * @memberof OpenSeadragon.Drawer#
         */
        this.canvas = $.makeNeutralElement(this.useCanvas ? 'canvas' : 'div')
        /**
         * 2d drawing context for {@link OpenSeadragon.Drawer#canvas} if it's a &lt;canvas&gt; element, otherwise null.
         * @member {Object} context
         * @memberof OpenSeadragon.Drawer#
         */
        this.context = this.useCanvas ? this.canvas.getContext('2d') : null

        /**
         * Sketch canvas used to temporarily draw tiles which cannot be drawn directly
         * to the main canvas due to opacity. Lazily initialized.
         */
        this.sketchCanvas = null
        this.sketchContext = null

        /**
         * @member {Element} element
         * @memberof OpenSeadragon.Drawer#
         * @deprecated Alias for {@link OpenSeadragon.Drawer#container}.
         */
        this.element = this.container

        // We force our container to ltr because our drawing math doesn't work in rtl.
        // This issue only affects our canvas renderer, but we do it always for consistency.
        // Note that this means overlays you want to be rtl need to be explicitly set to rtl.
        this.container.dir = 'ltr'

        // check canvas available width and height, set canvas width and height such that the canvas backing store is set to the proper pixel density
        if (this.useCanvas) {
          var viewportSize = this._calculateCanvasSize()
          this.canvas.width = viewportSize.x
          this.canvas.height = viewportSize.y
        }

        this.canvas.style.width = '100%'
        this.canvas.style.height = '100%'
        this.canvas.style.position = 'absolute'
        $.setElementOpacity(this.canvas, this.opacity, true)
        // Allow pointer events to pass through the canvas element so implicit
        //   pointer capture works on touch devices
        $.setElementPointerEventsNone(this.canvas)
        $.setElementTouchActionNone(this.canvas)

        // explicit left-align
        this.container.style.textAlign = 'left'
        this.container.appendChild(this.canvas)

        // Image smoothing for canvas rendering (only if canvas is used).
        // Canvas default is "true", so this will only be changed if user specified "false".
        this._imageSmoothingEnabled = true
      }

      /** @lends OpenSeadragon.Drawer.prototype */
      $.Drawer.prototype = {
        // deprecated
        addOverlay: function (element, location, placement, onDraw) {
          $.console.error(
            'drawer.addOverlay is deprecated. Use viewer.addOverlay instead.'
          )
          this.viewer.addOverlay(element, location, placement, onDraw)
          return this
        },

        // deprecated
        updateOverlay: function (element, location, placement) {
          $.console.error(
            'drawer.updateOverlay is deprecated. Use viewer.updateOverlay instead.'
          )
          this.viewer.updateOverlay(element, location, placement)
          return this
        },

        // deprecated
        removeOverlay: function (element) {
          $.console.error(
            'drawer.removeOverlay is deprecated. Use viewer.removeOverlay instead.'
          )
          this.viewer.removeOverlay(element)
          return this
        },

        // deprecated
        clearOverlays: function () {
          $.console.error(
            'drawer.clearOverlays is deprecated. Use viewer.clearOverlays instead.'
          )
          this.viewer.clearOverlays()
          return this
        },

        /**
         * This function converts the given point from to the drawer coordinate by
         * multiplying it with the pixel density.
         * This function does not take rotation into account, thus assuming provided
         * point is at 0 degree.
         * @param {OpenSeadragon.Point} point - the pixel point to convert
         * @returns {OpenSeadragon.Point} Point in drawer coordinate system.
         */
        viewportCoordToDrawerCoord: function (point) {
          var vpPoint = this.viewport.pixelFromPointNoRotate(point, true)
          return new $.Point(
            vpPoint.x * $.pixelDensityRatio,
            vpPoint.y * $.pixelDensityRatio
          )
        },

        /**
         * This function will create multiple polygon paths on the drawing context by provided polygons,
         * then clip the context to the paths.
         * @param {OpenSeadragon.Point[][]} polygons - an array of polygons. A polygon is an array of OpenSeadragon.Point
         * @param {Boolean} useSketch - Whether to use the sketch canvas or not.
         */
        clipWithPolygons: function (polygons, useSketch) {
          if (!this.useCanvas) {
            return
          }
          var context = this._getContext(useSketch)
          context.beginPath()
          polygons.forEach(function (polygon) {
            polygon.forEach(function (coord, i) {
              context[i === 0 ? 'moveTo' : 'lineTo'](coord.x, coord.y)
            })
          })
          context.clip()
        },

        /**
         * Set the opacity of the drawer.
         * @param {Number} opacity
         * @returns {OpenSeadragon.Drawer} Chainable.
         */
        setOpacity: function (opacity) {
          $.console.error(
            'drawer.setOpacity is deprecated. Use tiledImage.setOpacity instead.'
          )
          var world = this.viewer.world
          for (var i = 0; i < world.getItemCount(); i++) {
            world.getItemAt(i).setOpacity(opacity)
          }
          return this
        },

        /**
         * Get the opacity of the drawer.
         * @returns {Number}
         */
        getOpacity: function () {
          $.console.error(
            'drawer.getOpacity is deprecated. Use tiledImage.getOpacity instead.'
          )
          var world = this.viewer.world
          var maxOpacity = 0
          for (var i = 0; i < world.getItemCount(); i++) {
            var opacity = world.getItemAt(i).getOpacity()
            if (opacity > maxOpacity) {
              maxOpacity = opacity
            }
          }
          return maxOpacity
        },

        // deprecated
        needsUpdate: function () {
          $.console.error(
            '[Drawer.needsUpdate] this function is deprecated. Use World.needsDraw instead.'
          )
          return this.viewer.world.needsDraw()
        },

        // deprecated
        numTilesLoaded: function () {
          $.console.error(
            '[Drawer.numTilesLoaded] this function is deprecated. Use TileCache.numTilesLoaded instead.'
          )
          return this.viewer.tileCache.numTilesLoaded()
        },

        // deprecated
        reset: function () {
          $.console.error(
            '[Drawer.reset] this function is deprecated. Use World.resetItems instead.'
          )
          this.viewer.world.resetItems()
          return this
        },

        // deprecated
        update: function () {
          $.console.error(
            '[Drawer.update] this function is deprecated. Use Drawer.clear and World.draw instead.'
          )
          this.clear()
          this.viewer.world.draw()
          return this
        },

        /**
         * @returns {Boolean} True if rotation is supported.
         */
        canRotate: function () {
          return this.useCanvas
        },

        /**
         * Destroy the drawer (unload current loaded tiles)
         */
        destroy: function () {
          //force unloading of current canvas (1x1 will be gc later, trick not necessarily needed)
          this.canvas.width = 1
          this.canvas.height = 1
          this.sketchCanvas = null
          this.sketchContext = null
        },

        /**
         * Clears the Drawer so it's ready to draw another frame.
         */
        clear: function () {
          this.canvas.innerHTML = ''
          if (this.useCanvas) {
            var viewportSize = this._calculateCanvasSize()
            if (
              this.canvas.width !== viewportSize.x ||
              this.canvas.height !== viewportSize.y
            ) {
              this.canvas.width = viewportSize.x
              this.canvas.height = viewportSize.y
              this._updateImageSmoothingEnabled(this.context)
              if (this.sketchCanvas !== null) {
                var sketchCanvasSize = this._calculateSketchCanvasSize()
                this.sketchCanvas.width = sketchCanvasSize.x
                this.sketchCanvas.height = sketchCanvasSize.y
                this._updateImageSmoothingEnabled(this.sketchContext)
              }
            }
            this._clear()
          }
        },

        _clear: function (useSketch, bounds) {
          if (!this.useCanvas) {
            return
          }
          var context = this._getContext(useSketch)
          if (bounds) {
            context.clearRect(bounds.x, bounds.y, bounds.width, bounds.height)
          } else {
            var canvas = context.canvas
            context.clearRect(0, 0, canvas.width, canvas.height)
          }
        },

        /**
         * Scale from OpenSeadragon viewer rectangle to drawer rectangle
         * (ignoring rotation)
         * @param {OpenSeadragon.Rect} rectangle - The rectangle in viewport coordinate system.
         * @returns {OpenSeadragon.Rect} Rectangle in drawer coordinate system.
         */
        viewportToDrawerRectangle: function (rectangle) {
          var topLeft = this.viewport.pixelFromPointNoRotate(
            rectangle.getTopLeft(),
            true
          )
          var size = this.viewport.deltaPixelsFromPointsNoRotate(
            rectangle.getSize(),
            true
          )

          return new $.Rect(
            topLeft.x * $.pixelDensityRatio,
            topLeft.y * $.pixelDensityRatio,
            size.x * $.pixelDensityRatio,
            size.y * $.pixelDensityRatio
          )
        },

        /**
         * Draws the given tile.
         * @param {OpenSeadragon.Tile} tile - The tile to draw.
         * @param {Function} drawingHandler - Method for firing the drawing event if using canvas.
         * drawingHandler({context, tile, rendered})
         * @param {Boolean} useSketch - Whether to use the sketch canvas or not.
         * where <code>rendered</code> is the context with the pre-drawn image.
         * @param {Float} [scale=1] - Apply a scale to tile position and size. Defaults to 1.
         * @param {OpenSeadragon.Point} [translate] A translation vector to offset tile position
         * @param {Boolean} [shouldRoundPositionAndSize] - Tells whether to round
         * position and size of tiles supporting alpha channel in non-transparency
         * context.
         * @param {OpenSeadragon.TileSource} source - The source specification of the tile.
         */
        drawTile: function (
          tile,
          drawingHandler,
          useSketch,
          scale,
          translate,
          shouldRoundPositionAndSize,
          source
        ) {
          $.console.assert(tile, '[Drawer.drawTile] tile is required')
          $.console.assert(
            drawingHandler,
            '[Drawer.drawTile] drawingHandler is required'
          )

          if (this.useCanvas) {
            var context = this._getContext(useSketch)
            scale = scale || 1
            tile.drawCanvas(
              context,
              drawingHandler,
              scale,
              translate,
              shouldRoundPositionAndSize,
              source
            )
          } else {
            tile.drawHTML(this.canvas)
          }
        },

        _getContext: function (useSketch) {
          var context = this.context
          if (useSketch) {
            if (this.sketchCanvas === null) {
              this.sketchCanvas = document.createElement('canvas')
              var sketchCanvasSize = this._calculateSketchCanvasSize()
              this.sketchCanvas.width = sketchCanvasSize.x
              this.sketchCanvas.height = sketchCanvasSize.y
              this.sketchContext = this.sketchCanvas.getContext('2d')

              // If the viewport is not currently rotated, the sketchCanvas
              // will have the same size as the main canvas. However, if
              // the viewport get rotated later on, we will need to resize it.
              if (this.viewport.getRotation() === 0) {
                var self = this
                this.viewer.addHandler('rotate', function resizeSketchCanvas() {
                  if (self.viewport.getRotation() === 0) {
                    return
                  }
                  self.viewer.removeHandler('rotate', resizeSketchCanvas)
                  var sketchCanvasSize = self._calculateSketchCanvasSize()
                  self.sketchCanvas.width = sketchCanvasSize.x
                  self.sketchCanvas.height = sketchCanvasSize.y
                })
              }
              this._updateImageSmoothingEnabled(this.sketchContext)
            }
            context = this.sketchContext
          }
          return context
        },

        // private
        saveContext: function (useSketch) {
          if (!this.useCanvas) {
            return
          }

          this._getContext(useSketch).save()
        },

        // private
        restoreContext: function (useSketch) {
          if (!this.useCanvas) {
            return
          }

          this._getContext(useSketch).restore()
        },

        // private
        setClip: function (rect, useSketch) {
          if (!this.useCanvas) {
            return
          }

          var context = this._getContext(useSketch)
          context.beginPath()
          context.rect(rect.x, rect.y, rect.width, rect.height)
          context.clip()
        },

        // private
        drawRectangle: function (rect, fillStyle, useSketch) {
          if (!this.useCanvas) {
            return
          }

          var context = this._getContext(useSketch)
          context.save()
          context.fillStyle = fillStyle
          context.fillRect(rect.x, rect.y, rect.width, rect.height)
          context.restore()
        },

        /**
         * Blends the sketch canvas in the main canvas.
         * @param {Object} options The options
         * @param {Float} options.opacity The opacity of the blending.
         * @param {Float} [options.scale=1] The scale at which tiles were drawn on
         * the sketch. Default is 1.
         * Use scale to draw at a lower scale and then enlarge onto the main canvas.
         * @param {OpenSeadragon.Point} [options.translate] A translation vector
         * that was used to draw the tiles
         * @param {String} [options.compositeOperation] - How the image is
         * composited onto other images; see compositeOperation in
         * {@link OpenSeadragon.Options} for possible values.
         * @param {OpenSeadragon.Rect} [options.bounds] The part of the sketch
         * canvas to blend in the main canvas. If specified, options.scale and
         * options.translate get ignored.
         */
        blendSketch: function (opacity, scale, translate, compositeOperation) {
          var options = opacity
          if (!$.isPlainObject(options)) {
            options = {
              opacity: opacity,
              scale: scale,
              translate: translate,
              compositeOperation: compositeOperation,
            }
          }
          if (!this.useCanvas || !this.sketchCanvas) {
            return
          }
          opacity = options.opacity
          compositeOperation = options.compositeOperation
          var bounds = options.bounds

          this.context.save()
          this.context.globalAlpha = opacity
          if (compositeOperation) {
            this.context.globalCompositeOperation = compositeOperation
          }
          if (bounds) {
            // Internet Explorer, Microsoft Edge, and Safari have problems
            // when you call context.drawImage with negative x or y
            // or x + width or y + height greater than the canvas width or height respectively.
            if (bounds.x < 0) {
              bounds.width += bounds.x
              bounds.x = 0
            }
            if (bounds.x + bounds.width > this.canvas.width) {
              bounds.width = this.canvas.width - bounds.x
            }
            if (bounds.y < 0) {
              bounds.height += bounds.y
              bounds.y = 0
            }
            if (bounds.y + bounds.height > this.canvas.height) {
              bounds.height = this.canvas.height - bounds.y
            }

            this.context.drawImage(
              this.sketchCanvas,
              bounds.x,
              bounds.y,
              bounds.width,
              bounds.height,
              bounds.x,
              bounds.y,
              bounds.width,
              bounds.height
            )
          } else {
            scale = options.scale || 1
            translate = options.translate
            var position =
              translate instanceof $.Point ? translate : new $.Point(0, 0)

            var widthExt = 0
            var heightExt = 0
            if (translate) {
              var widthDiff = this.sketchCanvas.width - this.canvas.width
              var heightDiff = this.sketchCanvas.height - this.canvas.height
              widthExt = Math.round(widthDiff / 2)
              heightExt = Math.round(heightDiff / 2)
            }
            this.context.drawImage(
              this.sketchCanvas,
              position.x - widthExt * scale,
              position.y - heightExt * scale,
              (this.canvas.width + 2 * widthExt) * scale,
              (this.canvas.height + 2 * heightExt) * scale,
              -widthExt,
              -heightExt,
              this.canvas.width + 2 * widthExt,
              this.canvas.height + 2 * heightExt
            )
          }
          this.context.restore()
        },

        // private
        drawDebugInfo: function (tile, count, i, tiledImage) {
          if (!this.useCanvas) {
            return
          }

          var colorIndex =
            this.viewer.world.getIndexOfItem(tiledImage) %
            this.debugGridColor.length
          var context = this.context
          context.save()
          context.lineWidth = 2 * $.pixelDensityRatio
          context.font =
            'small-caps bold ' + 13 * $.pixelDensityRatio + 'px arial'
          context.strokeStyle = this.debugGridColor[colorIndex]
          context.fillStyle = this.debugGridColor[colorIndex]

          if (this.viewport.getRotation(true) % 360 !== 0) {
            this._offsetForRotation({
              degrees: this.viewport.getRotation(true),
            })
          }
          if (tiledImage.getRotation(true) % 360 !== 0) {
            this._offsetForRotation({
              degrees: tiledImage.getRotation(true),
              point: tiledImage.viewport.pixelFromPointNoRotate(
                tiledImage._getRotationPoint(true),
                true
              ),
            })
          }
          if (
            tiledImage.viewport.getRotation(true) % 360 === 0 &&
            tiledImage.getRotation(true) % 360 === 0
          ) {
            if (tiledImage._drawer.viewer.viewport.getFlip()) {
              tiledImage._drawer._flip()
            }
          }

          context.strokeRect(
            tile.position.x * $.pixelDensityRatio,
            tile.position.y * $.pixelDensityRatio,
            tile.size.x * $.pixelDensityRatio,
            tile.size.y * $.pixelDensityRatio
          )

          var tileCenterX =
            (tile.position.x + tile.size.x / 2) * $.pixelDensityRatio
          var tileCenterY =
            (tile.position.y + tile.size.y / 2) * $.pixelDensityRatio

          // Rotate the text the right way around.
          context.translate(tileCenterX, tileCenterY)
          context.rotate((Math.PI / 180) * -this.viewport.getRotation(true))
          context.translate(-tileCenterX, -tileCenterY)

          if (tile.x === 0 && tile.y === 0) {
            context.fillText(
              'Zoom: ' + this.viewport.getZoom(),
              tile.position.x * $.pixelDensityRatio,
              (tile.position.y - 30) * $.pixelDensityRatio
            )
            context.fillText(
              'Pan: ' + this.viewport.getBounds().toString(),
              tile.position.x * $.pixelDensityRatio,
              (tile.position.y - 20) * $.pixelDensityRatio
            )
          }
          context.fillText(
            'Level: ' + tile.level,
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 20) * $.pixelDensityRatio
          )
          context.fillText(
            'Column: ' + tile.x,
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 30) * $.pixelDensityRatio
          )
          context.fillText(
            'Row: ' + tile.y,
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 40) * $.pixelDensityRatio
          )
          context.fillText(
            'Order: ' + i + ' of ' + count,
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 50) * $.pixelDensityRatio
          )
          context.fillText(
            'Size: ' + tile.size.toString(),
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 60) * $.pixelDensityRatio
          )
          context.fillText(
            'Position: ' + tile.position.toString(),
            (tile.position.x + 10) * $.pixelDensityRatio,
            (tile.position.y + 70) * $.pixelDensityRatio
          )

          if (this.viewport.getRotation(true) % 360 !== 0) {
            this._restoreRotationChanges()
          }
          if (tiledImage.getRotation(true) % 360 !== 0) {
            this._restoreRotationChanges()
          }

          if (
            tiledImage.viewport.getRotation(true) % 360 === 0 &&
            tiledImage.getRotation(true) % 360 === 0
          ) {
            if (tiledImage._drawer.viewer.viewport.getFlip()) {
              tiledImage._drawer._flip()
            }
          }

          context.restore()
        },

        // private
        debugRect: function (rect) {
          if (this.useCanvas) {
            var context = this.context
            context.save()
            context.lineWidth = 2 * $.pixelDensityRatio
            context.strokeStyle = this.debugGridColor[0]
            context.fillStyle = this.debugGridColor[0]

            context.strokeRect(
              rect.x * $.pixelDensityRatio,
              rect.y * $.pixelDensityRatio,
              rect.width * $.pixelDensityRatio,
              rect.height * $.pixelDensityRatio
            )

            context.restore()
          }
        },

        /**
         * Turns image smoothing on or off for this viewer. Note: Ignored in some (especially older) browsers that do not support this property.
         *
         * @function
         * @param {Boolean} [imageSmoothingEnabled] - Whether or not the image is
         * drawn smoothly on the canvas; see imageSmoothingEnabled in
         * {@link OpenSeadragon.Options} for more explanation.
         */
        setImageSmoothingEnabled: function (imageSmoothingEnabled) {
          if (this.useCanvas) {
            this._imageSmoothingEnabled = imageSmoothingEnabled
            this._updateImageSmoothingEnabled(this.context)
            this.viewer.forceRedraw()
          }
        },

        // private
        _updateImageSmoothingEnabled: function (context) {
          context.msImageSmoothingEnabled = this._imageSmoothingEnabled
          context.imageSmoothingEnabled = this._imageSmoothingEnabled
        },

        /**
         * Get the canvas size
         * @param {Boolean} sketch If set to true return the size of the sketch canvas
         * @returns {OpenSeadragon.Point} The size of the canvas
         */
        getCanvasSize: function (sketch) {
          var canvas = this._getContext(sketch).canvas
          return new $.Point(canvas.width, canvas.height)
        },

        getCanvasCenter: function () {
          return new $.Point(this.canvas.width / 2, this.canvas.height / 2)
        },

        // private
        _offsetForRotation: function (options) {
          var point = options.point
            ? options.point.times($.pixelDensityRatio)
            : this.getCanvasCenter()

          var context = this._getContext(options.useSketch)
          context.save()

          context.translate(point.x, point.y)
          if (this.viewer.viewport.flipped) {
            context.rotate((Math.PI / 180) * -options.degrees)
            context.scale(-1, 1)
          } else {
            context.rotate((Math.PI / 180) * options.degrees)
          }
          context.translate(-point.x, -point.y)
        },

        // private
        _flip: function (options) {
          options = options || {}
          var point = options.point
            ? options.point.times($.pixelDensityRatio)
            : this.getCanvasCenter()
          var context = this._getContext(options.useSketch)

          context.translate(point.x, 0)
          context.scale(-1, 1)
          context.translate(-point.x, 0)
        },

        // private
        _restoreRotationChanges: function (useSketch) {
          var context = this._getContext(useSketch)
          context.restore()
        },

        // private
        _calculateCanvasSize: function () {
          var pixelDensityRatio = $.pixelDensityRatio
          var viewportSize = this.viewport.getContainerSize()
          return {
            // canvas width and height are integers
            x: Math.round(viewportSize.x * pixelDensityRatio),
            y: Math.round(viewportSize.y * pixelDensityRatio),
          }
        },

        // private
        _calculateSketchCanvasSize: function () {
          var canvasSize = this._calculateCanvasSize()
          if (this.viewport.getRotation() === 0) {
            return canvasSize
          }
          // If the viewport is rotated, we need a larger sketch canvas in order
          // to support edge smoothing.
          var sketchCanvasSize = Math.ceil(
            Math.sqrt(canvasSize.x * canvasSize.x + canvasSize.y * canvasSize.y)
          )
          return {
            x: sketchCanvasSize,
            y: sketchCanvasSize,
          }
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - Viewport
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class Viewport
       * @memberof OpenSeadragon
       * @classdesc Handles coordinate-related functionality (zoom, pan, rotation, etc.)
       * for an {@link OpenSeadragon.Viewer}.
       * @param {Object} options - Options for this Viewport.
       * @param {Object} [options.margins] - See viewportMargins in {@link OpenSeadragon.Options}.
       * @param {Number} [options.springStiffness] - See springStiffness in {@link OpenSeadragon.Options}.
       * @param {Number} [options.animationTime] - See animationTime in {@link OpenSeadragon.Options}.
       * @param {Number} [options.minZoomImageRatio] - See minZoomImageRatio in {@link OpenSeadragon.Options}.
       * @param {Number} [options.maxZoomPixelRatio] - See maxZoomPixelRatio in {@link OpenSeadragon.Options}.
       * @param {Number} [options.visibilityRatio] - See visibilityRatio in {@link OpenSeadragon.Options}.
       * @param {Boolean} [options.wrapHorizontal] - See wrapHorizontal in {@link OpenSeadragon.Options}.
       * @param {Boolean} [options.wrapVertical] - See wrapVertical in {@link OpenSeadragon.Options}.
       * @param {Number} [options.defaultZoomLevel] - See defaultZoomLevel in {@link OpenSeadragon.Options}.
       * @param {Number} [options.minZoomLevel] - See minZoomLevel in {@link OpenSeadragon.Options}.
       * @param {Number} [options.maxZoomLevel] - See maxZoomLevel in {@link OpenSeadragon.Options}.
       * @param {Number} [options.degrees] - See degrees in {@link OpenSeadragon.Options}.
       * @param {Boolean} [options.homeFillsViewer] - See homeFillsViewer in {@link OpenSeadragon.Options}.
       * @param {Boolean} [options.silenceMultiImageWarnings] - See silenceMultiImageWarnings in {@link OpenSeadragon.Options}.
       */
      $.Viewport = function (options) {
        //backward compatibility for positional args while preferring more
        //idiomatic javascript options object as the only argument
        var args = arguments
        if (args.length && args[0] instanceof $.Point) {
          options = {
            containerSize: args[0],
            contentSize: args[1],
            config: args[2],
          }
        }

        //options.config and the general config argument are deprecated
        //in favor of the more direct specification of optional settings
        //being passed directly on the options object
        if (options.config) {
          $.extend(true, options, options.config)
          delete options.config
        }

        this._margins = $.extend(
          {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
          },
          options.margins || {}
        )

        delete options.margins

        options.initialDegrees = options.degrees
        delete options.degrees

        $.extend(
          true,
          this,
          {
            //required settings
            containerSize: null,
            contentSize: null,

            //internal state properties
            zoomPoint: null,
            rotationPivot: null,
            viewer: null,

            //configurable options
            springStiffness: $.DEFAULT_SETTINGS.springStiffness,
            animationTime: $.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $.DEFAULT_SETTINGS.minZoomImageRatio,
            maxZoomPixelRatio: $.DEFAULT_SETTINGS.maxZoomPixelRatio,
            visibilityRatio: $.DEFAULT_SETTINGS.visibilityRatio,
            wrapHorizontal: $.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $.DEFAULT_SETTINGS.wrapVertical,
            defaultZoomLevel: $.DEFAULT_SETTINGS.defaultZoomLevel,
            minZoomLevel: $.DEFAULT_SETTINGS.minZoomLevel,
            maxZoomLevel: $.DEFAULT_SETTINGS.maxZoomLevel,
            initialDegrees: $.DEFAULT_SETTINGS.degrees,
            flipped: $.DEFAULT_SETTINGS.flipped,
            homeFillsViewer: $.DEFAULT_SETTINGS.homeFillsViewer,
            silenceMultiImageWarnings:
              $.DEFAULT_SETTINGS.silenceMultiImageWarnings,
          },
          options
        )

        this._updateContainerInnerSize()

        this.centerSpringX = new $.Spring({
          initial: 0,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })
        this.centerSpringY = new $.Spring({
          initial: 0,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })
        this.zoomSpring = new $.Spring({
          exponential: true,
          initial: 1,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this.degreesSpring = new $.Spring({
          initial: options.initialDegrees,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this._oldCenterX = this.centerSpringX.current.value
        this._oldCenterY = this.centerSpringY.current.value
        this._oldZoom = this.zoomSpring.current.value
        this._oldDegrees = this.degreesSpring.current.value

        this._setContentBounds(new $.Rect(0, 0, 1, 1), 1)

        this.goHome(true)
        this.update()
      }

      /** @lends OpenSeadragon.Viewport.prototype */
      $.Viewport.prototype = {
        // deprecated
        get degrees() {
          $.console.warn(
            'Accessing [Viewport.degrees] is deprecated. Use viewport.getRotation instead.'
          )
          return this.getRotation()
        },

        // deprecated
        set degrees(degrees) {
          $.console.warn(
            'Setting [Viewport.degrees] is deprecated. Use viewport.rotateTo, viewport.rotateBy, or viewport.setRotation instead.'
          )
          this.rotateTo(degrees)
        },

        /**
         * Updates the viewport's home bounds and constraints for the given content size.
         * @function
         * @param {OpenSeadragon.Point} contentSize - size of the content in content units
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:reset-size
         */
        resetContentSize: function (contentSize) {
          $.console.assert(
            contentSize,
            '[Viewport.resetContentSize] contentSize is required'
          )
          $.console.assert(
            contentSize instanceof $.Point,
            '[Viewport.resetContentSize] contentSize must be an OpenSeadragon.Point'
          )
          $.console.assert(
            contentSize.x > 0,
            '[Viewport.resetContentSize] contentSize.x must be greater than 0'
          )
          $.console.assert(
            contentSize.y > 0,
            '[Viewport.resetContentSize] contentSize.y must be greater than 0'
          )

          this._setContentBounds(
            new $.Rect(0, 0, 1, contentSize.y / contentSize.x),
            contentSize.x
          )
          return this
        },

        // deprecated
        setHomeBounds: function (bounds, contentFactor) {
          $.console.error(
            '[Viewport.setHomeBounds] this function is deprecated; The content bounds should not be set manually.'
          )
          this._setContentBounds(bounds, contentFactor)
        },

        // Set the viewport's content bounds
        // @param {OpenSeadragon.Rect} bounds - the new bounds in viewport coordinates
        // without rotation
        // @param {Number} contentFactor - how many content units per viewport unit
        // @fires OpenSeadragon.Viewer.event:reset-size
        // @private
        _setContentBounds: function (bounds, contentFactor) {
          $.console.assert(
            bounds,
            '[Viewport._setContentBounds] bounds is required'
          )
          $.console.assert(
            bounds instanceof $.Rect,
            '[Viewport._setContentBounds] bounds must be an OpenSeadragon.Rect'
          )
          $.console.assert(
            bounds.width > 0,
            '[Viewport._setContentBounds] bounds.width must be greater than 0'
          )
          $.console.assert(
            bounds.height > 0,
            '[Viewport._setContentBounds] bounds.height must be greater than 0'
          )

          this._contentBoundsNoRotate = bounds.clone()
          this._contentSizeNoRotate = this._contentBoundsNoRotate
            .getSize()
            .times(contentFactor)

          this._contentBounds = bounds
            .rotate(this.getRotation())
            .getBoundingBox()
          this._contentSize = this._contentBounds.getSize().times(contentFactor)
          this._contentAspectRatio = this._contentSize.x / this._contentSize.y

          if (this.viewer) {
            /**
             * Raised when the viewer's content size or home bounds are reset
             * (see {@link OpenSeadragon.Viewport#resetContentSize}).
             *
             * @event reset-size
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {OpenSeadragon.Point} contentSize
             * @property {OpenSeadragon.Rect} contentBounds - Content bounds.
             * @property {OpenSeadragon.Rect} homeBounds - Content bounds.
             * Deprecated use contentBounds instead.
             * @property {Number} contentFactor
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('reset-size', {
              contentSize: this._contentSizeNoRotate.clone(),
              contentFactor: contentFactor,
              homeBounds: this._contentBoundsNoRotate.clone(),
              contentBounds: this._contentBounds.clone(),
            })
          }
        },

        /**
         * Returns the home zoom in "viewport zoom" value.
         * @function
         * @returns {Number} The home zoom in "viewport zoom".
         */
        getHomeZoom: function () {
          if (this.defaultZoomLevel) {
            return this.defaultZoomLevel
          }

          var aspectFactor = this._contentAspectRatio / this.getAspectRatio()
          var output
          if (this.homeFillsViewer) {
            // fill the viewer and clip the image
            output = aspectFactor >= 1 ? aspectFactor : 1
          } else {
            output = aspectFactor >= 1 ? 1 : aspectFactor
          }

          return output / this._contentBounds.width
        },

        /**
         * Returns the home bounds in viewport coordinates.
         * @function
         * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.
         */
        getHomeBounds: function () {
          return this.getHomeBoundsNoRotate().rotate(-this.getRotation())
        },

        /**
         * Returns the home bounds in viewport coordinates.
         * This method ignores the viewport rotation. Use
         * {@link OpenSeadragon.Viewport#getHomeBounds} to take it into account.
         * @function
         * @returns {OpenSeadragon.Rect} The home bounds in vewport coordinates.
         */
        getHomeBoundsNoRotate: function () {
          var center = this._contentBounds.getCenter()
          var width = 1.0 / this.getHomeZoom()
          var height = width / this.getAspectRatio()

          return new $.Rect(
            center.x - width / 2.0,
            center.y - height / 2.0,
            width,
            height
          )
        },

        /**
         * @function
         * @param {Boolean} immediately
         * @fires OpenSeadragon.Viewer.event:home
         */
        goHome: function (immediately) {
          if (this.viewer) {
            /**
             * Raised when the "home" operation occurs (see {@link OpenSeadragon.Viewport#goHome}).
             *
             * @event home
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {Boolean} immediately
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('home', {
              immediately: immediately,
            })
          }
          return this.fitBounds(this.getHomeBounds(), immediately)
        },

        /**
         * @function
         */
        getMinZoom: function () {
          var homeZoom = this.getHomeZoom(),
            zoom = this.minZoomLevel
              ? this.minZoomLevel
              : this.minZoomImageRatio * homeZoom

          return zoom
        },

        /**
         * @function
         */
        getMaxZoom: function () {
          var zoom = this.maxZoomLevel
          if (!zoom) {
            zoom =
              (this._contentSize.x * this.maxZoomPixelRatio) /
              this._containerInnerSize.x
            zoom /= this._contentBounds.width
          }

          return Math.max(zoom, this.getHomeZoom())
        },

        /**
         * @function
         */
        getAspectRatio: function () {
          return this._containerInnerSize.x / this._containerInnerSize.y
        },

        /**
         * @function
         * @returns {OpenSeadragon.Point} The size of the container, in screen coordinates.
         */
        getContainerSize: function () {
          return new $.Point(this.containerSize.x, this.containerSize.y)
        },

        /**
         * The margins push the "home" region in from the sides by the specified amounts.
         * @function
         * @returns {Object} Properties (Numbers, in screen coordinates): left, top, right, bottom.
         */
        getMargins: function () {
          return $.extend({}, this._margins) // Make a copy so we are not returning our original
        },

        /**
         * The margins push the "home" region in from the sides by the specified amounts.
         * @function
         * @param {Object} margins - Properties (Numbers, in screen coordinates): left, top, right, bottom.
         */
        setMargins: function (margins) {
          $.console.assert(
            $.type(margins) === 'object',
            '[Viewport.setMargins] margins must be an object'
          )

          this._margins = $.extend(
            {
              left: 0,
              top: 0,
              right: 0,
              bottom: 0,
            },
            margins
          )

          this._updateContainerInnerSize()
          if (this.viewer) {
            this.viewer.forceRedraw()
          }
        },

        /**
         * Returns the bounds of the visible area in viewport coordinates.
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.
         */
        getBounds: function (current) {
          return this.getBoundsNoRotate(current).rotate(
            -this.getRotation(current)
          )
        },

        /**
         * Returns the bounds of the visible area in viewport coordinates.
         * This method ignores the viewport rotation. Use
         * {@link OpenSeadragon.Viewport#getBounds} to take it into account.
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to, in viewport coordinates.
         */
        getBoundsNoRotate: function (current) {
          var center = this.getCenter(current)
          var width = 1.0 / this.getZoom(current)
          var height = width / this.getAspectRatio()

          return new $.Rect(
            center.x - width / 2.0,
            center.y - height / 2.0,
            width,
            height
          )
        },

        /**
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,
         * including the space taken by margins, in viewport coordinates.
         */
        getBoundsWithMargins: function (current) {
          return this.getBoundsNoRotateWithMargins(current).rotate(
            -this.getRotation(current),
            this.getCenter(current)
          )
        },

        /**
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         * @returns {OpenSeadragon.Rect} The location you are zoomed/panned to,
         * including the space taken by margins, in viewport coordinates.
         */
        getBoundsNoRotateWithMargins: function (current) {
          var bounds = this.getBoundsNoRotate(current)
          var factor = this._containerInnerSize.x * this.getZoom(current)
          bounds.x -= this._margins.left / factor
          bounds.y -= this._margins.top / factor
          bounds.width += (this._margins.left + this._margins.right) / factor
          bounds.height += (this._margins.top + this._margins.bottom) / factor
          return bounds
        },

        /**
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         */
        getCenter: function (current) {
          var centerCurrent = new $.Point(
              this.centerSpringX.current.value,
              this.centerSpringY.current.value
            ),
            centerTarget = new $.Point(
              this.centerSpringX.target.value,
              this.centerSpringY.target.value
            ),
            oldZoomPixel,
            zoom,
            width,
            height,
            bounds,
            newZoomPixel,
            deltaZoomPixels,
            deltaZoomPoints

          if (current) {
            return centerCurrent
          } else if (!this.zoomPoint) {
            return centerTarget
          }

          oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true)

          zoom = this.getZoom()
          width = 1.0 / zoom
          height = width / this.getAspectRatio()
          bounds = new $.Rect(
            centerCurrent.x - width / 2.0,
            centerCurrent.y - height / 2.0,
            width,
            height
          )

          newZoomPixel = this._pixelFromPoint(this.zoomPoint, bounds)
          deltaZoomPixels = newZoomPixel
            .minus(oldZoomPixel)
            .rotate(-this.getRotation(true))
          deltaZoomPoints = deltaZoomPixels.divide(
            this._containerInnerSize.x * zoom
          )

          return centerTarget.plus(deltaZoomPoints)
        },

        /**
         * @function
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         */
        getZoom: function (current) {
          if (current) {
            return this.zoomSpring.current.value
          } else {
            return this.zoomSpring.target.value
          }
        },

        // private
        _applyZoomConstraints: function (zoom) {
          return Math.max(Math.min(zoom, this.getMaxZoom()), this.getMinZoom())
        },

        /**
         * @function
         * @private
         * @param {OpenSeadragon.Rect} bounds
         * @returns {OpenSeadragon.Rect} constrained bounds.
         */
        _applyBoundaryConstraints: function (bounds) {
          var newBounds =
            this.viewportToViewerElementRectangle(bounds).getBoundingBox()
          var cb = this.viewportToViewerElementRectangle(
            this._contentBoundsNoRotate
          ).getBoundingBox()

          var xConstrained = false
          var yConstrained = false

          if (this.wrapHorizontal);
          else {
            var boundsRight = newBounds.x + newBounds.width
            var contentRight = cb.x + cb.width

            var horizontalThreshold, leftDx, rightDx
            if (newBounds.width > cb.width) {
              horizontalThreshold = this.visibilityRatio * cb.width
            } else {
              horizontalThreshold = this.visibilityRatio * newBounds.width
            }

            leftDx = cb.x - boundsRight + horizontalThreshold
            rightDx = contentRight - newBounds.x - horizontalThreshold
            if (horizontalThreshold > cb.width) {
              newBounds.x += (leftDx + rightDx) / 2
              xConstrained = true
            } else if (rightDx < 0) {
              newBounds.x += rightDx
              xConstrained = true
            } else if (leftDx > 0) {
              newBounds.x += leftDx
              xConstrained = true
            }
          }

          if (this.wrapVertical);
          else {
            var boundsBottom = newBounds.y + newBounds.height
            var contentBottom = cb.y + cb.height

            var verticalThreshold, topDy, bottomDy
            if (newBounds.height > cb.height) {
              verticalThreshold = this.visibilityRatio * cb.height
            } else {
              verticalThreshold = this.visibilityRatio * newBounds.height
            }

            topDy = cb.y - boundsBottom + verticalThreshold
            bottomDy = contentBottom - newBounds.y - verticalThreshold
            if (verticalThreshold > cb.height) {
              newBounds.y += (topDy + bottomDy) / 2
              yConstrained = true
            } else if (bottomDy < 0) {
              newBounds.y += bottomDy
              yConstrained = true
            } else if (topDy > 0) {
              newBounds.y += topDy
              yConstrained = true
            }
          }

          var constraintApplied = xConstrained || yConstrained
          var newViewportBounds = constraintApplied
            ? this.viewerElementToViewportRectangle(newBounds)
            : bounds.clone()
          newViewportBounds.xConstrained = xConstrained
          newViewportBounds.yConstrained = yConstrained
          newViewportBounds.constraintApplied = constraintApplied

          return newViewportBounds
        },

        /**
         * @function
         * @private
         * @param {Boolean} [immediately=false] - whether the function that triggered this event was
         * called with the "immediately" flag
         */
        _raiseConstraintsEvent: function (immediately) {
          if (this.viewer) {
            /**
             * Raised when the viewport constraints are applied (see {@link OpenSeadragon.Viewport#applyConstraints}).
             *
             * @event constrain
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {Boolean} immediately - whether the function that triggered this event was
             * called with the "immediately" flag
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('constrain', {
              immediately: immediately,
            })
          }
        },

        /**
         * Enforces the minZoom, maxZoom and visibilityRatio constraints by
         * zooming and panning to the closest acceptable zoom and location.
         * @function
         * @param {Boolean} [immediately=false]
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:constrain if constraints were applied
         */
        applyConstraints: function (immediately) {
          var actualZoom = this.getZoom()
          var constrainedZoom = this._applyZoomConstraints(actualZoom)

          if (actualZoom !== constrainedZoom) {
            this.zoomTo(constrainedZoom, this.zoomPoint, immediately)
          }

          var constrainedBounds = this.getConstrainedBounds(false)

          if (constrainedBounds.constraintApplied) {
            this.fitBounds(constrainedBounds, immediately)
            this._raiseConstraintsEvent(immediately)
          }

          return this
        },

        /**
         * Equivalent to {@link OpenSeadragon.Viewport#applyConstraints}
         * @function
         * @param {Boolean} [immediately=false]
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:constrain
         */
        ensureVisible: function (immediately) {
          return this.applyConstraints(immediately)
        },

        /**
         * @function
         * @private
         * @param {OpenSeadragon.Rect} bounds
         * @param {Object} options (immediately=false, constraints=false)
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        _fitBounds: function (bounds, options) {
          options = options || {}
          var immediately = options.immediately || false
          var constraints = options.constraints || false

          var aspect = this.getAspectRatio()
          var center = bounds.getCenter()

          // Compute width and height of bounding box.
          var newBounds = new $.Rect(
            bounds.x,
            bounds.y,
            bounds.width,
            bounds.height,
            bounds.degrees + this.getRotation()
          ).getBoundingBox()

          if (newBounds.getAspectRatio() >= aspect) {
            newBounds.height = newBounds.width / aspect
          } else {
            newBounds.width = newBounds.height * aspect
          }

          // Compute x and y from width, height and center position
          newBounds.x = center.x - newBounds.width / 2
          newBounds.y = center.y - newBounds.height / 2
          var newZoom = 1.0 / newBounds.width

          if (immediately) {
            this.panTo(center, true)
            this.zoomTo(newZoom, null, true)
            if (constraints) {
              this.applyConstraints(true)
            }
            return this
          }

          var currentCenter = this.getCenter(true)
          var currentZoom = this.getZoom(true)
          this.panTo(currentCenter, true)
          this.zoomTo(currentZoom, null, true)

          var oldBounds = this.getBounds()
          var oldZoom = this.getZoom()

          if (oldZoom === 0 || Math.abs(newZoom / oldZoom - 1) < 0.00000001) {
            this.zoomTo(newZoom, null, true)
            this.panTo(center, immediately)
            if (constraints) {
              this.applyConstraints(false)
            }
            return this
          }

          if (constraints) {
            this.panTo(center, false)
            this.zoomTo(newZoom, null, false)

            var constrainedBounds = this.getConstrainedBounds()

            this.panTo(currentCenter, true)
            this.zoomTo(currentZoom, null, true)

            this.fitBounds(constrainedBounds)
          } else {
            var rotatedNewBounds = newBounds.rotate(-this.getRotation())
            var referencePoint = rotatedNewBounds
              .getTopLeft()
              .times(newZoom)
              .minus(oldBounds.getTopLeft().times(oldZoom))
              .divide(newZoom - oldZoom)

            this.zoomTo(newZoom, referencePoint, immediately)
          }
          return this
        },

        /**
         * Makes the viewport zoom and pan so that the specified bounds take
         * as much space as possible in the viewport.
         * Note: this method ignores the constraints (minZoom, maxZoom and
         * visibilityRatio).
         * Use {@link OpenSeadragon.Viewport#fitBoundsWithConstraints} to enforce
         * them.
         * @function
         * @param {OpenSeadragon.Rect} bounds
         * @param {Boolean} [immediately=false]
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        fitBounds: function (bounds, immediately) {
          return this._fitBounds(bounds, {
            immediately: immediately,
            constraints: false,
          })
        },

        /**
         * Makes the viewport zoom and pan so that the specified bounds take
         * as much space as possible in the viewport while enforcing the constraints
         * (minZoom, maxZoom and visibilityRatio).
         * Note: because this method enforces the constraints, part of the
         * provided bounds may end up outside of the viewport.
         * Use {@link OpenSeadragon.Viewport#fitBounds} to ignore them.
         * @function
         * @param {OpenSeadragon.Rect} bounds
         * @param {Boolean} [immediately=false]
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        fitBoundsWithConstraints: function (bounds, immediately) {
          return this._fitBounds(bounds, {
            immediately: immediately,
            constraints: true,
          })
        },

        /**
         * Zooms so the image just fills the viewer vertically.
         * @param {Boolean} immediately
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        fitVertically: function (immediately) {
          var box = new $.Rect(
            this._contentBounds.x + this._contentBounds.width / 2,
            this._contentBounds.y,
            0,
            this._contentBounds.height
          )
          return this.fitBounds(box, immediately)
        },

        /**
         * Zooms so the image just fills the viewer horizontally.
         * @param {Boolean} immediately
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        fitHorizontally: function (immediately) {
          var box = new $.Rect(
            this._contentBounds.x,
            this._contentBounds.y + this._contentBounds.height / 2,
            this._contentBounds.width,
            0
          )
          return this.fitBounds(box, immediately)
        },

        /**
         * Returns bounds taking constraints into account
         * Added to improve constrained panning
         * @param {Boolean} current - Pass true for the current location; defaults to false (target location).
         * @returns {OpenSeadragon.Rect} The bounds in viewport coordinates after applying constraints. The returned $.Rect
         *                               contains additional properties constraintsApplied, xConstrained and yConstrained.
         *                               These flags indicate whether the viewport bounds were modified by the constraints
         *                               of the viewer rectangle, and in which dimension(s).
         */
        getConstrainedBounds: function (current) {
          var bounds, constrainedBounds

          bounds = this.getBounds(current)

          constrainedBounds = this._applyBoundaryConstraints(bounds)

          return constrainedBounds
        },

        /**
         * @function
         * @param {OpenSeadragon.Point} delta
         * @param {Boolean} immediately
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:pan
         */
        panBy: function (delta, immediately) {
          var center = new $.Point(
            this.centerSpringX.target.value,
            this.centerSpringY.target.value
          )
          return this.panTo(center.plus(delta), immediately)
        },

        /**
         * @function
         * @param {OpenSeadragon.Point} center
         * @param {Boolean} immediately
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:pan
         */
        panTo: function (center, immediately) {
          if (immediately) {
            this.centerSpringX.resetTo(center.x)
            this.centerSpringY.resetTo(center.y)
          } else {
            this.centerSpringX.springTo(center.x)
            this.centerSpringY.springTo(center.y)
          }

          if (this.viewer) {
            /**
             * Raised when the viewport is panned (see {@link OpenSeadragon.Viewport#panBy} and {@link OpenSeadragon.Viewport#panTo}).
             *
             * @event pan
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {OpenSeadragon.Point} center
             * @property {Boolean} immediately
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('pan', {
              center: center,
              immediately: immediately,
            })
          }

          return this
        },

        /**
         * @function
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:zoom
         */
        zoomBy: function (factor, refPoint, immediately) {
          return this.zoomTo(
            this.zoomSpring.target.value * factor,
            refPoint,
            immediately
          )
        },

        /**
         * Zooms to the specified zoom level
         * @function
         * @param {Number} zoom The zoom level to zoom to.
         * @param {OpenSeadragon.Point} [refPoint] The point which will stay at
         * the same screen location. Defaults to the viewport center.
         * @param {Boolean} [immediately=false]
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:zoom
         */
        zoomTo: function (zoom, refPoint, immediately) {
          var _this = this

          this.zoomPoint =
            refPoint instanceof $.Point &&
            !isNaN(refPoint.x) &&
            !isNaN(refPoint.y)
              ? refPoint
              : null

          if (immediately) {
            this._adjustCenterSpringsForZoomPoint(function () {
              _this.zoomSpring.resetTo(zoom)
            })
          } else {
            this.zoomSpring.springTo(zoom)
          }

          if (this.viewer) {
            /**
             * Raised when the viewport zoom level changes (see {@link OpenSeadragon.Viewport#zoomBy} and {@link OpenSeadragon.Viewport#zoomTo}).
             *
             * @event zoom
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {Number} zoom
             * @property {OpenSeadragon.Point} refPoint
             * @property {Boolean} immediately
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('zoom', {
              zoom: zoom,
              refPoint: refPoint,
              immediately: immediately,
            })
          }

          return this
        },

        /**
         * Rotates this viewport to the angle specified.
         * @function
         * @param {Number} degrees The degrees to set the rotation to.
         * @param {Boolean} [immediately=false] Whether to animate to the new angle
         * or rotate immediately.
         * * @returns {OpenSeadragon.Viewport} Chainable.
         */
        setRotation: function (degrees, immediately) {
          return this.rotateTo(degrees, null, immediately)
        },

        /**
         * Gets the current rotation in degrees.
         * @function
         * @param {Boolean} [current=false] True for current rotation, false for target.
         * @returns {Number} The current rotation in degrees.
         */
        getRotation: function (current) {
          return current
            ? this.degreesSpring.current.value
            : this.degreesSpring.target.value
        },

        /**
         * Rotates this viewport to the angle specified around a pivot point. Alias for rotateTo.
         * @function
         * @param {Number} degrees The degrees to set the rotation to.
         * @param {OpenSeadragon.Point} [pivot] (Optional) point in viewport coordinates
         * around which the rotation should be performed. Defaults to the center of the viewport.
         * @param {Boolean} [immediately=false] Whether to animate to the new angle
         * or rotate immediately.
         * * @returns {OpenSeadragon.Viewport} Chainable.
         */
        setRotationWithPivot: function (degrees, pivot, immediately) {
          return this.rotateTo(degrees, pivot, immediately)
        },

        /**
         * Rotates this viewport to the angle specified.
         * @function
         * @param {Number} degrees The degrees to set the rotation to.
         * @param {OpenSeadragon.Point} [pivot] (Optional) point in viewport coordinates
         * around which the rotation should be performed. Defaults to the center of the viewport.
         * @param {Boolean} [immediately=false] Whether to animate to the new angle
         * or rotate immediately.
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        rotateTo: function (degrees, pivot, immediately) {
          if (!this.viewer || !this.viewer.drawer.canRotate()) {
            return this
          }

          if (
            this.degreesSpring.target.value === degrees &&
            this.degreesSpring.isAtTargetValue()
          ) {
            return this
          }
          this.rotationPivot =
            pivot instanceof $.Point && !isNaN(pivot.x) && !isNaN(pivot.y)
              ? pivot
              : null
          if (immediately) {
            if (this.rotationPivot) {
              var changeInDegrees = degrees - this._oldDegrees
              if (!changeInDegrees) {
                this.rotationPivot = null
                return this
              }
              this._rotateAboutPivot(degrees)
            } else {
              this.degreesSpring.resetTo(degrees)
            }
          } else {
            var normalizedFrom = $.positiveModulo(
              this.degreesSpring.current.value,
              360
            )
            var normalizedTo = $.positiveModulo(degrees, 360)
            var diff = normalizedTo - normalizedFrom
            if (diff > 180) {
              normalizedTo -= 360
            } else if (diff < -180) {
              normalizedTo += 360
            }

            var reverseDiff = normalizedFrom - normalizedTo
            this.degreesSpring.resetTo(degrees + reverseDiff)
            this.degreesSpring.springTo(degrees)
          }

          this._setContentBounds(
            this.viewer.world.getHomeBounds(),
            this.viewer.world.getContentFactor()
          )
          this.viewer.forceRedraw()

          /**
           * Raised when rotation has been changed.
           *
           * @event rotate
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
           * @property {Number} degrees - The number of degrees the rotation was set to.
           * @property {Boolean} immediately - Whether the rotation happened immediately or was animated
           * @property {OpenSeadragon.Point} pivot - The point in viewport coordinates around which the rotation (if any) happened
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          this.viewer.raiseEvent('rotate', {
            degrees: degrees,
            immediately: !!immediately,
            pivot: this.rotationPivot || this.getCenter(),
          })
          return this
        },

        /**
         * Rotates this viewport by the angle specified.
         * @function
         * @param {Number} degrees The degrees by which to rotate the viewport.
         * @param {OpenSeadragon.Point} [pivot] (Optional) point in viewport coordinates
         * around which the rotation should be performed. Defaults to the center of the viewport.
         * * @param {Boolean} [immediately=false] Whether to animate to the new angle
         * or rotate immediately.
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        rotateBy: function (degrees, pivot, immediately) {
          return this.rotateTo(
            this.degreesSpring.target.value + degrees,
            pivot,
            immediately
          )
        },

        /**
         * @function
         * @returns {OpenSeadragon.Viewport} Chainable.
         * @fires OpenSeadragon.Viewer.event:resize
         */
        resize: function (newContainerSize, maintain) {
          var oldBounds = this.getBoundsNoRotate(),
            newBounds = oldBounds,
            widthDeltaFactor

          this.containerSize.x = newContainerSize.x
          this.containerSize.y = newContainerSize.y

          this._updateContainerInnerSize()

          if (maintain) {
            // TODO: widthDeltaFactor will always be 1; probably not what's intended
            widthDeltaFactor = newContainerSize.x / this.containerSize.x
            newBounds.width = oldBounds.width * widthDeltaFactor
            newBounds.height = newBounds.width / this.getAspectRatio()
          }

          if (this.viewer) {
            /**
             * Raised when the viewer is resized (see {@link OpenSeadragon.Viewport#resize}).
             *
             * @event resize
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised this event.
             * @property {OpenSeadragon.Point} newContainerSize
             * @property {Boolean} maintain
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.viewer.raiseEvent('resize', {
              newContainerSize: newContainerSize,
              maintain: maintain,
            })
          }

          return this.fitBounds(newBounds, true)
        },

        // private
        _updateContainerInnerSize: function () {
          this._containerInnerSize = new $.Point(
            Math.max(
              1,
              this.containerSize.x - (this._margins.left + this._margins.right)
            ),
            Math.max(
              1,
              this.containerSize.y - (this._margins.top + this._margins.bottom)
            )
          )
        },

        /**
         * Update the zoom, degrees, and center (X and Y) springs.
         * @function
         * @returns {Boolean} True if any change has been made, false otherwise.
         */
        update: function () {
          var _this = this
          this._adjustCenterSpringsForZoomPoint(function () {
            _this.zoomSpring.update()
          })
          if (this.degreesSpring.isAtTargetValue()) {
            this.rotationPivot = null
          }
          this.centerSpringX.update()
          this.centerSpringY.update()

          if (this.rotationPivot) {
            this._rotateAboutPivot(true)
          } else {
            this.degreesSpring.update()
          }

          var changed =
            this.centerSpringX.current.value !== this._oldCenterX ||
            this.centerSpringY.current.value !== this._oldCenterY ||
            this.zoomSpring.current.value !== this._oldZoom ||
            this.degreesSpring.current.value !== this._oldDegrees

          this._oldCenterX = this.centerSpringX.current.value
          this._oldCenterY = this.centerSpringY.current.value
          this._oldZoom = this.zoomSpring.current.value
          this._oldDegrees = this.degreesSpring.current.value

          return changed
        },

        // private - pass true to use spring, or a number for degrees for immediate rotation
        _rotateAboutPivot: function (degreesOrUseSpring) {
          var useSpring = degreesOrUseSpring === true

          var delta = this.rotationPivot.minus(this.getCenter())
          this.centerSpringX.shiftBy(delta.x)
          this.centerSpringY.shiftBy(delta.y)

          if (useSpring) {
            this.degreesSpring.update()
          } else {
            this.degreesSpring.resetTo(degreesOrUseSpring)
          }

          var changeInDegrees =
            this.degreesSpring.current.value - this._oldDegrees
          var rdelta = delta.rotate(changeInDegrees * -1).times(-1)
          this.centerSpringX.shiftBy(rdelta.x)
          this.centerSpringY.shiftBy(rdelta.y)
        },

        // private
        _adjustCenterSpringsForZoomPoint: function (zoomSpringHandler) {
          if (this.zoomPoint) {
            var oldZoomPixel = this.pixelFromPoint(this.zoomPoint, true)
            zoomSpringHandler()
            var newZoomPixel = this.pixelFromPoint(this.zoomPoint, true)

            var deltaZoomPixels = newZoomPixel.minus(oldZoomPixel)
            var deltaZoomPoints = this.deltaPointsFromPixels(
              deltaZoomPixels,
              true
            )

            this.centerSpringX.shiftBy(deltaZoomPoints.x)
            this.centerSpringY.shiftBy(deltaZoomPoints.y)

            if (this.zoomSpring.isAtTargetValue()) {
              this.zoomPoint = null
            }
          } else {
            zoomSpringHandler()
          }
        },

        /**
         * Convert a delta (translation vector) from viewport coordinates to pixels
         * coordinates. This method does not take rotation into account.
         * Consider using deltaPixelsFromPoints if you need to account for rotation.
         * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        deltaPixelsFromPointsNoRotate: function (deltaPoints, current) {
          return deltaPoints.times(
            this._containerInnerSize.x * this.getZoom(current)
          )
        },

        /**
         * Convert a delta (translation vector) from viewport coordinates to pixels
         * coordinates.
         * @param {OpenSeadragon.Point} deltaPoints - The translation vector to convert.
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        deltaPixelsFromPoints: function (deltaPoints, current) {
          return this.deltaPixelsFromPointsNoRotate(
            deltaPoints.rotate(this.getRotation(current)),
            current
          )
        },

        /**
         * Convert a delta (translation vector) from pixels coordinates to viewport
         * coordinates. This method does not take rotation into account.
         * Consider using deltaPointsFromPixels if you need to account for rotation.
         * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        deltaPointsFromPixelsNoRotate: function (deltaPixels, current) {
          return deltaPixels.divide(
            this._containerInnerSize.x * this.getZoom(current)
          )
        },

        /**
         * Convert a delta (translation vector) from pixels coordinates to viewport
         * coordinates.
         * @param {OpenSeadragon.Point} deltaPixels - The translation vector to convert.
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        deltaPointsFromPixels: function (deltaPixels, current) {
          return this.deltaPointsFromPixelsNoRotate(
            deltaPixels,
            current
          ).rotate(-this.getRotation(current))
        },

        /**
         * Convert viewport coordinates to pixels coordinates.
         * This method does not take rotation into account.
         * Consider using pixelFromPoint if you need to account for rotation.
         * @param {OpenSeadragon.Point} point the viewport coordinates
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        pixelFromPointNoRotate: function (point, current) {
          return this._pixelFromPointNoRotate(
            point,
            this.getBoundsNoRotate(current)
          )
        },

        /**
         * Convert viewport coordinates to pixel coordinates.
         * @param {OpenSeadragon.Point} point the viewport coordinates
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        pixelFromPoint: function (point, current) {
          return this._pixelFromPoint(point, this.getBoundsNoRotate(current))
        },

        // private
        _pixelFromPointNoRotate: function (point, bounds) {
          return point
            .minus(bounds.getTopLeft())
            .times(this._containerInnerSize.x / bounds.width)
            .plus(new $.Point(this._margins.left, this._margins.top))
        },

        // private
        _pixelFromPoint: function (point, bounds) {
          return this._pixelFromPointNoRotate(
            point.rotate(this.getRotation(true), this.getCenter(true)),
            bounds
          )
        },

        /**
         * Convert pixel coordinates to viewport coordinates.
         * This method does not take rotation into account.
         * Consider using pointFromPixel if you need to account for rotation.
         * @param {OpenSeadragon.Point} pixel Pixel coordinates
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        pointFromPixelNoRotate: function (pixel, current) {
          var bounds = this.getBoundsNoRotate(current)
          return pixel
            .minus(new $.Point(this._margins.left, this._margins.top))
            .divide(this._containerInnerSize.x / bounds.width)
            .plus(bounds.getTopLeft())
        },

        /**
         * Convert pixel coordinates to viewport coordinates.
         * @param {OpenSeadragon.Point} pixel Pixel coordinates
         * @param {Boolean} [current=false] - Pass true for the current location;
         * defaults to false (target location).
         * @returns {OpenSeadragon.Point}
         */
        pointFromPixel: function (pixel, current) {
          return this.pointFromPixelNoRotate(pixel, current).rotate(
            -this.getRotation(current),
            this.getCenter(current)
          )
        },

        // private
        _viewportToImageDelta: function (viewerX, viewerY) {
          var scale = this._contentBoundsNoRotate.width
          return new $.Point(
            (viewerX * this._contentSizeNoRotate.x) / scale,
            (viewerY * this._contentSizeNoRotate.x) / scale
          )
        },

        /**
         * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
         * This method can be called either by passing X,Y coordinates or an
         * OpenSeadragon.Point
         * Note: not accurate with multi-image; use TiledImage.viewportToImageCoordinates instead.
         * @function
         * @param {(OpenSeadragon.Point|Number)} viewerX either a point or the X
         * coordinate in viewport coordinate system.
         * @param {Number} [viewerY] Y coordinate in viewport coordinate system.
         * @returns {OpenSeadragon.Point} a point representing the coordinates in the image.
         */
        viewportToImageCoordinates: function (viewerX, viewerY) {
          if (viewerX instanceof $.Point) {
            //they passed a point instead of individual components
            return this.viewportToImageCoordinates(viewerX.x, viewerX.y)
          }

          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.viewportToImageCoordinates] is not accurate ' +
                    'with multi-image; use TiledImage.viewportToImageCoordinates instead.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.viewportToImageCoordinates
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.viewportToImageCoordinates(viewerX, viewerY, true)
            }
          }

          return this._viewportToImageDelta(
            viewerX - this._contentBoundsNoRotate.x,
            viewerY - this._contentBoundsNoRotate.y
          )
        },

        // private
        _imageToViewportDelta: function (imageX, imageY) {
          var scale = this._contentBoundsNoRotate.width
          return new $.Point(
            (imageX / this._contentSizeNoRotate.x) * scale,
            (imageY / this._contentSizeNoRotate.x) * scale
          )
        },

        /**
         * Translates from image coordinate system to OpenSeadragon viewer coordinate system
         * This method can be called either by passing X,Y coordinates or an
         * OpenSeadragon.Point
         * Note: not accurate with multi-image; use TiledImage.imageToViewportCoordinates instead.
         * @function
         * @param {(OpenSeadragon.Point | Number)} imageX the point or the
         * X coordinate in image coordinate system.
         * @param {Number} [imageY] Y coordinate in image coordinate system.
         * @returns {OpenSeadragon.Point} a point representing the coordinates in the viewport.
         */
        imageToViewportCoordinates: function (imageX, imageY) {
          if (imageX instanceof $.Point) {
            //they passed a point instead of individual components
            return this.imageToViewportCoordinates(imageX.x, imageX.y)
          }

          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.imageToViewportCoordinates] is not accurate ' +
                    'with multi-image; use TiledImage.imageToViewportCoordinates instead.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.viewportToImageCoordinates
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.imageToViewportCoordinates(imageX, imageY, true)
            }
          }

          var point = this._imageToViewportDelta(imageX, imageY)
          point.x += this._contentBoundsNoRotate.x
          point.y += this._contentBoundsNoRotate.y
          return point
        },

        /**
         * Translates from a rectangle which describes a portion of the image in
         * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
         * This method can be called either by passing X,Y,width,height or an
         * OpenSeadragon.Rect
         * Note: not accurate with multi-image; use TiledImage.imageToViewportRectangle instead.
         * @function
         * @param {(OpenSeadragon.Rect | Number)} imageX the rectangle or the X
         * coordinate of the top left corner of the rectangle in image coordinate system.
         * @param {Number} [imageY] the Y coordinate of the top left corner of the rectangle
         * in image coordinate system.
         * @param {Number} [pixelWidth] the width in pixel of the rectangle.
         * @param {Number} [pixelHeight] the height in pixel of the rectangle.
         * @returns {OpenSeadragon.Rect} This image's bounds in viewport coordinates
         */
        imageToViewportRectangle: function (
          imageX,
          imageY,
          pixelWidth,
          pixelHeight
        ) {
          var rect = imageX
          if (!(rect instanceof $.Rect)) {
            //they passed individual components instead of a rectangle
            rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight)
          }

          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.imageToViewportRectangle] is not accurate ' +
                    'with multi-image; use TiledImage.imageToViewportRectangle instead.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.imageToViewportRectangle
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.imageToViewportRectangle(
                imageX,
                imageY,
                pixelWidth,
                pixelHeight,
                true
              )
            }
          }

          var coordA = this.imageToViewportCoordinates(rect.x, rect.y)
          var coordB = this._imageToViewportDelta(rect.width, rect.height)
          return new $.Rect(
            coordA.x,
            coordA.y,
            coordB.x,
            coordB.y,
            rect.degrees
          )
        },

        /**
         * Translates from a rectangle which describes a portion of
         * the viewport in point coordinates to image rectangle coordinates.
         * This method can be called either by passing X,Y,width,height or an
         * OpenSeadragon.Rect
         * Note: not accurate with multi-image; use TiledImage.viewportToImageRectangle instead.
         * @function
         * @param {(OpenSeadragon.Rect | Number)} viewerX either a rectangle or
         * the X coordinate of the top left corner of the rectangle in viewport
         * coordinate system.
         * @param {Number} [viewerY] the Y coordinate of the top left corner of the rectangle
         * in viewport coordinate system.
         * @param {Number} [pointWidth] the width of the rectangle in viewport coordinate system.
         * @param {Number} [pointHeight] the height of the rectangle in viewport coordinate system.
         */
        viewportToImageRectangle: function (
          viewerX,
          viewerY,
          pointWidth,
          pointHeight
        ) {
          var rect = viewerX
          if (!(rect instanceof $.Rect)) {
            //they passed individual components instead of a rectangle
            rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight)
          }

          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.viewportToImageRectangle] is not accurate ' +
                    'with multi-image; use TiledImage.viewportToImageRectangle instead.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.viewportToImageCoordinates
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.viewportToImageRectangle(
                viewerX,
                viewerY,
                pointWidth,
                pointHeight,
                true
              )
            }
          }

          var coordA = this.viewportToImageCoordinates(rect.x, rect.y)
          var coordB = this._viewportToImageDelta(rect.width, rect.height)
          return new $.Rect(
            coordA.x,
            coordA.y,
            coordB.x,
            coordB.y,
            rect.degrees
          )
        },

        /**
         * Convert pixel coordinates relative to the viewer element to image
         * coordinates.
         * Note: not accurate with multi-image.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        viewerElementToImageCoordinates: function (pixel) {
          var point = this.pointFromPixel(pixel, true)
          return this.viewportToImageCoordinates(point)
        },

        /**
         * Convert pixel coordinates relative to the image to
         * viewer element coordinates.
         * Note: not accurate with multi-image.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        imageToViewerElementCoordinates: function (pixel) {
          var point = this.imageToViewportCoordinates(pixel)
          return this.pixelFromPoint(point, true)
        },

        /**
         * Convert pixel coordinates relative to the window to image coordinates.
         * Note: not accurate with multi-image.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        windowToImageCoordinates: function (pixel) {
          $.console.assert(
            this.viewer,
            '[Viewport.windowToImageCoordinates] the viewport must have a viewer.'
          )
          var viewerCoordinates = pixel.minus(
            $.getElementPosition(this.viewer.element)
          )
          return this.viewerElementToImageCoordinates(viewerCoordinates)
        },

        /**
         * Convert image coordinates to pixel coordinates relative to the window.
         * Note: not accurate with multi-image.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        imageToWindowCoordinates: function (pixel) {
          $.console.assert(
            this.viewer,
            '[Viewport.imageToWindowCoordinates] the viewport must have a viewer.'
          )
          var viewerCoordinates = this.imageToViewerElementCoordinates(pixel)
          return viewerCoordinates.plus(
            $.getElementPosition(this.viewer.element)
          )
        },

        /**
         * Convert pixel coordinates relative to the viewer element to viewport
         * coordinates.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        viewerElementToViewportCoordinates: function (pixel) {
          return this.pointFromPixel(pixel, true)
        },

        /**
         * Convert viewport coordinates to pixel coordinates relative to the
         * viewer element.
         * @param {OpenSeadragon.Point} point
         * @returns {OpenSeadragon.Point}
         */
        viewportToViewerElementCoordinates: function (point) {
          return this.pixelFromPoint(point, true)
        },

        /**
         * Convert a rectangle in pixel coordinates relative to the viewer element
         * to viewport coordinates.
         * @param {OpenSeadragon.Rect} rectangle the rectangle to convert
         * @returns {OpenSeadragon.Rect} the converted rectangle
         */
        viewerElementToViewportRectangle: function (rectangle) {
          return $.Rect.fromSummits(
            this.pointFromPixel(rectangle.getTopLeft(), true),
            this.pointFromPixel(rectangle.getTopRight(), true),
            this.pointFromPixel(rectangle.getBottomLeft(), true)
          )
        },

        /**
         * Convert a rectangle in viewport coordinates to pixel coordinates relative
         * to the viewer element.
         * @param {OpenSeadragon.Rect} rectangle the rectangle to convert
         * @returns {OpenSeadragon.Rect} the converted rectangle
         */
        viewportToViewerElementRectangle: function (rectangle) {
          return $.Rect.fromSummits(
            this.pixelFromPoint(rectangle.getTopLeft(), true),
            this.pixelFromPoint(rectangle.getTopRight(), true),
            this.pixelFromPoint(rectangle.getBottomLeft(), true)
          )
        },

        /**
         * Convert pixel coordinates relative to the window to viewport coordinates.
         * @param {OpenSeadragon.Point} pixel
         * @returns {OpenSeadragon.Point}
         */
        windowToViewportCoordinates: function (pixel) {
          $.console.assert(
            this.viewer,
            '[Viewport.windowToViewportCoordinates] the viewport must have a viewer.'
          )
          var viewerCoordinates = pixel.minus(
            $.getElementPosition(this.viewer.element)
          )
          return this.viewerElementToViewportCoordinates(viewerCoordinates)
        },

        /**
         * Convert viewport coordinates to pixel coordinates relative to the window.
         * @param {OpenSeadragon.Point} point
         * @returns {OpenSeadragon.Point}
         */
        viewportToWindowCoordinates: function (point) {
          $.console.assert(
            this.viewer,
            '[Viewport.viewportToWindowCoordinates] the viewport must have a viewer.'
          )
          var viewerCoordinates = this.viewportToViewerElementCoordinates(point)
          return viewerCoordinates.plus(
            $.getElementPosition(this.viewer.element)
          )
        },

        /**
         * Convert a viewport zoom to an image zoom.
         * Image zoom: ratio of the original image size to displayed image size.
         * 1 means original image size, 0.5 half size...
         * Viewport zoom: ratio of the displayed image's width to viewport's width.
         * 1 means identical width, 2 means image's width is twice the viewport's width...
         * Note: not accurate with multi-image.
         * @function
         * @param {Number} viewportZoom The viewport zoom
         * target zoom.
         * @returns {Number} imageZoom The image zoom
         */
        viewportToImageZoom: function (viewportZoom) {
          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.viewportToImageZoom] is not ' +
                    'accurate with multi-image.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.viewportToImageZoom
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.viewportToImageZoom(viewportZoom)
            }
          }

          var imageWidth = this._contentSizeNoRotate.x
          var containerWidth = this._containerInnerSize.x
          var scale = this._contentBoundsNoRotate.width
          var viewportToImageZoomRatio = (containerWidth / imageWidth) * scale
          return viewportZoom * viewportToImageZoomRatio
        },

        /**
         * Convert an image zoom to a viewport zoom.
         * Image zoom: ratio of the original image size to displayed image size.
         * 1 means original image size, 0.5 half size...
         * Viewport zoom: ratio of the displayed image's width to viewport's width.
         * 1 means identical width, 2 means image's width is twice the viewport's width...
         * Note: not accurate with multi-image.
         * @function
         * @param {Number} imageZoom The image zoom
         * target zoom.
         * @returns {Number} viewportZoom The viewport zoom
         */
        imageToViewportZoom: function (imageZoom) {
          if (this.viewer) {
            var count = this.viewer.world.getItemCount()
            if (count > 1) {
              if (!this.silenceMultiImageWarnings) {
                $.console.error(
                  '[Viewport.imageToViewportZoom] is not accurate ' +
                    'with multi-image.'
                )
              }
            } else if (count === 1) {
              // It is better to use TiledImage.imageToViewportZoom
              // because this._contentBoundsNoRotate can not be relied on
              // with clipping.
              var item = this.viewer.world.getItemAt(0)
              return item.imageToViewportZoom(imageZoom)
            }
          }

          var imageWidth = this._contentSizeNoRotate.x
          var containerWidth = this._containerInnerSize.x
          var scale = this._contentBoundsNoRotate.width
          var viewportToImageZoomRatio = imageWidth / containerWidth / scale
          return imageZoom * viewportToImageZoomRatio
        },

        /**
         * Toggles flip state and demands a new drawing on navigator and viewer objects.
         * @function
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        toggleFlip: function () {
          this.setFlip(!this.getFlip())
          return this
        },

        /**
         * Get flip state stored on viewport.
         * @function
         * @returns {Boolean} Flip state.
         */
        getFlip: function () {
          return this.flipped
        },

        /**
         * Sets flip state according to the state input argument.
         * @function
         * @param {Boolean} state - Flip state to set.
         * @returns {OpenSeadragon.Viewport} Chainable.
         */
        setFlip: function (state) {
          if (this.flipped === state) {
            return this
          }

          this.flipped = state
          if (this.viewer.navigator) {
            this.viewer.navigator.setFlip(this.getFlip())
          }
          this.viewer.forceRedraw()

          /**
           * Raised when flip state has been changed.
           *
           * @event flip
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
           * @property {Number} flipped - The flip state after this change.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          this.viewer.raiseEvent('flip', { flipped: state })
          return this
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - TiledImage
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
     * You shouldn't have to create a TiledImage instance directly; get it asynchronously by
     * using {@link OpenSeadragon.Viewer#open} or {@link OpenSeadragon.Viewer#addTiledImage} instead.
     * @class TiledImage
     * @memberof OpenSeadragon
     * @extends OpenSeadragon.EventSource
     * @classdesc Handles rendering of tiles for an {@link OpenSeadragon.Viewer}.
     * A new instance is created for each TileSource opened.
     * @param {Object} options - Configuration for this TiledImage.
     * @param {OpenSeadragon.TileSource} options.source - The TileSource that defines this TiledImage.
     * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this TiledImage.
     * @param {OpenSeadragon.TileCache} options.tileCache - The TileCache for this TiledImage to use.
     * @param {OpenSeadragon.Drawer} options.drawer - The Drawer for this TiledImage to draw onto.
     * @param {OpenSeadragon.ImageLoader} options.imageLoader - The ImageLoader for this TiledImage to use.
     * @param {Number} [options.x=0] - Left position, in viewport coordinates.
     * @param {Number} [options.y=0] - Top position, in viewport coordinates.
     * @param {Number} [options.width=1] - Width, in viewport coordinates.
     * @param {Number} [options.height] - Height, in viewport coordinates.
     * @param {OpenSeadragon.Rect} [options.fitBounds] The bounds in viewport coordinates
     * to fit the image into. If specified, x, y, width and height get ignored.
     * @param {OpenSeadragon.Placement} [options.fitBoundsPlacement=OpenSeadragon.Placement.CENTER]
     * How to anchor the image in the bounds if options.fitBounds is set.
     * @param {OpenSeadragon.Rect} [options.clip] - An area, in image pixels, to clip to
     * (portions of the image outside of this area will not be visible). Only works on
     * browsers that support the HTML5 canvas.
     * @param {Number} [options.springStiffness] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.animationTime] - See {@link OpenSeadragon.Options}.
     * @param {Number} [options.minZoomImageRatio] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.wrapHorizontal] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.wrapVertical] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.immediateRender] - See {@link OpenSeadragon.Options}.
     * @param {Number} [options.blendTime] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.alwaysBlend] - See {@link OpenSeadragon.Options}.
     * @param {Number} [options.minPixelRatio] - See {@link OpenSeadragon.Options}.
     * @param {Number} [options.smoothTileEdgesMinZoom] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.iOSDevice] - See {@link OpenSeadragon.Options}.
     * @param {Number} [options.opacity=1] - Set to draw at proportional opacity. If zero, images will not draw.
     * @param {Boolean} [options.preload=false] - Set true to load even when the image is hidden by zero opacity.
     * @param {String} [options.compositeOperation] - How the image is composited onto other images; see compositeOperation in {@link OpenSeadragon.Options} for possible
     values.
     * @param {Boolean} [options.debugMode] - See {@link OpenSeadragon.Options}.
     * @param {String|CanvasGradient|CanvasPattern|Function} [options.placeholderFillStyle] - See {@link OpenSeadragon.Options}.
     * @param {String|Boolean} [options.crossOriginPolicy] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.ajaxWithCredentials] - See {@link OpenSeadragon.Options}.
     * @param {Boolean} [options.loadTilesWithAjax]
     *      Whether to load tile data using AJAX requests.
     *      Defaults to the setting in {@link OpenSeadragon.Options}.
     * @param {Object} [options.ajaxHeaders={}]
     *      A set of headers to include when making tile AJAX requests.
     */
      $.TiledImage = function (options) {
        var _this = this
        /**
         * The {@link OpenSeadragon.TileSource} that defines this TiledImage.
         * @member {OpenSeadragon.TileSource} source
         * @memberof OpenSeadragon.TiledImage#
         */
        $.console.assert(
          options.tileCache,
          '[TiledImage] options.tileCache is required'
        )
        $.console.assert(
          options.drawer,
          '[TiledImage] options.drawer is required'
        )
        $.console.assert(
          options.viewer,
          '[TiledImage] options.viewer is required'
        )
        $.console.assert(
          options.imageLoader,
          '[TiledImage] options.imageLoader is required'
        )
        $.console.assert(
          options.source,
          '[TiledImage] options.source is required'
        )
        $.console.assert(
          !options.clip || options.clip instanceof $.Rect,
          '[TiledImage] options.clip must be an OpenSeadragon.Rect if present'
        )

        $.EventSource.call(this)

        this._tileCache = options.tileCache
        delete options.tileCache

        this._drawer = options.drawer
        delete options.drawer

        this._imageLoader = options.imageLoader
        delete options.imageLoader

        if (options.clip instanceof $.Rect) {
          this._clip = options.clip.clone()
        }

        delete options.clip

        var x = options.x || 0
        delete options.x
        var y = options.y || 0
        delete options.y

        // Ratio of zoomable image height to width.
        this.normHeight =
          options.source.dimensions.y / options.source.dimensions.x
        this.contentAspectX =
          options.source.dimensions.x / options.source.dimensions.y

        var scale = 1
        if (options.width) {
          scale = options.width
          delete options.width

          if (options.height) {
            $.console.error(
              'specifying both width and height to a tiledImage is not supported'
            )
            delete options.height
          }
        } else if (options.height) {
          scale = options.height / this.normHeight
          delete options.height
        }

        var fitBounds = options.fitBounds
        delete options.fitBounds
        var fitBoundsPlacement =
          options.fitBoundsPlacement || OpenSeadragon.Placement.CENTER
        delete options.fitBoundsPlacement

        var degrees = options.degrees || 0
        delete options.degrees

        $.extend(
          true,
          this,
          {
            //internal state properties
            viewer: null,
            tilesMatrix: {}, // A '3d' dictionary [level][x][y] --> Tile.
            coverage: {}, // A '3d' dictionary [level][x][y] --> Boolean; shows what areas have been drawn.
            loadingCoverage: {}, // A '3d' dictionary [level][x][y] --> Boolean; shows what areas are loaded or are being loaded/blended.
            lastDrawn: [], // An unordered list of Tiles drawn last frame.
            lastResetTime: 0, // Last time for which the tiledImage was reset.
            _midDraw: false, // Is the tiledImage currently updating the viewport?
            _needsDraw: true, // Does the tiledImage need to update the viewport again?
            _hasOpaqueTile: false, // Do we have even one fully opaque tile?
            _tilesLoading: 0, // The number of pending tile requests.
            //configurable settings
            springStiffness: $.DEFAULT_SETTINGS.springStiffness,
            animationTime: $.DEFAULT_SETTINGS.animationTime,
            minZoomImageRatio: $.DEFAULT_SETTINGS.minZoomImageRatio,
            wrapHorizontal: $.DEFAULT_SETTINGS.wrapHorizontal,
            wrapVertical: $.DEFAULT_SETTINGS.wrapVertical,
            immediateRender: $.DEFAULT_SETTINGS.immediateRender,
            blendTime: $.DEFAULT_SETTINGS.blendTime,
            alwaysBlend: $.DEFAULT_SETTINGS.alwaysBlend,
            minPixelRatio: $.DEFAULT_SETTINGS.minPixelRatio,
            smoothTileEdgesMinZoom: $.DEFAULT_SETTINGS.smoothTileEdgesMinZoom,
            iOSDevice: $.DEFAULT_SETTINGS.iOSDevice,
            debugMode: $.DEFAULT_SETTINGS.debugMode,
            crossOriginPolicy: $.DEFAULT_SETTINGS.crossOriginPolicy,
            ajaxWithCredentials: $.DEFAULT_SETTINGS.ajaxWithCredentials,
            placeholderFillStyle: $.DEFAULT_SETTINGS.placeholderFillStyle,
            opacity: $.DEFAULT_SETTINGS.opacity,
            preload: $.DEFAULT_SETTINGS.preload,
            compositeOperation: $.DEFAULT_SETTINGS.compositeOperation,
            subPixelRoundingForTransparency:
              $.DEFAULT_SETTINGS.subPixelRoundingForTransparency,
          },
          options
        )

        this._preload = this.preload
        delete this.preload

        this._fullyLoaded = false

        this._xSpring = new $.Spring({
          initial: x,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this._ySpring = new $.Spring({
          initial: y,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this._scaleSpring = new $.Spring({
          initial: scale,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this._degreesSpring = new $.Spring({
          initial: degrees,
          springStiffness: this.springStiffness,
          animationTime: this.animationTime,
        })

        this._updateForScale()

        if (fitBounds) {
          this.fitBounds(fitBounds, fitBoundsPlacement, true)
        }

        // We need a callback to give image manipulation a chance to happen
        this._drawingHandler = function (args) {
          /**
           * This event is fired just before the tile is drawn giving the application a chance to alter the image.
           *
           * NOTE: This event is only fired when the drawer is using a &lt;canvas&gt;.
           *
           * @event tile-drawing
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
           * @property {OpenSeadragon.Tile} tile - The Tile being drawn.
           * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
           * @property {OpenSeadragon.Tile} context - The HTML canvas context being drawn into.
           * @property {OpenSeadragon.Tile} rendered - The HTML canvas context containing the tile imagery.
           * @property {?Object} userData - Arbitrary subscriber-defined object.
           */
          _this.viewer.raiseEvent(
            'tile-drawing',
            $.extend(
              {
                tiledImage: _this,
              },
              args
            )
          )
        }
      }

      $.extend(
        $.TiledImage.prototype,
        $.EventSource.prototype,
        /** @lends OpenSeadragon.TiledImage.prototype */ {
          /**
           * @returns {Boolean} Whether the TiledImage needs to be drawn.
           */
          needsDraw: function () {
            return this._needsDraw
          },

          /**
           * @returns {Boolean} Whether all tiles necessary for this TiledImage to draw at the current view have been loaded.
           */
          getFullyLoaded: function () {
            return this._fullyLoaded
          },

          // private
          _setFullyLoaded: function (flag) {
            if (flag === this._fullyLoaded) {
              return
            }

            this._fullyLoaded = flag

            /**
             * Fired when the TiledImage's "fully loaded" flag (whether all tiles necessary for this TiledImage
             * to draw at the current view have been loaded) changes.
             *
             * @event fully-loaded-change
             * @memberof OpenSeadragon.TiledImage
             * @type {object}
             * @property {Boolean} fullyLoaded - The new "fully loaded" value.
             * @property {OpenSeadragon.TiledImage} eventSource - A reference to the TiledImage which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('fully-loaded-change', {
              fullyLoaded: this._fullyLoaded,
            })
          },

          /**
           * Clears all tiles and triggers an update on the next call to
           * {@link OpenSeadragon.TiledImage#update}.
           */
          reset: function () {
            this._tileCache.clearTilesFor(this)
            this.lastResetTime = $.now()
            this._needsDraw = true
          },

          /**
           * Updates the TiledImage's bounds, animating if needed.
           * @returns {Boolean} Whether the TiledImage animated.
           */
          update: function () {
            var xUpdated = this._xSpring.update()
            var yUpdated = this._ySpring.update()
            var scaleUpdated = this._scaleSpring.update()
            var degreesUpdated = this._degreesSpring.update()

            if (xUpdated || yUpdated || scaleUpdated || degreesUpdated) {
              this._updateForScale()
              this._needsDraw = true
              return true
            }

            return false
          },

          /**
           * Draws the TiledImage to its Drawer.
           */
          draw: function () {
            if (this.opacity !== 0 || this._preload) {
              this._midDraw = true
              this._updateViewport()
              this._midDraw = false
            }
            // Images with opacity 0 should not need to be drawn in future. this._needsDraw = false is set in this._updateViewport() for other images.
            else {
              this._needsDraw = false
            }
          },

          /**
           * Destroy the TiledImage (unload current loaded tiles).
           */
          destroy: function () {
            this.reset()

            if (this.source.destroy) {
              this.source.destroy()
            }
          },

          /**
           * Get this TiledImage's bounds in viewport coordinates.
           * @param {Boolean} [current=false] - Pass true for the current location;
           * false for target location.
           * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.
           */
          getBounds: function (current) {
            return this.getBoundsNoRotate(current).rotate(
              this.getRotation(current),
              this._getRotationPoint(current)
            )
          },

          /**
           * Get this TiledImage's bounds in viewport coordinates without taking
           * rotation into account.
           * @param {Boolean} [current=false] - Pass true for the current location;
           * false for target location.
           * @returns {OpenSeadragon.Rect} This TiledImage's bounds in viewport coordinates.
           */
          getBoundsNoRotate: function (current) {
            return current
              ? new $.Rect(
                  this._xSpring.current.value,
                  this._ySpring.current.value,
                  this._worldWidthCurrent,
                  this._worldHeightCurrent
                )
              : new $.Rect(
                  this._xSpring.target.value,
                  this._ySpring.target.value,
                  this._worldWidthTarget,
                  this._worldHeightTarget
                )
          },

          // deprecated
          getWorldBounds: function () {
            $.console.error(
              '[TiledImage.getWorldBounds] is deprecated; use TiledImage.getBounds instead'
            )
            return this.getBounds()
          },

          /**
           * Get the bounds of the displayed part of the tiled image.
           * @param {Boolean} [current=false] Pass true for the current location,
           * false for the target location.
           * @returns {$.Rect} The clipped bounds in viewport coordinates.
           */
          getClippedBounds: function (current) {
            var bounds = this.getBoundsNoRotate(current)
            if (this._clip) {
              var worldWidth = current
                ? this._worldWidthCurrent
                : this._worldWidthTarget
              var ratio = worldWidth / this.source.dimensions.x
              var clip = this._clip.times(ratio)
              bounds = new $.Rect(
                bounds.x + clip.x,
                bounds.y + clip.y,
                clip.width,
                clip.height
              )
            }
            return bounds.rotate(
              this.getRotation(current),
              this._getRotationPoint(current)
            )
          },

          /**
           * @function
           * @param {Number} level
           * @param {Number} x
           * @param {Number} y
           * @returns {OpenSeadragon.Rect} Where this tile fits (in normalized coordinates).
           */
          getTileBounds: function (level, x, y) {
            var numTiles = this.source.getNumTiles(level)
            var xMod = (numTiles.x + (x % numTiles.x)) % numTiles.x
            var yMod = (numTiles.y + (y % numTiles.y)) % numTiles.y
            var bounds = this.source.getTileBounds(level, xMod, yMod)
            if (this.getFlip()) {
              bounds.x = 1 - bounds.x - bounds.width
            }
            bounds.x += (x - xMod) / numTiles.x
            bounds.y +=
              (this._worldHeightCurrent / this._worldWidthCurrent) *
              ((y - yMod) / numTiles.y)
            return bounds
          },

          /**
           * @returns {OpenSeadragon.Point} This TiledImage's content size, in original pixels.
           */
          getContentSize: function () {
            return new $.Point(
              this.source.dimensions.x,
              this.source.dimensions.y
            )
          },

          /**
           * @returns {OpenSeadragon.Point} The TiledImage's content size, in window coordinates.
           */
          getSizeInWindowCoordinates: function () {
            var topLeft = this.imageToWindowCoordinates(new $.Point(0, 0))
            var bottomRight = this.imageToWindowCoordinates(
              this.getContentSize()
            )
            return new $.Point(
              bottomRight.x - topLeft.x,
              bottomRight.y - topLeft.y
            )
          },

          // private
          _viewportToImageDelta: function (viewerX, viewerY, current) {
            var scale = current
              ? this._scaleSpring.current.value
              : this._scaleSpring.target.value
            return new $.Point(
              viewerX * (this.source.dimensions.x / scale),
              viewerY *
                ((this.source.dimensions.y * this.contentAspectX) / scale)
            )
          },

          /**
           * Translates from OpenSeadragon viewer coordinate system to image coordinate system.
           * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
           * @param {Number|OpenSeadragon.Point} viewerX - The X coordinate or point in viewport coordinate system.
           * @param {Number} [viewerY] - The Y coordinate in viewport coordinate system.
           * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
           * @returns {OpenSeadragon.Point} A point representing the coordinates in the image.
           */
          viewportToImageCoordinates: function (viewerX, viewerY, current) {
            var point
            if (viewerX instanceof $.Point) {
              //they passed a point instead of individual components
              current = viewerY
              point = viewerX
            } else {
              point = new $.Point(viewerX, viewerY)
            }

            point = point.rotate(
              -this.getRotation(current),
              this._getRotationPoint(current)
            )
            return current
              ? this._viewportToImageDelta(
                  point.x - this._xSpring.current.value,
                  point.y - this._ySpring.current.value
                )
              : this._viewportToImageDelta(
                  point.x - this._xSpring.target.value,
                  point.y - this._ySpring.target.value
                )
          },

          // private
          _imageToViewportDelta: function (imageX, imageY, current) {
            var scale = current
              ? this._scaleSpring.current.value
              : this._scaleSpring.target.value
            return new $.Point(
              (imageX / this.source.dimensions.x) * scale,
              (imageY / this.source.dimensions.y / this.contentAspectX) * scale
            )
          },

          /**
           * Translates from image coordinate system to OpenSeadragon viewer coordinate system
           * This method can be called either by passing X,Y coordinates or an {@link OpenSeadragon.Point}.
           * @param {Number|OpenSeadragon.Point} imageX - The X coordinate or point in image coordinate system.
           * @param {Number} [imageY] - The Y coordinate in image coordinate system.
           * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
           * @returns {OpenSeadragon.Point} A point representing the coordinates in the viewport.
           */
          imageToViewportCoordinates: function (imageX, imageY, current) {
            if (imageX instanceof $.Point) {
              //they passed a point instead of individual components
              current = imageY
              imageY = imageX.y
              imageX = imageX.x
            }

            var point = this._imageToViewportDelta(imageX, imageY)
            if (current) {
              point.x += this._xSpring.current.value
              point.y += this._ySpring.current.value
            } else {
              point.x += this._xSpring.target.value
              point.y += this._ySpring.target.value
            }

            return point.rotate(
              this.getRotation(current),
              this._getRotationPoint(current)
            )
          },

          /**
           * Translates from a rectangle which describes a portion of the image in
           * pixel coordinates to OpenSeadragon viewport rectangle coordinates.
           * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
           * @param {Number|OpenSeadragon.Rect} imageX - The left coordinate or rectangle in image coordinate system.
           * @param {Number} [imageY] - The top coordinate in image coordinate system.
           * @param {Number} [pixelWidth] - The width in pixel of the rectangle.
           * @param {Number} [pixelHeight] - The height in pixel of the rectangle.
           * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
           * @returns {OpenSeadragon.Rect} A rect representing the coordinates in the viewport.
           */
          imageToViewportRectangle: function (
            imageX,
            imageY,
            pixelWidth,
            pixelHeight,
            current
          ) {
            var rect = imageX
            if (rect instanceof $.Rect) {
              //they passed a rect instead of individual components
              current = imageY
            } else {
              rect = new $.Rect(imageX, imageY, pixelWidth, pixelHeight)
            }

            var coordA = this.imageToViewportCoordinates(
              rect.getTopLeft(),
              current
            )
            var coordB = this._imageToViewportDelta(
              rect.width,
              rect.height,
              current
            )

            return new $.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees + this.getRotation(current)
            )
          },

          /**
           * Translates from a rectangle which describes a portion of
           * the viewport in point coordinates to image rectangle coordinates.
           * This method can be called either by passing X,Y,width,height or an {@link OpenSeadragon.Rect}.
           * @param {Number|OpenSeadragon.Rect} viewerX - The left coordinate or rectangle in viewport coordinate system.
           * @param {Number} [viewerY] - The top coordinate in viewport coordinate system.
           * @param {Number} [pointWidth] - The width in viewport coordinate system.
           * @param {Number} [pointHeight] - The height in viewport coordinate system.
           * @param {Boolean} [current=false] - Pass true to use the current location; false for target location.
           * @returns {OpenSeadragon.Rect} A rect representing the coordinates in the image.
           */
          viewportToImageRectangle: function (
            viewerX,
            viewerY,
            pointWidth,
            pointHeight,
            current
          ) {
            var rect = viewerX
            if (viewerX instanceof $.Rect) {
              //they passed a rect instead of individual components
              current = viewerY
            } else {
              rect = new $.Rect(viewerX, viewerY, pointWidth, pointHeight)
            }

            var coordA = this.viewportToImageCoordinates(
              rect.getTopLeft(),
              current
            )
            var coordB = this._viewportToImageDelta(
              rect.width,
              rect.height,
              current
            )

            return new $.Rect(
              coordA.x,
              coordA.y,
              coordB.x,
              coordB.y,
              rect.degrees - this.getRotation(current)
            )
          },

          /**
           * Convert pixel coordinates relative to the viewer element to image
           * coordinates.
           * @param {OpenSeadragon.Point} pixel
           * @returns {OpenSeadragon.Point}
           */
          viewerElementToImageCoordinates: function (pixel) {
            var point = this.viewport.pointFromPixel(pixel, true)
            return this.viewportToImageCoordinates(point)
          },

          /**
           * Convert pixel coordinates relative to the image to
           * viewer element coordinates.
           * @param {OpenSeadragon.Point} pixel
           * @returns {OpenSeadragon.Point}
           */
          imageToViewerElementCoordinates: function (pixel) {
            var point = this.imageToViewportCoordinates(pixel)
            return this.viewport.pixelFromPoint(point, true)
          },

          /**
           * Convert pixel coordinates relative to the window to image coordinates.
           * @param {OpenSeadragon.Point} pixel
           * @returns {OpenSeadragon.Point}
           */
          windowToImageCoordinates: function (pixel) {
            var viewerCoordinates = pixel.minus(
              OpenSeadragon.getElementPosition(this.viewer.element)
            )
            return this.viewerElementToImageCoordinates(viewerCoordinates)
          },

          /**
           * Convert image coordinates to pixel coordinates relative to the window.
           * @param {OpenSeadragon.Point} pixel
           * @returns {OpenSeadragon.Point}
           */
          imageToWindowCoordinates: function (pixel) {
            var viewerCoordinates = this.imageToViewerElementCoordinates(pixel)
            return viewerCoordinates.plus(
              OpenSeadragon.getElementPosition(this.viewer.element)
            )
          },

          // private
          // Convert rectangle in viewport coordinates to this tiled image point
          // coordinates (x in [0, 1] and y in [0, aspectRatio])
          _viewportToTiledImageRectangle: function (rect) {
            var scale = this._scaleSpring.current.value
            rect = rect.rotate(
              -this.getRotation(true),
              this._getRotationPoint(true)
            )
            return new $.Rect(
              (rect.x - this._xSpring.current.value) / scale,
              (rect.y - this._ySpring.current.value) / scale,
              rect.width / scale,
              rect.height / scale,
              rect.degrees
            )
          },

          /**
           * Convert a viewport zoom to an image zoom.
           * Image zoom: ratio of the original image size to displayed image size.
           * 1 means original image size, 0.5 half size...
           * Viewport zoom: ratio of the displayed image's width to viewport's width.
           * 1 means identical width, 2 means image's width is twice the viewport's width...
           * @function
           * @param {Number} viewportZoom The viewport zoom
           * @returns {Number} imageZoom The image zoom
           */
          viewportToImageZoom: function (viewportZoom) {
            var ratio =
              (this._scaleSpring.current.value *
                this.viewport._containerInnerSize.x) /
              this.source.dimensions.x
            return ratio * viewportZoom
          },

          /**
           * Convert an image zoom to a viewport zoom.
           * Image zoom: ratio of the original image size to displayed image size.
           * 1 means original image size, 0.5 half size...
           * Viewport zoom: ratio of the displayed image's width to viewport's width.
           * 1 means identical width, 2 means image's width is twice the viewport's width...
           * Note: not accurate with multi-image.
           * @function
           * @param {Number} imageZoom The image zoom
           * @returns {Number} viewportZoom The viewport zoom
           */
          imageToViewportZoom: function (imageZoom) {
            var ratio =
              (this._scaleSpring.current.value *
                this.viewport._containerInnerSize.x) /
              this.source.dimensions.x
            return imageZoom / ratio
          },

          /**
           * Sets the TiledImage's position in the world.
           * @param {OpenSeadragon.Point} position - The new position, in viewport coordinates.
           * @param {Boolean} [immediately=false] - Whether to animate to the new position or snap immediately.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          setPosition: function (position, immediately) {
            var sameTarget =
              this._xSpring.target.value === position.x &&
              this._ySpring.target.value === position.y

            if (immediately) {
              if (
                sameTarget &&
                this._xSpring.current.value === position.x &&
                this._ySpring.current.value === position.y
              ) {
                return
              }

              this._xSpring.resetTo(position.x)
              this._ySpring.resetTo(position.y)
              this._needsDraw = true
            } else {
              if (sameTarget) {
                return
              }

              this._xSpring.springTo(position.x)
              this._ySpring.springTo(position.y)
              this._needsDraw = true
            }

            if (!sameTarget) {
              this._raiseBoundsChange()
            }
          },

          /**
           * Sets the TiledImage's width in the world, adjusting the height to match based on aspect ratio.
           * @param {Number} width - The new width, in viewport coordinates.
           * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          setWidth: function (width, immediately) {
            this._setScale(width, immediately)
          },

          /**
           * Sets the TiledImage's height in the world, adjusting the width to match based on aspect ratio.
           * @param {Number} height - The new height, in viewport coordinates.
           * @param {Boolean} [immediately=false] - Whether to animate to the new size or snap immediately.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          setHeight: function (height, immediately) {
            this._setScale(height / this.normHeight, immediately)
          },

          /**
           * Sets an array of polygons to crop the TiledImage during draw tiles.
           * The render function will use the default non-zero winding rule.
           * @param {OpenSeadragon.Point[][]} polygons - represented in an array of point object in image coordinates.
           * Example format: [
           *  [{x: 197, y:172}, {x: 226, y:172}, {x: 226, y:198}, {x: 197, y:198}], // First polygon
           *  [{x: 328, y:200}, {x: 330, y:199}, {x: 332, y:201}, {x: 329, y:202}]  // Second polygon
           *  [{x: 321, y:201}, {x: 356, y:205}, {x: 341, y:250}] // Third polygon
           * ]
           */
          setCroppingPolygons: function (polygons) {
            var isXYObject = function (obj) {
              return (
                obj instanceof $.Point ||
                (typeof obj.x === 'number' && typeof obj.y === 'number')
              )
            }

            var objectToSimpleXYObject = function (objs) {
              return objs.map(function (obj) {
                try {
                  if (isXYObject(obj)) {
                    return { x: obj.x, y: obj.y }
                  } else {
                    throw new Error()
                  }
                } catch (e) {
                  throw new Error(
                    'A Provided cropping polygon point is not supported'
                  )
                }
              })
            }

            try {
              if (!$.isArray(polygons)) {
                throw new Error('Provided cropping polygon is not an array')
              }
              this._croppingPolygons = polygons.map(function (polygon) {
                return objectToSimpleXYObject(polygon)
              })
            } catch (e) {
              $.console.error(
                '[TiledImage.setCroppingPolygons] Cropping polygon format not supported'
              )
              $.console.error(e)
              this._croppingPolygons = null
            }
          },

          /**
           * Resets the cropping polygons, thus next render will remove all cropping
           * polygon effects.
           */
          resetCroppingPolygons: function () {
            this._croppingPolygons = null
          },

          /**
           * Positions and scales the TiledImage to fit in the specified bounds.
           * Note: this method fires OpenSeadragon.TiledImage.event:bounds-change
           * twice
           * @param {OpenSeadragon.Rect} bounds The bounds to fit the image into.
           * @param {OpenSeadragon.Placement} [anchor=OpenSeadragon.Placement.CENTER]
           * How to anchor the image in the bounds.
           * @param {Boolean} [immediately=false] Whether to animate to the new size
           * or snap immediately.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          fitBounds: function (bounds, anchor, immediately) {
            anchor = anchor || $.Placement.CENTER
            var anchorProperties = $.Placement.properties[anchor]
            var aspectRatio = this.contentAspectX
            var xOffset = 0
            var yOffset = 0
            var displayedWidthRatio = 1
            var displayedHeightRatio = 1
            if (this._clip) {
              aspectRatio = this._clip.getAspectRatio()
              displayedWidthRatio = this._clip.width / this.source.dimensions.x
              displayedHeightRatio =
                this._clip.height / this.source.dimensions.y
              if (bounds.getAspectRatio() > aspectRatio) {
                xOffset = (this._clip.x / this._clip.height) * bounds.height
                yOffset = (this._clip.y / this._clip.height) * bounds.height
              } else {
                xOffset = (this._clip.x / this._clip.width) * bounds.width
                yOffset = (this._clip.y / this._clip.width) * bounds.width
              }
            }

            if (bounds.getAspectRatio() > aspectRatio) {
              // We will have margins on the X axis
              var height = bounds.height / displayedHeightRatio
              var marginLeft = 0
              if (anchorProperties.isHorizontallyCentered) {
                marginLeft = (bounds.width - bounds.height * aspectRatio) / 2
              } else if (anchorProperties.isRight) {
                marginLeft = bounds.width - bounds.height * aspectRatio
              }
              this.setPosition(
                new $.Point(
                  bounds.x - xOffset + marginLeft,
                  bounds.y - yOffset
                ),
                immediately
              )
              this.setHeight(height, immediately)
            } else {
              // We will have margins on the Y axis
              var width = bounds.width / displayedWidthRatio
              var marginTop = 0
              if (anchorProperties.isVerticallyCentered) {
                marginTop = (bounds.height - bounds.width / aspectRatio) / 2
              } else if (anchorProperties.isBottom) {
                marginTop = bounds.height - bounds.width / aspectRatio
              }
              this.setPosition(
                new $.Point(bounds.x - xOffset, bounds.y - yOffset + marginTop),
                immediately
              )
              this.setWidth(width, immediately)
            }
          },

          /**
           * @returns {OpenSeadragon.Rect|null} The TiledImage's current clip rectangle,
           * in image pixels, or null if none.
           */
          getClip: function () {
            if (this._clip) {
              return this._clip.clone()
            }

            return null
          },

          /**
           * @param {OpenSeadragon.Rect|null} newClip - An area, in image pixels, to clip to
           * (portions of the image outside of this area will not be visible). Only works on
           * browsers that support the HTML5 canvas.
           * @fires OpenSeadragon.TiledImage.event:clip-change
           */
          setClip: function (newClip) {
            $.console.assert(
              !newClip || newClip instanceof $.Rect,
              '[TiledImage.setClip] newClip must be an OpenSeadragon.Rect or null'
            )

            if (newClip instanceof $.Rect) {
              this._clip = newClip.clone()
            } else {
              this._clip = null
            }

            this._needsDraw = true
            /**
             * Raised when the TiledImage's clip is changed.
             * @event clip-change
             * @memberOf OpenSeadragon.TiledImage
             * @type {object}
             * @property {OpenSeadragon.TiledImage} eventSource - A reference to the
             * TiledImage which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('clip-change')
          },

          /**
           * @returns {Boolean} Whether the TiledImage should be flipped before rendering.
           */
          getFlip: function () {
            return !!this.flipped
          },

          /**
           * @param {Boolean} flip Whether the TiledImage should be flipped before rendering.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          setFlip: function (flip) {
            this.flipped = !!flip
            this._needsDraw = true
            this._raiseBoundsChange()
          },

          /**
           * @returns {Number} The TiledImage's current opacity.
           */
          getOpacity: function () {
            return this.opacity
          },

          /**
           * @param {Number} opacity Opacity the tiled image should be drawn at.
           * @fires OpenSeadragon.TiledImage.event:opacity-change
           */
          setOpacity: function (opacity) {
            if (opacity === this.opacity) {
              return
            }

            this.opacity = opacity
            this._needsDraw = true
            /**
             * Raised when the TiledImage's opacity is changed.
             * @event opacity-change
             * @memberOf OpenSeadragon.TiledImage
             * @type {object}
             * @property {Number} opacity - The new opacity value.
             * @property {OpenSeadragon.TiledImage} eventSource - A reference to the
             * TiledImage which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('opacity-change', {
              opacity: this.opacity,
            })
          },

          /**
           * @returns {Boolean} whether the tiledImage can load its tiles even when it has zero opacity.
           */
          getPreload: function () {
            return this._preload
          },

          /**
           * Set true to load even when hidden. Set false to block loading when hidden.
           */
          setPreload: function (preload) {
            this._preload = !!preload
            this._needsDraw = true
          },

          /**
           * Get the rotation of this tiled image in degrees.
           * @param {Boolean} [current=false] True for current rotation, false for target.
           * @returns {Number} the rotation of this tiled image in degrees.
           */
          getRotation: function (current) {
            return current
              ? this._degreesSpring.current.value
              : this._degreesSpring.target.value
          },

          /**
           * Set the current rotation of this tiled image in degrees.
           * @param {Number} degrees the rotation in degrees.
           * @param {Boolean} [immediately=false] Whether to animate to the new angle
           * or rotate immediately.
           * @fires OpenSeadragon.TiledImage.event:bounds-change
           */
          setRotation: function (degrees, immediately) {
            if (
              this._degreesSpring.target.value === degrees &&
              this._degreesSpring.isAtTargetValue()
            ) {
              return
            }
            if (immediately) {
              this._degreesSpring.resetTo(degrees)
            } else {
              this._degreesSpring.springTo(degrees)
            }
            this._needsDraw = true
            this._raiseBoundsChange()
          },

          /**
           * Get the point around which this tiled image is rotated
           * @private
           * @param {Boolean} current True for current rotation point, false for target.
           * @returns {OpenSeadragon.Point}
           */
          _getRotationPoint: function (current) {
            return this.getBoundsNoRotate(current).getCenter()
          },

          /**
           * @returns {String} The TiledImage's current compositeOperation.
           */
          getCompositeOperation: function () {
            return this.compositeOperation
          },

          /**
           * @param {String} compositeOperation the tiled image should be drawn with this globalCompositeOperation.
           * @fires OpenSeadragon.TiledImage.event:composite-operation-change
           */
          setCompositeOperation: function (compositeOperation) {
            if (compositeOperation === this.compositeOperation) {
              return
            }

            this.compositeOperation = compositeOperation
            this._needsDraw = true
            /**
             * Raised when the TiledImage's opacity is changed.
             * @event composite-operation-change
             * @memberOf OpenSeadragon.TiledImage
             * @type {object}
             * @property {String} compositeOperation - The new compositeOperation value.
             * @property {OpenSeadragon.TiledImage} eventSource - A reference to the
             * TiledImage which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('composite-operation-change', {
              compositeOperation: this.compositeOperation,
            })
          },

          // private
          _setScale: function (scale, immediately) {
            var sameTarget = this._scaleSpring.target.value === scale
            if (immediately) {
              if (sameTarget && this._scaleSpring.current.value === scale) {
                return
              }

              this._scaleSpring.resetTo(scale)
              this._updateForScale()
              this._needsDraw = true
            } else {
              if (sameTarget) {
                return
              }

              this._scaleSpring.springTo(scale)
              this._updateForScale()
              this._needsDraw = true
            }

            if (!sameTarget) {
              this._raiseBoundsChange()
            }
          },

          // private
          _updateForScale: function () {
            this._worldWidthTarget = this._scaleSpring.target.value
            this._worldHeightTarget =
              this.normHeight * this._scaleSpring.target.value
            this._worldWidthCurrent = this._scaleSpring.current.value
            this._worldHeightCurrent =
              this.normHeight * this._scaleSpring.current.value
          },

          // private
          _raiseBoundsChange: function () {
            /**
             * Raised when the TiledImage's bounds are changed.
             * Note that this event is triggered only when the animation target is changed;
             * not for every frame of animation.
             * @event bounds-change
             * @memberOf OpenSeadragon.TiledImage
             * @type {object}
             * @property {OpenSeadragon.TiledImage} eventSource - A reference to the
             * TiledImage which raised the event.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('bounds-change')
          },

          // private
          _isBottomItem: function () {
            return this.viewer.world.getItemAt(0) === this
          },

          // private
          _getLevelsInterval: function () {
            var lowestLevel = Math.max(
              this.source.minLevel,
              Math.floor(Math.log(this.minZoomImageRatio) / Math.log(2))
            )
            var currentZeroRatio =
              this.viewport.deltaPixelsFromPointsNoRotate(
                this.source.getPixelRatio(0),
                true
              ).x * this._scaleSpring.current.value
            var highestLevel = Math.min(
              Math.abs(this.source.maxLevel),
              Math.abs(
                Math.floor(
                  Math.log(currentZeroRatio / this.minPixelRatio) / Math.log(2)
                )
              )
            )

            // Calculations for the interval of levels to draw
            // can return invalid intervals; fix that here if necessary
            highestLevel = Math.max(highestLevel, this.source.minLevel || 0)
            lowestLevel = Math.min(lowestLevel, highestLevel)
            return {
              lowestLevel: lowestLevel,
              highestLevel: highestLevel,
            }
          },

          /**
           * @private
           * @inner
           * Pretty much every other line in this needs to be documented so it's clear
           * how each piece of this routine contributes to the drawing process.  That's
           * why there are so many TODO's inside this function.
           */
          _updateViewport: function () {
            this._needsDraw = false
            this._tilesLoading = 0
            this.loadingCoverage = {}

            // Reset tile's internal drawn state
            while (this.lastDrawn.length > 0) {
              var tile = this.lastDrawn.pop()
              tile.beingDrawn = false
            }

            var viewport = this.viewport
            var drawArea = this._viewportToTiledImageRectangle(
              viewport.getBoundsWithMargins(true)
            )

            if (!this.wrapHorizontal && !this.wrapVertical) {
              var tiledImageBounds = this._viewportToTiledImageRectangle(
                this.getClippedBounds(true)
              )
              drawArea = drawArea.intersection(tiledImageBounds)
              if (drawArea === null) {
                return
              }
            }

            var levelsInterval = this._getLevelsInterval()
            var lowestLevel = levelsInterval.lowestLevel
            var highestLevel = levelsInterval.highestLevel
            var bestTile = null
            var haveDrawn = false
            var currentTime = $.now()

            // Update any level that will be drawn
            for (var level = highestLevel; level >= lowestLevel; level--) {
              var drawLevel = false

              //Avoid calculations for draw if we have already drawn this
              var currentRenderPixelRatio =
                viewport.deltaPixelsFromPointsNoRotate(
                  this.source.getPixelRatio(level),
                  true
                ).x * this._scaleSpring.current.value

              if (
                level === lowestLevel ||
                (!haveDrawn && currentRenderPixelRatio >= this.minPixelRatio)
              ) {
                drawLevel = true
                haveDrawn = true
              } else if (!haveDrawn) {
                continue
              }

              //Perform calculations for draw if we haven't drawn this
              var targetRenderPixelRatio =
                viewport.deltaPixelsFromPointsNoRotate(
                  this.source.getPixelRatio(level),
                  false
                ).x * this._scaleSpring.current.value

              var targetZeroRatio =
                viewport.deltaPixelsFromPointsNoRotate(
                  this.source.getPixelRatio(
                    Math.max(this.source.getClosestLevel(), 0)
                  ),
                  false
                ).x * this._scaleSpring.current.value

              var optimalRatio = this.immediateRender ? 1 : targetZeroRatio
              var levelOpacity = Math.min(
                1,
                (currentRenderPixelRatio - 0.5) / 0.5
              )
              var levelVisibility =
                optimalRatio / Math.abs(optimalRatio - targetRenderPixelRatio)

              // Update the level and keep track of 'best' tile to load
              bestTile = this._updateLevel(
                haveDrawn,
                drawLevel,
                level,
                levelOpacity,
                levelVisibility,
                drawArea,
                currentTime,
                bestTile
              )

              // Stop the loop if lower-res tiles would all be covered by
              // already drawn tiles
              if (this._providesCoverage(this.coverage, level)) {
                break
              }
            }

            // Perform the actual drawing
            this._drawTiles(this.lastDrawn)

            // Load the new 'best' tile
            if (bestTile && !bestTile.context2D) {
              this._loadTile(bestTile, currentTime)
              this._needsDraw = true
              this._setFullyLoaded(false)
            } else {
              this._setFullyLoaded(this._tilesLoading === 0)
            }
          },

          // private
          _getCornerTiles: function (level, topLeftBound, bottomRightBound) {
            var leftX
            var rightX
            if (this.wrapHorizontal) {
              leftX = $.positiveModulo(topLeftBound.x, 1)
              rightX = $.positiveModulo(bottomRightBound.x, 1)
            } else {
              leftX = Math.max(0, topLeftBound.x)
              rightX = Math.min(1, bottomRightBound.x)
            }
            var topY
            var bottomY
            var aspectRatio = 1 / this.source.aspectRatio
            if (this.wrapVertical) {
              topY = $.positiveModulo(topLeftBound.y, aspectRatio)
              bottomY = $.positiveModulo(bottomRightBound.y, aspectRatio)
            } else {
              topY = Math.max(0, topLeftBound.y)
              bottomY = Math.min(aspectRatio, bottomRightBound.y)
            }

            var topLeftTile = this.source.getTileAtPoint(
              level,
              new $.Point(leftX, topY)
            )
            var bottomRightTile = this.source.getTileAtPoint(
              level,
              new $.Point(rightX, bottomY)
            )
            var numTiles = this.source.getNumTiles(level)

            if (this.wrapHorizontal) {
              topLeftTile.x += numTiles.x * Math.floor(topLeftBound.x)
              bottomRightTile.x += numTiles.x * Math.floor(bottomRightBound.x)
            }
            if (this.wrapVertical) {
              topLeftTile.y +=
                numTiles.y * Math.floor(topLeftBound.y / aspectRatio)
              bottomRightTile.y +=
                numTiles.y * Math.floor(bottomRightBound.y / aspectRatio)
            }

            return {
              topLeft: topLeftTile,
              bottomRight: bottomRightTile,
            }
          },

          /**
           * Updates all tiles at a given resolution level.
           * @private
           * @param {Boolean} haveDrawn
           * @param {Boolean} drawLevel
           * @param {Number} level
           * @param {Number} levelOpacity
           * @param {Number} levelVisibility
           * @param {OpenSeadragon.Rect} drawArea
           * @param {Number} currentTime
           * @param {OpenSeadragon.Tile} best - The current "best" tile to draw.
           */
          _updateLevel: function (
            haveDrawn,
            drawLevel,
            level,
            levelOpacity,
            levelVisibility,
            drawArea,
            currentTime,
            best
          ) {
            var topLeftBound = drawArea.getBoundingBox().getTopLeft()
            var bottomRightBound = drawArea.getBoundingBox().getBottomRight()

            if (this.viewer) {
              /**
               * <em>- Needs documentation -</em>
               *
               * @event update-level
               * @memberof OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
               * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
               * @property {Object} havedrawn
               * @property {Object} level
               * @property {Object} opacity
               * @property {Object} visibility
               * @property {OpenSeadragon.Rect} drawArea
               * @property {Object} topleft deprecated, use drawArea instead
               * @property {Object} bottomright deprecated, use drawArea instead
               * @property {Object} currenttime
               * @property {Object} best
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.viewer.raiseEvent('update-level', {
                tiledImage: this,
                havedrawn: haveDrawn,
                level: level,
                opacity: levelOpacity,
                visibility: levelVisibility,
                drawArea: drawArea,
                topleft: topLeftBound,
                bottomright: bottomRightBound,
                currenttime: currentTime,
                best: best,
              })
            }

            this._resetCoverage(this.coverage, level)
            this._resetCoverage(this.loadingCoverage, level)

            //OK, a new drawing so do your calculations
            var cornerTiles = this._getCornerTiles(
              level,
              topLeftBound,
              bottomRightBound
            )
            var topLeftTile = cornerTiles.topLeft
            var bottomRightTile = cornerTiles.bottomRight
            var numberOfTiles = this.source.getNumTiles(level)

            var viewportCenter = this.viewport.pixelFromPoint(
              this.viewport.getCenter()
            )

            if (this.getFlip()) {
              // The right-most tile can be narrower than the others. When flipped,
              // this tile is now on the left. Because it is narrower than the normal
              // left-most tile, the subsequent tiles may not be wide enough to completely
              // fill the viewport. Fix this by rendering an extra column of tiles. If we
              // are not wrapping, make sure we never render more than the number of tiles
              // in the image.
              bottomRightTile.x += 1
              if (!this.wrapHorizontal) {
                bottomRightTile.x = Math.min(
                  bottomRightTile.x,
                  numberOfTiles.x - 1
                )
              }
            }

            for (var x = topLeftTile.x; x <= bottomRightTile.x; x++) {
              for (var y = topLeftTile.y; y <= bottomRightTile.y; y++) {
                var flippedX
                if (this.getFlip()) {
                  var xMod =
                    (numberOfTiles.x + (x % numberOfTiles.x)) % numberOfTiles.x
                  flippedX = x + numberOfTiles.x - xMod - xMod - 1
                } else {
                  flippedX = x
                }

                if (
                  drawArea.intersection(
                    this.getTileBounds(level, flippedX, y)
                  ) === null
                ) {
                  // This tile is outside of the viewport, no need to draw it
                  continue
                }

                best = this._updateTile(
                  drawLevel,
                  haveDrawn,
                  flippedX,
                  y,
                  level,
                  levelOpacity,
                  levelVisibility,
                  viewportCenter,
                  numberOfTiles,
                  currentTime,
                  best
                )
              }
            }

            return best
          },

          /**
           * @private
           * @inner
           * Update a single tile at a particular resolution level.
           * @param {Boolean} haveDrawn
           * @param {Boolean} drawLevel
           * @param {Number} x
           * @param {Number} y
           * @param {Number} level
           * @param {Number} levelOpacity
           * @param {Number} levelVisibility
           * @param {OpenSeadragon.Point} viewportCenter
           * @param {Number} numberOfTiles
           * @param {Number} currentTime
           * @param {OpenSeadragon.Tile} best - The current "best" tile to draw.
           */
          _updateTile: function (
            haveDrawn,
            drawLevel,
            x,
            y,
            level,
            levelOpacity,
            levelVisibility,
            viewportCenter,
            numberOfTiles,
            currentTime,
            best
          ) {
            var tile = this._getTile(
                x,
                y,
                level,
                currentTime,
                numberOfTiles,
                this._worldWidthCurrent,
                this._worldHeightCurrent
              ),
              drawTile = drawLevel

            if (this.viewer) {
              /**
               * <em>- Needs documentation -</em>
               *
               * @event update-tile
               * @memberof OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
               * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
               * @property {OpenSeadragon.Tile} tile
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.viewer.raiseEvent('update-tile', {
                tiledImage: this,
                tile: tile,
              })
            }

            this._setCoverage(this.coverage, level, x, y, false)

            var loadingCoverage =
              tile.loaded ||
              tile.loading ||
              this._isCovered(this.loadingCoverage, level, x, y)
            this._setCoverage(
              this.loadingCoverage,
              level,
              x,
              y,
              loadingCoverage
            )

            if (!tile.exists) {
              return best
            }

            if (haveDrawn && !drawTile) {
              if (this._isCovered(this.coverage, level, x, y)) {
                this._setCoverage(this.coverage, level, x, y, true)
              } else {
                drawTile = true
              }
            }

            if (!drawTile) {
              return best
            }

            this._positionTile(
              tile,
              this.source.tileOverlap,
              this.viewport,
              viewportCenter,
              levelVisibility
            )

            if (!tile.loaded) {
              if (tile.context2D) {
                this._setTileLoaded(tile)
              } else {
                var imageRecord = this._tileCache.getImageRecord(tile.cacheKey)
                if (imageRecord) {
                  this._setTileLoaded(tile, imageRecord.getData())
                }
              }
            }

            if (tile.loaded) {
              var needsDraw = this._blendTile(
                tile,
                x,
                y,
                level,
                levelOpacity,
                currentTime
              )

              if (needsDraw) {
                this._needsDraw = true
              }
            } else if (tile.loading) {
              // the tile is already in the download queue
              this._tilesLoading++
            } else if (!loadingCoverage) {
              best = this._compareTiles(best, tile)
            }

            return best
          },

          /**
           * @private
           * @inner
           * Obtains a tile at the given location.
           * @param {Number} x
           * @param {Number} y
           * @param {Number} level
           * @param {Number} time
           * @param {Number} numTiles
           * @param {Number} worldWidth
           * @param {Number} worldHeight
           * @returns {OpenSeadragon.Tile}
           */
          _getTile: function (
            x,
            y,
            level,
            time,
            numTiles,
            worldWidth,
            worldHeight
          ) {
            var xMod,
              yMod,
              bounds,
              sourceBounds,
              exists,
              urlOrGetter,
              post,
              ajaxHeaders,
              context2D,
              tile,
              tilesMatrix = this.tilesMatrix,
              tileSource = this.source

            if (!tilesMatrix[level]) {
              tilesMatrix[level] = {}
            }
            if (!tilesMatrix[level][x]) {
              tilesMatrix[level][x] = {}
            }

            if (
              !tilesMatrix[level][x][y] ||
              !tilesMatrix[level][x][y].flipped !== !this.flipped
            ) {
              xMod = (numTiles.x + (x % numTiles.x)) % numTiles.x
              yMod = (numTiles.y + (y % numTiles.y)) % numTiles.y
              bounds = this.getTileBounds(level, x, y)
              sourceBounds = tileSource.getTileBounds(level, xMod, yMod, true)
              exists = tileSource.tileExists(level, xMod, yMod)
              urlOrGetter = tileSource.getTileUrl(level, xMod, yMod)
              post = tileSource.getTilePostData(level, xMod, yMod)

              // Headers are only applicable if loadTilesWithAjax is set
              if (this.loadTilesWithAjax) {
                ajaxHeaders = tileSource.getTileAjaxHeaders(level, xMod, yMod)
                // Combine tile AJAX headers with tiled image AJAX headers (if applicable)
                if ($.isPlainObject(this.ajaxHeaders)) {
                  ajaxHeaders = $.extend({}, this.ajaxHeaders, ajaxHeaders)
                }
              } else {
                ajaxHeaders = null
              }

              context2D = tileSource.getContext2D
                ? tileSource.getContext2D(level, xMod, yMod)
                : undefined

              tile = new $.Tile(
                level,
                x,
                y,
                bounds,
                exists,
                urlOrGetter,
                context2D,
                this.loadTilesWithAjax,
                ajaxHeaders,
                sourceBounds,
                post,
                tileSource.getTileHashKey(
                  level,
                  xMod,
                  yMod,
                  urlOrGetter,
                  ajaxHeaders,
                  post
                )
              )

              if (this.getFlip()) {
                if (xMod === 0) {
                  tile.isRightMost = true
                }
              } else {
                if (xMod === numTiles.x - 1) {
                  tile.isRightMost = true
                }
              }

              if (yMod === numTiles.y - 1) {
                tile.isBottomMost = true
              }

              tile.flipped = this.flipped

              tilesMatrix[level][x][y] = tile
            }

            tile = tilesMatrix[level][x][y]
            tile.lastTouchTime = time

            return tile
          },

          /**
           * @private
           * @inner
           * Dispatch a job to the ImageLoader to load the Image for a Tile.
           * @param {OpenSeadragon.Tile} tile
           * @param {Number} time
           */
          _loadTile: function (tile, time) {
            var _this = this
            tile.loading = true
            this._imageLoader.addJob({
              src: tile.getUrl(),
              tile: tile,
              source: this.source,
              postData: tile.postData,
              loadWithAjax: tile.loadWithAjax,
              ajaxHeaders: tile.ajaxHeaders,
              crossOriginPolicy: this.crossOriginPolicy,
              ajaxWithCredentials: this.ajaxWithCredentials,
              callback: function (data, errorMsg, tileRequest) {
                _this._onTileLoad(tile, time, data, errorMsg, tileRequest)
              },
              abort: function () {
                tile.loading = false
              },
            })
          },

          /**
           * @private
           * @inner
           * Callback fired when a Tile's Image finished downloading.
           * @param {OpenSeadragon.Tile} tile
           * @param {Number} time
           * @param {*} data image data
           * @param {String} errorMsg
           * @param {XMLHttpRequest} tileRequest
           */
          _onTileLoad: function (tile, time, data, errorMsg, tileRequest) {
            if (!data) {
              $.console.error(
                'Tile %s failed to load: %s - error: %s',
                tile,
                tile.getUrl(),
                errorMsg
              )
              /**
               * Triggered when a tile fails to load.
               *
               * @event tile-load-failed
               * @memberof OpenSeadragon.Viewer
               * @type {object}
               * @property {OpenSeadragon.Tile} tile - The tile that failed to load.
               * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image the tile belongs to.
               * @property {number} time - The time in milliseconds when the tile load began.
               * @property {string} message - The error message.
               * @property {XMLHttpRequest} tileRequest - The XMLHttpRequest used to load the tile if available.
               */
              this.viewer.raiseEvent('tile-load-failed', {
                tile: tile,
                tiledImage: this,
                time: time,
                message: errorMsg,
                tileRequest: tileRequest,
              })
              tile.loading = false
              tile.exists = false
              return
            }

            if (time < this.lastResetTime) {
              $.console.warn(
                'Ignoring tile %s loaded before reset: %s',
                tile,
                tile.getUrl()
              )
              tile.loading = false
              return
            }

            var _this = this,
              finish = function () {
                var ccc = _this.source
                var cutoff = ccc.getClosestLevel()
                _this._setTileLoaded(tile, data, cutoff, tileRequest)
              }

            // Check if we're mid-update; this can happen on IE8 because image load events for
            // cached images happen immediately there
            if (!this._midDraw) {
              finish()
            } else {
              // Wait until after the update, in case caching unloads any tiles
              window.setTimeout(finish, 1)
            }
          },

          /**
           * @private
           * @inner
           * @param {OpenSeadragon.Tile} tile
           * @param {*} data image data, the data sent to ImageJob.prototype.finish(), by default an Image object
           * @param {Number|undefined} cutoff
           * @param {XMLHttpRequest|undefined} tileRequest
           */
          _setTileLoaded: function (tile, data, cutoff, tileRequest) {
            var increment = 0,
              _this = this

            function getCompletionCallback() {
              increment++
              return completionCallback
            }

            function completionCallback() {
              increment--
              if (increment === 0) {
                tile.loading = false
                tile.loaded = true
                tile.hasTransparency = _this.source.hasTransparency(
                  tile.context2D,
                  tile.getUrl(),
                  tile.ajaxHeaders,
                  tile.postData
                )
                if (!tile.context2D) {
                  _this._tileCache.cacheTile({
                    data: data,
                    tile: tile,
                    cutoff: cutoff,
                    tiledImage: _this,
                  })
                }
                _this._needsDraw = true
              }
            }

            /**
             * Triggered when a tile has just been loaded in memory. That means that the
             * image has been downloaded and can be modified before being drawn to the canvas.
             *
             * @event tile-loaded
             * @memberof OpenSeadragon.Viewer
             * @type {object}
             * @property {Image|*} image - The image (data) of the tile. Deprecated.
             * @property {*} data image data, the data sent to ImageJob.prototype.finish(), by default an Image object
             * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the loaded tile.
             * @property {OpenSeadragon.Tile} tile - The tile which has been loaded.
             * @property {XMLHttpRequest} tileRequest - The AJAX request that loaded this tile (if applicable).
             * @property {function} getCompletionCallback - A function giving a callback to call
             * when the asynchronous processing of the image is done. The image will be
             * marked as entirely loaded when the callback has been called once for each
             * call to getCompletionCallback.
             */
            this.viewer.raiseEvent('tile-loaded', {
              tile: tile,
              tiledImage: this,
              tileRequest: tileRequest,
              get image() {
                $.console.error(
                  "[tile-loaded] event 'image' has been deprecated. Use 'data' property instead."
                )
                return data
              },
              data: data,
              getCompletionCallback: getCompletionCallback,
            })
            // In case the completion callback is never called, we at least force it once.
            getCompletionCallback()()
          },

          /**
           * @private
           * @inner
           * @param {OpenSeadragon.Tile} tile
           * @param {Boolean} overlap
           * @param {OpenSeadragon.Viewport} viewport
           * @param {OpenSeadragon.Point} viewportCenter
           * @param {Number} levelVisibility
           */
          _positionTile: function (
            tile,
            overlap,
            viewport,
            viewportCenter,
            levelVisibility
          ) {
            var boundsTL = tile.bounds.getTopLeft()

            boundsTL.x *= this._scaleSpring.current.value
            boundsTL.y *= this._scaleSpring.current.value
            boundsTL.x += this._xSpring.current.value
            boundsTL.y += this._ySpring.current.value

            var boundsSize = tile.bounds.getSize()

            boundsSize.x *= this._scaleSpring.current.value
            boundsSize.y *= this._scaleSpring.current.value

            var positionC = viewport.pixelFromPointNoRotate(boundsTL, true),
              positionT = viewport.pixelFromPointNoRotate(boundsTL, false),
              sizeC = viewport.deltaPixelsFromPointsNoRotate(boundsSize, true),
              sizeT = viewport.deltaPixelsFromPointsNoRotate(boundsSize, false),
              tileCenter = positionT.plus(sizeT.divide(2)),
              tileSquaredDistance = viewportCenter.squaredDistanceTo(tileCenter)

            if (!overlap) {
              sizeC = sizeC.plus(new $.Point(1, 1))
            }

            if (tile.isRightMost && this.wrapHorizontal) {
              sizeC.x += 0.75 // Otherwise Firefox and Safari show seams
            }

            if (tile.isBottomMost && this.wrapVertical) {
              sizeC.y += 0.75 // Otherwise Firefox and Safari show seams
            }

            tile.position = positionC
            tile.size = sizeC
            tile.squaredDistance = tileSquaredDistance
            tile.visibility = levelVisibility
          },

          /**
           * @private
           * @inner
           * Updates the opacity of a tile according to the time it has been on screen
           * to perform a fade-in.
           * Updates coverage once a tile is fully opaque.
           * Returns whether the fade-in has completed.
           *
           * @param {OpenSeadragon.Tile} tile
           * @param {Number} x
           * @param {Number} y
           * @param {Number} level
           * @param {Number} levelOpacity
           * @param {Number} currentTime
           * @returns {Boolean}
           */
          _blendTile: function (tile, x, y, level, levelOpacity, currentTime) {
            var blendTimeMillis = 1000 * this.blendTime,
              deltaTime,
              opacity

            if (!tile.blendStart) {
              tile.blendStart = currentTime
            }

            deltaTime = currentTime - tile.blendStart
            opacity = blendTimeMillis
              ? Math.min(1, deltaTime / blendTimeMillis)
              : 1

            if (this.alwaysBlend) {
              opacity *= levelOpacity
            }

            tile.opacity = opacity

            this.lastDrawn.push(tile)

            if (opacity === 1) {
              this._setCoverage(this.coverage, level, x, y, true)
              this._hasOpaqueTile = true
            } else if (deltaTime < blendTimeMillis) {
              return true
            }

            return false
          },

          /**
           * @private
           * @inner
           * Determines whether the 'last best' tile for the area is better than the
           * tile in question.
           *
           * @param {OpenSeadragon.Tile} previousBest
           * @param {OpenSeadragon.Tile} tile
           * @returns {OpenSeadragon.Tile} The new best tile.
           */
          _compareTiles: function (previousBest, tile) {
            if (!previousBest) {
              return tile
            }

            if (tile.visibility > previousBest.visibility) {
              return tile
            } else if (tile.visibility === previousBest.visibility) {
              if (tile.squaredDistance < previousBest.squaredDistance) {
                return tile
              }
            }
            return previousBest
          },

          /**
           * @private
           * @inner
           * Draws a TiledImage.
           * @param {OpenSeadragon.Tile[]} lastDrawn - An unordered list of Tiles drawn last frame.
           */
          _drawTiles: function (lastDrawn) {
            if (
              this.opacity === 0 ||
              (lastDrawn.length === 0 && !this.placeholderFillStyle)
            ) {
              return
            }

            var tile = lastDrawn[0]
            var useSketch

            if (tile) {
              useSketch =
                this.opacity < 1 ||
                (this.compositeOperation &&
                  this.compositeOperation !== 'source-over') ||
                (!this._isBottomItem() &&
                  this.source.hasTransparency(
                    tile.context2D,
                    tile.getUrl(),
                    tile.ajaxHeaders,
                    tile.postData
                  ))
            }

            var sketchScale
            var sketchTranslate

            var zoom = this.viewport.getZoom(true)
            var imageZoom = this.viewportToImageZoom(zoom)

            if (
              lastDrawn.length > 1 &&
              imageZoom > this.smoothTileEdgesMinZoom &&
              !this.iOSDevice &&
              this.getRotation(true) % 360 === 0 && // TODO: support tile edge smoothing with tiled image rotation.
              $.supportsCanvas &&
              this.viewer.useCanvas
            ) {
              // When zoomed in a lot (>100%) the tile edges are visible.
              // So we have to composite them at ~100% and scale them up together.
              // Note: Disabled on iOS devices per default as it causes a native crash
              useSketch = true
              sketchScale = tile.getScaleForEdgeSmoothing()
              sketchTranslate = tile.getTranslationForEdgeSmoothing(
                sketchScale,
                this._drawer.getCanvasSize(false),
                this._drawer.getCanvasSize(true)
              )
            }

            var bounds
            if (useSketch) {
              if (!sketchScale) {
                // Except when edge smoothing, we only clean the part of the
                // sketch canvas we are going to use for performance reasons.
                bounds = this.viewport
                  .viewportToViewerElementRectangle(this.getClippedBounds(true))
                  .getIntegerBoundingBox()

                if (this._drawer.viewer.viewport.getFlip()) {
                  if (
                    this.viewport.getRotation(true) % 360 !== 0 ||
                    this.getRotation(true) % 360 !== 0
                  ) {
                    bounds.x =
                      this._drawer.viewer.container.clientWidth -
                      (bounds.x + bounds.width)
                  }
                }

                bounds = bounds.times($.pixelDensityRatio)
              }
              this._drawer._clear(true, bounds)
            }

            // When scaling, we must rotate only when blending the sketch canvas to
            // avoid interpolation
            if (!sketchScale) {
              if (this.viewport.getRotation(true) % 360 !== 0) {
                this._drawer._offsetForRotation({
                  degrees: this.viewport.getRotation(true),
                  useSketch: useSketch,
                })
              }
              if (this.getRotation(true) % 360 !== 0) {
                this._drawer._offsetForRotation({
                  degrees: this.getRotation(true),
                  point: this.viewport.pixelFromPointNoRotate(
                    this._getRotationPoint(true),
                    true
                  ),
                  useSketch: useSketch,
                })
              }

              if (
                this.viewport.getRotation(true) % 360 === 0 &&
                this.getRotation(true) % 360 === 0
              ) {
                if (this._drawer.viewer.viewport.getFlip()) {
                  this._drawer._flip()
                }
              }
            }

            var usedClip = false
            if (this._clip) {
              this._drawer.saveContext(useSketch)

              var box = this.imageToViewportRectangle(this._clip, true)
              box = box.rotate(
                -this.getRotation(true),
                this._getRotationPoint(true)
              )
              var clipRect = this._drawer.viewportToDrawerRectangle(box)
              if (sketchScale) {
                clipRect = clipRect.times(sketchScale)
              }
              if (sketchTranslate) {
                clipRect = clipRect.translate(sketchTranslate)
              }
              this._drawer.setClip(clipRect, useSketch)

              usedClip = true
            }

            if (this._croppingPolygons) {
              var self = this
              this._drawer.saveContext(useSketch)
              try {
                var polygons = this._croppingPolygons.map(function (polygon) {
                  return polygon.map(function (coord) {
                    var point = self
                      .imageToViewportCoordinates(coord.x, coord.y, true)
                      .rotate(
                        -self.getRotation(true),
                        self._getRotationPoint(true)
                      )
                    var clipPoint =
                      self._drawer.viewportCoordToDrawerCoord(point)
                    if (sketchScale) {
                      clipPoint = clipPoint.times(sketchScale)
                    }
                    return clipPoint
                  })
                })
                this._drawer.clipWithPolygons(polygons, useSketch)
              } catch (e) {
                $.console.error(e)
              }
              usedClip = true
            }

            if (this.placeholderFillStyle && this._hasOpaqueTile === false) {
              var placeholderRect = this._drawer.viewportToDrawerRectangle(
                this.getBounds(true)
              )
              if (sketchScale) {
                placeholderRect = placeholderRect.times(sketchScale)
              }
              if (sketchTranslate) {
                placeholderRect = placeholderRect.translate(sketchTranslate)
              }

              var fillStyle = null
              if (typeof this.placeholderFillStyle === 'function') {
                fillStyle = this.placeholderFillStyle(
                  this,
                  this._drawer.context
                )
              } else {
                fillStyle = this.placeholderFillStyle
              }

              this._drawer.drawRectangle(placeholderRect, fillStyle, useSketch)
            }

            var subPixelRoundingRule = determineSubPixelRoundingRule(
              this.subPixelRoundingForTransparency
            )

            var shouldRoundPositionAndSize = false

            if (
              subPixelRoundingRule === $.SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS
            ) {
              shouldRoundPositionAndSize = true
            } else if (
              subPixelRoundingRule ===
              $.SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST
            ) {
              var isAnimating = this.viewer && this.viewer.isAnimating()
              shouldRoundPositionAndSize = !isAnimating
            }

            for (var i = lastDrawn.length - 1; i >= 0; i--) {
              tile = lastDrawn[i]
              this._drawer.drawTile(
                tile,
                this._drawingHandler,
                useSketch,
                sketchScale,
                sketchTranslate,
                shouldRoundPositionAndSize,
                this.source
              )
              tile.beingDrawn = true

              if (this.viewer) {
                /**
                 * <em>- Needs documentation -</em>
                 *
                 * @event tile-drawn
                 * @memberof OpenSeadragon.Viewer
                 * @type {object}
                 * @property {OpenSeadragon.Viewer} eventSource - A reference to the Viewer which raised the event.
                 * @property {OpenSeadragon.TiledImage} tiledImage - Which TiledImage is being drawn.
                 * @property {OpenSeadragon.Tile} tile
                 * @property {?Object} userData - Arbitrary subscriber-defined object.
                 */
                this.viewer.raiseEvent('tile-drawn', {
                  tiledImage: this,
                  tile: tile,
                })
              }
            }

            if (usedClip) {
              this._drawer.restoreContext(useSketch)
            }

            if (!sketchScale) {
              if (this.getRotation(true) % 360 !== 0) {
                this._drawer._restoreRotationChanges(useSketch)
              }
              if (this.viewport.getRotation(true) % 360 !== 0) {
                this._drawer._restoreRotationChanges(useSketch)
              }
            }

            if (useSketch) {
              if (sketchScale) {
                if (this.viewport.getRotation(true) % 360 !== 0) {
                  this._drawer._offsetForRotation({
                    degrees: this.viewport.getRotation(true),
                    useSketch: false,
                  })
                }
                if (this.getRotation(true) % 360 !== 0) {
                  this._drawer._offsetForRotation({
                    degrees: this.getRotation(true),
                    point: this.viewport.pixelFromPointNoRotate(
                      this._getRotationPoint(true),
                      true
                    ),
                    useSketch: false,
                  })
                }
              }
              this._drawer.blendSketch({
                opacity: this.opacity,
                scale: sketchScale,
                translate: sketchTranslate,
                compositeOperation: this.compositeOperation,
                bounds: bounds,
              })
              if (sketchScale) {
                if (this.getRotation(true) % 360 !== 0) {
                  this._drawer._restoreRotationChanges(false)
                }
                if (this.viewport.getRotation(true) % 360 !== 0) {
                  this._drawer._restoreRotationChanges(false)
                }
              }
            }

            if (!sketchScale) {
              if (
                this.viewport.getRotation(true) % 360 === 0 &&
                this.getRotation(true) % 360 === 0
              ) {
                if (this._drawer.viewer.viewport.getFlip()) {
                  this._drawer._flip()
                }
              }
            }

            this._drawDebugInfo(lastDrawn)
          },

          /**
           * @private
           * @inner
           * Draws special debug information for a TiledImage if in debug mode.
           * @param {OpenSeadragon.Tile[]} lastDrawn - An unordered list of Tiles drawn last frame.
           */
          _drawDebugInfo: function (lastDrawn) {
            if (this.debugMode) {
              for (var i = lastDrawn.length - 1; i >= 0; i--) {
                var tile = lastDrawn[i]
                try {
                  this._drawer.drawDebugInfo(tile, lastDrawn.length, i, this)
                } catch (e) {
                  $.console.error(e)
                }
              }
            }
          },

          /**
           * @private
           * @inner
           * Returns true if the given tile provides coverage to lower-level tiles of
           * lower resolution representing the same content. If neither x nor y is
           * given, returns true if the entire visible level provides coverage.
           *
           * Note that out-of-bounds tiles provide coverage in this sense, since
           * there's no content that they would need to cover. Tiles at non-existent
           * levels that are within the image bounds, however, do not.
           *
           * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.
           * @param {Number} level - The resolution level of the tile.
           * @param {Number} x - The X position of the tile.
           * @param {Number} y - The Y position of the tile.
           * @returns {Boolean}
           */
          _providesCoverage: function (coverage, level, x, y) {
            var rows, cols, i, j

            if (!coverage[level]) {
              return false
            }

            if (x === undefined || y === undefined) {
              rows = coverage[level]
              for (i in rows) {
                if (Object.prototype.hasOwnProperty.call(rows, i)) {
                  cols = rows[i]
                  for (j in cols) {
                    if (
                      Object.prototype.hasOwnProperty.call(cols, j) &&
                      !cols[j]
                    ) {
                      return false
                    }
                  }
                }
              }

              return true
            }

            return (
              coverage[level][x] === undefined ||
              coverage[level][x][y] === undefined ||
              coverage[level][x][y] === true
            )
          },

          /**
           * @private
           * @inner
           * Returns true if the given tile is completely covered by higher-level
           * tiles of higher resolution representing the same content. If neither x
           * nor y is given, returns true if the entire visible level is covered.
           *
           * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.
           * @param {Number} level - The resolution level of the tile.
           * @param {Number} x - The X position of the tile.
           * @param {Number} y - The Y position of the tile.
           * @returns {Boolean}
           */
          _isCovered: function (coverage, level, x, y) {
            if (x === undefined || y === undefined) {
              return this._providesCoverage(coverage, level + 1)
            } else {
              return (
                this._providesCoverage(coverage, level + 1, 2 * x, 2 * y) &&
                this._providesCoverage(coverage, level + 1, 2 * x, 2 * y + 1) &&
                this._providesCoverage(coverage, level + 1, 2 * x + 1, 2 * y) &&
                this._providesCoverage(
                  coverage,
                  level + 1,
                  2 * x + 1,
                  2 * y + 1
                )
              )
            }
          },

          /**
           * @private
           * @inner
           * Sets whether the given tile provides coverage or not.
           *
           * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.
           * @param {Number} level - The resolution level of the tile.
           * @param {Number} x - The X position of the tile.
           * @param {Number} y - The Y position of the tile.
           * @param {Boolean} covers - Whether the tile provides coverage.
           */
          _setCoverage: function (coverage, level, x, y, covers) {
            if (!coverage[level]) {
              $.console.warn(
                "Setting coverage for a tile before its level's coverage has been reset: %s",
                level
              )
              return
            }

            if (!coverage[level][x]) {
              coverage[level][x] = {}
            }

            coverage[level][x][y] = covers
          },

          /**
           * @private
           * @inner
           * Resets coverage information for the given level. This should be called
           * after every draw routine. Note that at the beginning of the next draw
           * routine, coverage for every visible tile should be explicitly set.
           *
           * @param {Object} coverage - A '3d' dictionary [level][x][y] --> Boolean.
           * @param {Number} level - The resolution level of tiles to completely reset.
           */
          _resetCoverage: function (coverage, level) {
            coverage[level] = {}
          },
        }
      )

      /**
       * @private
       * @inner
       * Defines the value for subpixel rounding to fallback to in case of missing or
       * invalid value.
       */
      var DEFAULT_SUBPIXEL_ROUNDING_RULE = $.SUBPIXEL_ROUNDING_OCCURRENCES.NEVER

      /**
       * @private
       * @inner
       * Checks whether the input value is an invalid subpixel rounding enum value.
       *
       * @param {SUBPIXEL_ROUNDING_OCCURRENCES} value - The subpixel rounding enum value to check.
       * @returns {Boolean} Returns true if the input value is none of the expected
       * {@link SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS}, {@link SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST} or {@link SUBPIXEL_ROUNDING_OCCURRENCES.NEVER} value.
       */
      function isSubPixelRoundingRuleUnknown(value) {
        return (
          value !== $.SUBPIXEL_ROUNDING_OCCURRENCES.ALWAYS &&
          value !== $.SUBPIXEL_ROUNDING_OCCURRENCES.ONLY_AT_REST &&
          value !== $.SUBPIXEL_ROUNDING_OCCURRENCES.NEVER
        )
      }

      /**
       * @private
       * @inner
       * Ensures the returned value is always a valid subpixel rounding enum value,
       * defaulting to {@link SUBPIXEL_ROUNDING_OCCURRENCES.NEVER} if input is missing or invalid.
       *
       * @param {SUBPIXEL_ROUNDING_OCCURRENCES} value - The subpixel rounding enum value to normalize.
       * @returns {SUBPIXEL_ROUNDING_OCCURRENCES} Returns a valid subpixel rounding enum value.
       */
      function normalizeSubPixelRoundingRule(value) {
        if (isSubPixelRoundingRuleUnknown(value)) {
          return DEFAULT_SUBPIXEL_ROUNDING_RULE
        }
        return value
      }

      /**
       * @private
       * @inner
       * Ensures the returned value is always a valid subpixel rounding enum value,
       * defaulting to 'NEVER' if input is missing or invalid.
       *
       * @param {Object} subPixelRoundingRules - A subpixel rounding enum values dictionary [{@link BROWSERS}] --> {@link SUBPIXEL_ROUNDING_OCCURRENCES}.
       * @returns {SUBPIXEL_ROUNDING_OCCURRENCES} Returns the determined subpixel rounding enum value for the
       * current browser.
       */
      function determineSubPixelRoundingRule(subPixelRoundingRules) {
        if (typeof subPixelRoundingRules === 'number') {
          return normalizeSubPixelRoundingRule(subPixelRoundingRules)
        }

        if (!subPixelRoundingRules || !$.Browser) {
          return DEFAULT_SUBPIXEL_ROUNDING_RULE
        }

        var subPixelRoundingRule = subPixelRoundingRules[$.Browser.vendor]

        if (isSubPixelRoundingRuleUnknown(subPixelRoundingRule)) {
          subPixelRoundingRule = subPixelRoundingRules['*']
        }

        return normalizeSubPixelRoundingRule(subPixelRoundingRule)
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - TileCache
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      // private class
      var TileRecord = function (options) {
        $.console.assert(options, '[TileCache.cacheTile] options is required')
        $.console.assert(
          options.tile,
          '[TileCache.cacheTile] options.tile is required'
        )
        $.console.assert(
          options.tiledImage,
          '[TileCache.cacheTile] options.tiledImage is required'
        )
        this.tile = options.tile
        this.tiledImage = options.tiledImage
      }

      // private class
      var ImageRecord = function (options) {
        $.console.assert(options, '[ImageRecord] options is required')
        $.console.assert(options.data, '[ImageRecord] options.data is required')
        this._tiles = []

        options.create.apply(null, [this, options.data, options.ownerTile])
        this._destroyImplementation = options.destroy.bind(null, this)
        this.getImage = options.getImage.bind(null, this)
        this.getData = options.getData.bind(null, this)
        this.getRenderedContext = options.getRenderedContext.bind(null, this)
      }

      ImageRecord.prototype = {
        destroy: function () {
          this._destroyImplementation()
          this._tiles = null
        },

        addTile: function (tile) {
          $.console.assert(tile, '[ImageRecord.addTile] tile is required')
          this._tiles.push(tile)
        },

        removeTile: function (tile) {
          for (var i = 0; i < this._tiles.length; i++) {
            if (this._tiles[i] === tile) {
              this._tiles.splice(i, 1)
              return
            }
          }

          $.console.warn(
            '[ImageRecord.removeTile] trying to remove unknown tile',
            tile
          )
        },

        getTileCount: function () {
          return this._tiles.length
        },
      }

      /**
       * @class TileCache
       * @memberof OpenSeadragon
       * @classdesc Stores all the tiles displayed in a {@link OpenSeadragon.Viewer}.
       * You generally won't have to interact with the TileCache directly.
       * @param {Object} options - Configuration for this TileCache.
       * @param {Number} [options.maxImageCacheCount] - See maxImageCacheCount in
       * {@link OpenSeadragon.Options} for details.
       */
      $.TileCache = function (options) {
        options = options || {}

        this._maxImageCacheCount =
          options.maxImageCacheCount || $.DEFAULT_SETTINGS.maxImageCacheCount
        this._tilesLoaded = []
        this._imagesLoaded = []
        this._imagesLoadedCount = 0
      }

      /** @lends OpenSeadragon.TileCache.prototype */
      $.TileCache.prototype = {
        /**
         * @returns {Number} The total number of tiles that have been loaded by
         * this TileCache.
         */
        numTilesLoaded: function () {
          return this._tilesLoaded.length
        },

        /**
         * Caches the specified tile, removing an old tile if necessary to stay under the
         * maxImageCacheCount specified on construction. Note that if multiple tiles reference
         * the same image, there may be more tiles than maxImageCacheCount; the goal is to keep
         * the number of images below that number. Note, as well, that even the number of images
         * may temporarily surpass that number, but should eventually come back down to the max specified.
         * @param {Object} options - Tile info.
         * @param {OpenSeadragon.Tile} options.tile - The tile to cache.
         * @param {String} options.tile.cacheKey - The unique key used to identify this tile in the cache.
         * @param {Image} options.image - The image of the tile to cache.
         * @param {OpenSeadragon.TiledImage} options.tiledImage - The TiledImage that owns that tile.
         * @param {Number} [options.cutoff=0] - If adding this tile goes over the cache max count, this
         * function will release an old tile. The cutoff option specifies a tile level at or below which
         * tiles will not be released.
         */
        cacheTile: function (options) {
          $.console.assert(options, '[TileCache.cacheTile] options is required')
          $.console.assert(
            options.tile,
            '[TileCache.cacheTile] options.tile is required'
          )
          $.console.assert(
            options.tile.cacheKey,
            '[TileCache.cacheTile] options.tile.cacheKey is required'
          )
          $.console.assert(
            options.tiledImage,
            '[TileCache.cacheTile] options.tiledImage is required'
          )

          var cutoff = options.cutoff || 0
          var insertionIndex = this._tilesLoaded.length

          var imageRecord = this._imagesLoaded[options.tile.cacheKey]
          if (!imageRecord) {
            if (!options.data) {
              $.console.error(
                "[TileCache.cacheTile] options.image was renamed to options.data. '.image' attribute " +
                  'has been deprecated and will be removed in the future.'
              )
              options.data = options.image
            }

            $.console.assert(
              options.data,
              '[TileCache.cacheTile] options.data is required to create an ImageRecord'
            )
            imageRecord = this._imagesLoaded[options.tile.cacheKey] =
              new ImageRecord({
                data: options.data,
                ownerTile: options.tile,
                create: options.tiledImage.source.createTileCache,
                destroy: options.tiledImage.source.destroyTileCache,
                getImage: options.tiledImage.source.getTileCacheDataAsImage,
                getData: options.tiledImage.source.getTileCacheData,
                getRenderedContext:
                  options.tiledImage.source.getTileCacheDataAsContext2D,
              })

            this._imagesLoadedCount++
          }

          imageRecord.addTile(options.tile)
          options.tile.cacheImageRecord = imageRecord

          // Note that just because we're unloading a tile doesn't necessarily mean
          // we're unloading an image. With repeated calls it should sort itself out, though.
          if (this._imagesLoadedCount > this._maxImageCacheCount) {
            var worstTile = null
            var worstTileIndex = -1
            var worstTileRecord = null
            var prevTile,
              worstTime,
              worstLevel,
              prevTime,
              prevLevel,
              prevTileRecord

            for (var i = this._tilesLoaded.length - 1; i >= 0; i--) {
              prevTileRecord = this._tilesLoaded[i]
              prevTile = prevTileRecord.tile

              if (prevTile.level <= cutoff || prevTile.beingDrawn) {
                continue
              } else if (!worstTile) {
                worstTile = prevTile
                worstTileIndex = i
                worstTileRecord = prevTileRecord
                continue
              }

              prevTime = prevTile.lastTouchTime
              worstTime = worstTile.lastTouchTime
              prevLevel = prevTile.level
              worstLevel = worstTile.level

              if (
                prevTime < worstTime ||
                (prevTime === worstTime && prevLevel > worstLevel)
              ) {
                worstTile = prevTile
                worstTileIndex = i
                worstTileRecord = prevTileRecord
              }
            }

            if (worstTile && worstTileIndex >= 0) {
              this._unloadTile(worstTileRecord)
              insertionIndex = worstTileIndex
            }
          }

          this._tilesLoaded[insertionIndex] = new TileRecord({
            tile: options.tile,
            tiledImage: options.tiledImage,
          })
        },

        /**
         * Clears all tiles associated with the specified tiledImage.
         * @param {OpenSeadragon.TiledImage} tiledImage
         */
        clearTilesFor: function (tiledImage) {
          $.console.assert(
            tiledImage,
            '[TileCache.clearTilesFor] tiledImage is required'
          )
          var tileRecord
          for (var i = 0; i < this._tilesLoaded.length; ++i) {
            tileRecord = this._tilesLoaded[i]
            if (tileRecord.tiledImage === tiledImage) {
              this._unloadTile(tileRecord)
              this._tilesLoaded.splice(i, 1)
              i--
            }
          }
        },

        // private
        getImageRecord: function (cacheKey) {
          $.console.assert(
            cacheKey,
            '[TileCache.getImageRecord] cacheKey is required'
          )
          return this._imagesLoaded[cacheKey]
        },

        // private
        _unloadTile: function (tileRecord) {
          $.console.assert(
            tileRecord,
            '[TileCache._unloadTile] tileRecord is required'
          )
          var tile = tileRecord.tile
          var tiledImage = tileRecord.tiledImage

          tile.unload()
          tile.cacheImageRecord = null

          var imageRecord = this._imagesLoaded[tile.cacheKey]
          imageRecord.removeTile(tile)
          if (!imageRecord.getTileCount()) {
            imageRecord.destroy()
            delete this._imagesLoaded[tile.cacheKey]
            this._imagesLoadedCount--
          }

          /**
           * Triggered when a tile has just been unloaded from memory.
           *
           * @event tile-unloaded
           * @memberof OpenSeadragon.Viewer
           * @type {object}
           * @property {OpenSeadragon.TiledImage} tiledImage - The tiled image of the unloaded tile.
           * @property {OpenSeadragon.Tile} tile - The tile which has been unloaded.
           */
          tiledImage.viewer.raiseEvent('tile-unloaded', {
            tile: tile,
            tiledImage: tiledImage,
          })
        },
      }
    })(OpenSeadragon)

    /*
     * OpenSeadragon - World
     *
     * Copyright (C) 2009 CodePlex Foundation
     * Copyright (C) 2010-2022 OpenSeadragon contributors
     *
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     * - Redistributions of source code must retain the above copyright notice,
     *   this list of conditions and the following disclaimer.
     *
     * - Redistributions in binary form must reproduce the above copyright
     *   notice, this list of conditions and the following disclaimer in the
     *   documentation and/or other materials provided with the distribution.
     *
     * - Neither the name of CodePlex Foundation nor the names of its
     *   contributors may be used to endorse or promote products derived from
     *   this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
     * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */
    ;(function ($) {
      /**
       * @class World
       * @memberof OpenSeadragon
       * @extends OpenSeadragon.EventSource
       * @classdesc Keeps track of all of the tiled images in the scene.
       * @param {Object} options - World options.
       * @param {OpenSeadragon.Viewer} options.viewer - The Viewer that owns this World.
       **/
      $.World = function (options) {
        var _this = this

        $.console.assert(options.viewer, '[World] options.viewer is required')

        $.EventSource.call(this)

        this.viewer = options.viewer
        this._items = []
        this._needsDraw = false
        this._autoRefigureSizes = true
        this._needsSizesFigured = false
        this._delegatedFigureSizes = function (event) {
          if (_this._autoRefigureSizes) {
            _this._figureSizes()
          } else {
            _this._needsSizesFigured = true
          }
        }

        this._figureSizes()
      }

      $.extend(
        $.World.prototype,
        $.EventSource.prototype,
        /** @lends OpenSeadragon.World.prototype */ {
          /**
           * Add the specified item.
           * @param {OpenSeadragon.TiledImage} item - The item to add.
           * @param {Number} [options.index] - Index for the item. If not specified, goes at the top.
           * @fires OpenSeadragon.World.event:add-item
           * @fires OpenSeadragon.World.event:metrics-change
           */
          addItem: function (item, options) {
            $.console.assert(item, '[World.addItem] item is required')
            $.console.assert(
              item instanceof $.TiledImage,
              '[World.addItem] only TiledImages supported at this time'
            )

            options = options || {}
            if (options.index !== undefined) {
              var index = Math.max(
                0,
                Math.min(this._items.length, options.index)
              )
              this._items.splice(index, 0, item)
            } else {
              this._items.push(item)
            }

            if (this._autoRefigureSizes) {
              this._figureSizes()
            } else {
              this._needsSizesFigured = true
            }

            this._needsDraw = true

            item.addHandler('bounds-change', this._delegatedFigureSizes)
            item.addHandler('clip-change', this._delegatedFigureSizes)

            /**
             * Raised when an item is added to the World.
             * @event add-item
             * @memberOf OpenSeadragon.World
             * @type {object}
             * @property {OpenSeadragon.Viewer} eventSource - A reference to the World which raised the event.
             * @property {OpenSeadragon.TiledImage} item - The item that has been added.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('add-item', {
              item: item,
            })
          },

          /**
           * Get the item at the specified index.
           * @param {Number} index - The item's index.
           * @returns {OpenSeadragon.TiledImage} The item at the specified index.
           */
          getItemAt: function (index) {
            $.console.assert(
              index !== undefined,
              '[World.getItemAt] index is required'
            )
            return this._items[index]
          },

          /**
           * Get the index of the given item or -1 if not present.
           * @param {OpenSeadragon.TiledImage} item - The item.
           * @returns {Number} The index of the item or -1 if not present.
           */
          getIndexOfItem: function (item) {
            $.console.assert(item, '[World.getIndexOfItem] item is required')
            return $.indexOf(this._items, item)
          },

          /**
           * @returns {Number} The number of items used.
           */
          getItemCount: function () {
            return this._items.length
          },

          /**
           * Change the index of a item so that it appears over or under others.
           * @param {OpenSeadragon.TiledImage} item - The item to move.
           * @param {Number} index - The new index.
           * @fires OpenSeadragon.World.event:item-index-change
           */
          setItemIndex: function (item, index) {
            $.console.assert(item, '[World.setItemIndex] item is required')
            $.console.assert(
              index !== undefined,
              '[World.setItemIndex] index is required'
            )

            var oldIndex = this.getIndexOfItem(item)

            if (index >= this._items.length) {
              throw new Error('Index bigger than number of layers.')
            }

            if (index === oldIndex || oldIndex === -1) {
              return
            }

            this._items.splice(oldIndex, 1)
            this._items.splice(index, 0, item)
            this._needsDraw = true

            /**
             * Raised when the order of the indexes has been changed.
             * @event item-index-change
             * @memberOf OpenSeadragon.World
             * @type {object}
             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
             * @property {OpenSeadragon.TiledImage} item - The item whose index has
             * been changed
             * @property {Number} previousIndex - The previous index of the item
             * @property {Number} newIndex - The new index of the item
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('item-index-change', {
              item: item,
              previousIndex: oldIndex,
              newIndex: index,
            })
          },

          /**
           * Remove an item.
           * @param {OpenSeadragon.TiledImage} item - The item to remove.
           * @fires OpenSeadragon.World.event:remove-item
           * @fires OpenSeadragon.World.event:metrics-change
           */
          removeItem: function (item) {
            $.console.assert(item, '[World.removeItem] item is required')

            var index = $.indexOf(this._items, item)
            if (index === -1) {
              return
            }

            item.removeHandler('bounds-change', this._delegatedFigureSizes)
            item.removeHandler('clip-change', this._delegatedFigureSizes)
            item.destroy()
            this._items.splice(index, 1)
            this._figureSizes()
            this._needsDraw = true
            this._raiseRemoveItem(item)
          },

          /**
           * Remove all items.
           * @fires OpenSeadragon.World.event:remove-item
           * @fires OpenSeadragon.World.event:metrics-change
           */
          removeAll: function () {
            // We need to make sure any pending images are canceled so the world items don't get messed up
            this.viewer._cancelPendingImages()
            var item
            var i
            for (i = 0; i < this._items.length; i++) {
              item = this._items[i]
              item.removeHandler('bounds-change', this._delegatedFigureSizes)
              item.removeHandler('clip-change', this._delegatedFigureSizes)
              item.destroy()
            }

            var removedItems = this._items
            this._items = []
            this._figureSizes()
            this._needsDraw = true

            for (i = 0; i < removedItems.length; i++) {
              item = removedItems[i]
              this._raiseRemoveItem(item)
            }
          },

          /**
           * Clears all tiles and triggers updates for all items.
           */
          resetItems: function () {
            for (var i = 0; i < this._items.length; i++) {
              this._items[i].reset()
            }
          },

          /**
           * Updates (i.e. animates bounds of) all items.
           */
          update: function () {
            var animated = false
            for (var i = 0; i < this._items.length; i++) {
              animated = this._items[i].update() || animated
            }

            return animated
          },

          /**
           * Draws all items.
           */
          draw: function () {
            for (var i = 0; i < this._items.length; i++) {
              this._items[i].draw()
            }

            this._needsDraw = false
          },

          /**
           * @returns {Boolean} true if any items need updating.
           */
          needsDraw: function () {
            for (var i = 0; i < this._items.length; i++) {
              if (this._items[i].needsDraw()) {
                return true
              }
            }
            return this._needsDraw
          },

          /**
           * @returns {OpenSeadragon.Rect} The smallest rectangle that encloses all items, in viewport coordinates.
           */
          getHomeBounds: function () {
            return this._homeBounds.clone()
          },

          /**
           * To facilitate zoom constraints, we keep track of the pixel density of the
           * densest item in the World (i.e. the item whose content size to viewport size
           * ratio is the highest) and save it as this "content factor".
           * @returns {Number} the number of content units per viewport unit.
           */
          getContentFactor: function () {
            return this._contentFactor
          },

          /**
           * As a performance optimization, setting this flag to false allows the bounds-change event handler
           * on tiledImages to skip calculations on the world bounds. If a lot of images are going to be positioned in
           * rapid succession, this is a good idea. When finished, setAutoRefigureSizes should be called with true
           * or the system may behave oddly.
           * @param {Boolean} [value] The value to which to set the flag.
           */
          setAutoRefigureSizes: function (value) {
            this._autoRefigureSizes = value
            if (value & this._needsSizesFigured) {
              this._figureSizes()
              this._needsSizesFigured = false
            }
          },

          /**
           * Arranges all of the TiledImages with the specified settings.
           * @param {Object} options - Specifies how to arrange.
           * @param {Boolean} [options.immediately=false] - Whether to animate to the new arrangement.
           * @param {String} [options.layout] - See collectionLayout in {@link OpenSeadragon.Options}.
           * @param {Number} [options.rows] - See collectionRows in {@link OpenSeadragon.Options}.
           * @param {Number} [options.columns] - See collectionColumns in {@link OpenSeadragon.Options}.
           * @param {Number} [options.tileSize] - See collectionTileSize in {@link OpenSeadragon.Options}.
           * @param {Number} [options.tileMargin] - See collectionTileMargin in {@link OpenSeadragon.Options}.
           * @fires OpenSeadragon.World.event:metrics-change
           */
          arrange: function (options) {
            options = options || {}
            var immediately = options.immediately || false
            var layout = options.layout || $.DEFAULT_SETTINGS.collectionLayout
            var rows = options.rows || $.DEFAULT_SETTINGS.collectionRows
            var columns =
              options.columns || $.DEFAULT_SETTINGS.collectionColumns
            var tileSize =
              options.tileSize || $.DEFAULT_SETTINGS.collectionTileSize
            var tileMargin =
              options.tileMargin || $.DEFAULT_SETTINGS.collectionTileMargin
            var increment = tileSize + tileMargin
            var wrap
            if (!options.rows && columns) {
              wrap = columns
            } else {
              wrap = Math.ceil(this._items.length / rows)
            }
            var x = 0
            var y = 0
            var item, box, width, height, position

            this.setAutoRefigureSizes(false)
            for (var i = 0; i < this._items.length; i++) {
              if (i && i % wrap === 0) {
                if (layout === 'horizontal') {
                  y += increment
                  x = 0
                } else {
                  x += increment
                  y = 0
                }
              }

              item = this._items[i]
              box = item.getBounds()
              if (box.width > box.height) {
                width = tileSize
              } else {
                width = tileSize * (box.width / box.height)
              }

              height = width * (box.height / box.width)
              position = new $.Point(
                x + (tileSize - width) / 2,
                y + (tileSize - height) / 2
              )

              item.setPosition(position, immediately)
              item.setWidth(width, immediately)

              if (layout === 'horizontal') {
                x += increment
              } else {
                y += increment
              }
            }
            this.setAutoRefigureSizes(true)
          },

          // private
          _figureSizes: function () {
            var oldHomeBounds = this._homeBounds
              ? this._homeBounds.clone()
              : null
            var oldContentSize = this._contentSize
              ? this._contentSize.clone()
              : null
            var oldContentFactor = this._contentFactor || 0

            if (!this._items.length) {
              this._homeBounds = new $.Rect(0, 0, 1, 1)
              this._contentSize = new $.Point(1, 1)
              this._contentFactor = 1
            } else {
              var item = this._items[0]
              var bounds = item.getBounds()
              this._contentFactor = item.getContentSize().x / bounds.width
              var clippedBounds = item.getClippedBounds().getBoundingBox()
              var left = clippedBounds.x
              var top = clippedBounds.y
              var right = clippedBounds.x + clippedBounds.width
              var bottom = clippedBounds.y + clippedBounds.height
              for (var i = 1; i < this._items.length; i++) {
                item = this._items[i]
                bounds = item.getBounds()
                this._contentFactor = Math.max(
                  this._contentFactor,
                  item.getContentSize().x / bounds.width
                )
                clippedBounds = item.getClippedBounds().getBoundingBox()
                left = Math.min(left, clippedBounds.x)
                top = Math.min(top, clippedBounds.y)
                right = Math.max(right, clippedBounds.x + clippedBounds.width)
                bottom = Math.max(
                  bottom,
                  clippedBounds.y + clippedBounds.height
                )
              }

              this._homeBounds = new $.Rect(
                left,
                top,
                right - left,
                bottom - top
              )
              this._contentSize = new $.Point(
                this._homeBounds.width * this._contentFactor,
                this._homeBounds.height * this._contentFactor
              )
            }

            if (
              this._contentFactor !== oldContentFactor ||
              !this._homeBounds.equals(oldHomeBounds) ||
              !this._contentSize.equals(oldContentSize)
            ) {
              /**
               * Raised when the home bounds or content factor change.
               * @event metrics-change
               * @memberOf OpenSeadragon.World
               * @type {object}
               * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
               * @property {?Object} userData - Arbitrary subscriber-defined object.
               */
              this.raiseEvent('metrics-change', {})
            }
          },

          // private
          _raiseRemoveItem: function (item) {
            /**
             * Raised when an item is removed.
             * @event remove-item
             * @memberOf OpenSeadragon.World
             * @type {object}
             * @property {OpenSeadragon.World} eventSource - A reference to the World which raised the event.
             * @property {OpenSeadragon.TiledImage} item - The item's underlying item.
             * @property {?Object} userData - Arbitrary subscriber-defined object.
             */
            this.raiseEvent('remove-item', { item: item })
          },
        }
      )
    })(OpenSeadragon)
  })

  /* src/components/FormLine.svelte generated by Svelte v3.58.0 */

  const file$h = 'src/components/FormLine.svelte'

  // (70:4) {:else}
  function create_else_block$4(ctx) {
    let div

    const block = {
      c: function create() {
        div = element('div')
        attr_dev(div, 'class', 'line-label svelte-10bnqne')
        add_location(div, file$h, 70, 6, 1706)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block$4.name,
      type: 'else',
      source: '(70:4) {:else}',
      ctx,
    })

    return block
  }

  // (66:4) {#if label}
  function create_if_block$9(ctx) {
    let label_1
    let t0
    let t1
    let if_block = /*info*/ ctx[3] && create_if_block_1$6(ctx)

    const block = {
      c: function create() {
        label_1 = element('label')
        t0 = text(/*label*/ ctx[1])
        t1 = space()
        if (if_block) if_block.c()
        attr_dev(label_1, 'class', 'label offset line-label svelte-10bnqne')
        attr_dev(label_1, 'for', /*id*/ ctx[0])
        add_location(label_1, file$h, 66, 6, 1538)
      },
      m: function mount(target, anchor) {
        insert_dev(target, label_1, anchor)
        append_dev(label_1, t0)
        append_dev(label_1, t1)
        if (if_block) if_block.m(label_1, null)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*label*/ 2) set_data_dev(t0, /*label*/ ctx[1])

        if (/*info*/ ctx[3]) {
          if (if_block) {
            if_block.p(ctx, dirty)
          } else {
            if_block = create_if_block_1$6(ctx)
            if_block.c()
            if_block.m(label_1, null)
          }
        } else if (if_block) {
          if_block.d(1)
          if_block = null
        }

        if (dirty & /*id*/ 1) {
          attr_dev(label_1, 'for', /*id*/ ctx[0])
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(label_1)
        if (if_block) if_block.d()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$9.name,
      type: 'if',
      source: '(66:4) {#if label}',
      ctx,
    })

    return block
  }

  // (68:8) {#if info}
  function create_if_block_1$6(ctx) {
    let i

    const block = {
      c: function create() {
        i = element('i')
        attr_dev(i, 'class', 'fa fa-question-circle-o svelte-10bnqne')
        attr_dev(i, 'data-title', /*info*/ ctx[3])
        add_location(i, file$h, 67, 18, 1612)
      },
      m: function mount(target, anchor) {
        insert_dev(target, i, anchor)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*info*/ 8) {
          attr_dev(i, 'data-title', /*info*/ ctx[3])
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(i)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$6.name,
      type: 'if',
      source: '(68:8) {#if info}',
      ctx,
    })

    return block
  }

  function create_fragment$i(ctx) {
    let div4
    let div0
    let t
    let div3
    let div2
    let div1
    let current

    function select_block_type(ctx, dirty) {
      if (/*label*/ ctx[1]) return create_if_block$9
      return create_else_block$4
    }

    let current_block_type = select_block_type(ctx)
    let if_block = current_block_type(ctx)
    const default_slot_template = /*#slots*/ ctx[5].default
    const default_slot = create_slot(
      default_slot_template,
      ctx,
      /*$$scope*/ ctx[4],
      null
    )

    const block = {
      c: function create() {
        div4 = element('div')
        div0 = element('div')
        if_block.c()
        t = space()
        div3 = element('div')
        div2 = element('div')
        div1 = element('div')
        if (default_slot) default_slot.c()
        attr_dev(
          div0,
          'class',
          'field-label is-normal label-wrapper svelte-10bnqne'
        )
        add_location(div0, file$h, 64, 2, 1466)
        attr_dev(div1, 'class', 'control')
        add_location(div1, file$h, 75, 6, 1809)
        attr_dev(div2, 'class', 'field')
        add_location(div2, file$h, 74, 4, 1783)
        attr_dev(div3, 'class', 'field-body')
        add_location(div3, file$h, 73, 2, 1754)
        attr_dev(div4, 'class', 'field is-horizontal svelte-10bnqne')
        toggle_class(div4, 'offset', /*offset*/ ctx[2])
        add_location(div4, file$h, 63, 0, 1417)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div4, anchor)
        append_dev(div4, div0)
        if_block.m(div0, null)
        append_dev(div4, t)
        append_dev(div4, div3)
        append_dev(div3, div2)
        append_dev(div2, div1)

        if (default_slot) {
          default_slot.m(div1, null)
        }

        current = true
      },
      p: function update(ctx, [dirty]) {
        if (
          current_block_type ===
            (current_block_type = select_block_type(ctx)) &&
          if_block
        ) {
          if_block.p(ctx, dirty)
        } else {
          if_block.d(1)
          if_block = current_block_type(ctx)

          if (if_block) {
            if_block.c()
            if_block.m(div0, null)
          }
        }

        if (default_slot) {
          if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
            update_slot_base(
              default_slot,
              default_slot_template,
              ctx,
              /*$$scope*/ ctx[4],
              !current
                ? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
                : get_slot_changes(
                    default_slot_template,
                    /*$$scope*/ ctx[4],
                    dirty,
                    null
                  ),
              null
            )
          }
        }

        if (!current || dirty & /*offset*/ 4) {
          toggle_class(div4, 'offset', /*offset*/ ctx[2])
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(default_slot, local)
        current = true
      },
      o: function outro(local) {
        transition_out(default_slot, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div4)
        if_block.d()
        if (default_slot) default_slot.d(detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$i.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$i($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('FormLine', slots, ['default'])
    let { id = '' } = $$props
    let { label = '' } = $$props
    let { offset = false } = $$props
    let { info = '' } = $$props
    const writable_props = ['id', 'label', 'offset', 'info']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<FormLine> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('id' in $$props) $$invalidate(0, (id = $$props.id))
      if ('label' in $$props) $$invalidate(1, (label = $$props.label))
      if ('offset' in $$props) $$invalidate(2, (offset = $$props.offset))
      if ('info' in $$props) $$invalidate(3, (info = $$props.info))
      if ('$$scope' in $$props) $$invalidate(4, ($$scope = $$props.$$scope))
    }

    $$self.$capture_state = () => ({ id, label, offset, info })

    $$self.$inject_state = ($$props) => {
      if ('id' in $$props) $$invalidate(0, (id = $$props.id))
      if ('label' in $$props) $$invalidate(1, (label = $$props.label))
      if ('offset' in $$props) $$invalidate(2, (offset = $$props.offset))
      if ('info' in $$props) $$invalidate(3, (info = $$props.info))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [id, label, offset, info, $$scope, slots]
  }

  class FormLine extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$i, create_fragment$i, safe_not_equal, {
        id: 0,
        label: 1,
        offset: 2,
        info: 3,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'FormLine',
        options,
        id: create_fragment$i.name,
      })
    }

    get id() {
      throw new Error(
        "<FormLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id(value) {
      throw new Error(
        "<FormLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get label() {
      throw new Error(
        "<FormLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set label(value) {
      throw new Error(
        "<FormLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get offset() {
      throw new Error(
        "<FormLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set offset(value) {
      throw new Error(
        "<FormLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get info() {
      throw new Error(
        "<FormLine>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set info(value) {
      throw new Error(
        "<FormLine>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  function cubicOut(t) {
    const f = t - 1.0
    return f * f * f + 1.0
  }
  function expoInOut(t) {
    return t === 0.0 || t === 1.0
      ? t
      : t < 0.5
      ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)
      : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0
  }
  function quintOut(t) {
    return --t * t * t * t * t + 1
  }

  function growAndFade(
    node,
    { delay = 0, duration = 250, easing = expoInOut }
  ) {
    const opacity = +getComputedStyle(node).opacity || 1
    const height = node.offsetHeight

    return {
      delay,
      duration,
      easing,
      css: (t) => `
      opacity: ${t * opacity};
      height: ${t * height}px
    `,
    }
  }

  /* src/components/Message.svelte generated by Svelte v3.58.0 */
  const file$g = 'src/components/Message.svelte'

  function create_fragment$h(ctx) {
    let div
    let em
    let t
    let div_transition
    let current

    const block = {
      c: function create() {
        div = element('div')
        em = element('em')
        t = text(/*text*/ ctx[0])
        attr_dev(em, 'class', 'svelte-mluf79')
        toggle_class(em, 'error', /*error*/ ctx[1])
        add_location(em, file$g, 23, 2, 343)
        add_location(div, file$g, 22, 0, 312)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, em)
        append_dev(em, t)
        current = true
      },
      p: function update(ctx, [dirty]) {
        if (!current || dirty & /*text*/ 1) set_data_dev(t, /*text*/ ctx[0])

        if (!current || dirty & /*error*/ 2) {
          toggle_class(em, 'error', /*error*/ ctx[1])
        }
      },
      i: function intro(local) {
        if (current) return

        add_render_callback(() => {
          if (!current) return
          if (!div_transition)
            div_transition = create_bidirectional_transition(
              div,
              growAndFade,
              {},
              true
            )
          div_transition.run(1)
        })

        current = true
      },
      o: function outro(local) {
        if (!div_transition)
          div_transition = create_bidirectional_transition(
            div,
            growAndFade,
            {},
            false
          )
        div_transition.run(0)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        if (detaching && div_transition) div_transition.end()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$h.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$h($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Message', slots, [])
    let { text = '' } = $$props
    let { error = false } = $$props
    const writable_props = ['text', 'error']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<Message> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('text' in $$props) $$invalidate(0, (text = $$props.text))
      if ('error' in $$props) $$invalidate(1, (error = $$props.error))
    }

    $$self.$capture_state = () => ({ growAndFade, text, error })

    $$self.$inject_state = ($$props) => {
      if ('text' in $$props) $$invalidate(0, (text = $$props.text))
      if ('error' in $$props) $$invalidate(1, (error = $$props.error))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [text, error]
  }

  class Message extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$h, create_fragment$h, safe_not_equal, {
        text: 0,
        error: 1,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Message',
        options,
        id: create_fragment$h.name,
      })
    }

    get text() {
      throw new Error(
        "<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set text(value) {
      throw new Error(
        "<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get error() {
      throw new Error(
        "<Message>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set error(value) {
      throw new Error(
        "<Message>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  var slicedToArray = (function () {
    function sliceIterator(arr, i) {
      var _arr = []
      var _n = true
      var _d = false
      var _e = undefined

      try {
        for (
          var _i = arr[Symbol.iterator](), _s;
          !(_n = (_s = _i.next()).done);
          _n = true
        ) {
          _arr.push(_s.value)

          if (i && _arr.length === i) break
        }
      } catch (err) {
        _d = true
        _e = err
      } finally {
        try {
          if (!_n && _i['return']) _i['return']()
        } finally {
          if (_d) throw _e
        }
      }

      return _arr
    }

    return function (arr, i) {
      if (Array.isArray(arr)) {
        return arr
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i)
      } else {
        throw new TypeError(
          'Invalid attempt to destructure non-iterable instance'
        )
      }
    }
  })()

  var RFC2141_NID_VALID =
    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-'

  function isRfc2141NidString(str, strictMode) {
    if (true === strictMode) {
      if (!isString(str)) return false
      // https://www.ietf.org/rfc/rfc2141.txt Section 2.1
      if (str.length < 1) {
        return false
      }
      if (str.length > 31) {
        return false
      }
      // To avoid confusion with the "urn:" identifier, the NID "urn" is
      // reserved and MUST NOT be used.
      if ('urn' === str.toLowerCase()) {
        return false
      }
    }
    if (null === str) str = ''
    else if (!isString(str)) return false
    if (str[0] === '-') return false
    var _iteratorNormalCompletion = true
    var _didIteratorError = false
    var _iteratorError = undefined

    try {
      for (
        var _iterator = str[Symbol.iterator](), _step;
        !(_iteratorNormalCompletion = (_step = _iterator.next()).done);
        _iteratorNormalCompletion = true
      ) {
        var chr = _step.value

        if (RFC2141_NID_VALID.indexOf(chr) < 0) {
          return false
        }
      }
    } catch (err) {
      _didIteratorError = true
      _iteratorError = err
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return()
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError
        }
      }
    }

    return true
  }

  function isString(str) {
    return typeof str === 'string'
  }

  function isProtocol(protocol, parsed) {
    var value = parsed.protocol
    if (!isString(value)) return false
    return protocol.toLowerCase() === value.toLowerCase()
  }

  function isValid(parsed, propertyName, allowZeroLength) {
    var value = parsed[propertyName]
    return (
      propertyName in parsed &&
      isString(value) &&
      (allowZeroLength || value.length > 0)
    )
  }

  function urnObject(protocol, customRules, allowZeroLength, parsed) {
    var errors = []
    Object.keys(parsed).forEach(function (propertyName, index) {
      if (!isValid(parsed, propertyName, allowZeroLength)) {
        errors.push('validation failed for ' + propertyName + ': invalid value')
      }
    })
    if (!isProtocol(protocol, parsed)) {
      errors.push(
        'validation failed for protocol: expected ' +
          protocol +
          ' but got ' +
          parsed.protocol
      )
    }
    customRules.forEach(function (rule) {
      var _rule = slicedToArray(rule, 3),
        propertyName = _rule[0],
        errorMessage = _rule[1],
        validator = _rule[2]

      try {
        var value = parsed[propertyName]
        if (true !== validator(value)) {
          errors.push(
            'validation failed for ' + propertyName + ': ' + errorMessage
          )
        }
      } catch (err) {
        errors.push('validation error for ' + propertyName + ': ' + err.message)
      }
    })
    return errors.length ? errors : null
  }

  var format$1 = function (protocol, components, separator, parsed) {
    protocol = parsed && 'protocol' in parsed ? parsed.protocol : protocol
    if (!isString(protocol)) throw new Error('protocol is missing or invalid')
    return (
      protocol +
      separator +
      components
        .map(function (name) {
          return !isString(parsed[name]) ? '' : parsed[name]
        })
        .join(separator)
    )
  }

  var tokenize = function (components, separator, str) {
    if (!Array.isArray(components) || components.length < 1)
      throw new Error('components not valid')
    if (!isString(str)) return null
    var parts = str.split(separator)
    if (parts.length < 2) return null
    var protocol = parts.shift() // all schemes have a protocol
    var parsed = { protocol: protocol }
    var len = components.length - 1 // last component treated differently
    for (var i = 0; i < len; i++) {
      var name = components[i]
      parsed[name] = parts.length ? parts.shift() : null
    }
    // concat last component.  anything beyond what's defined in components
    // is a single string that belongs to last part
    var lastPartName = components[len]
    parsed[lastPartName] = parts.length ? parts.join(separator) : null
    return parsed
  }

  var PREFIX = 'urn'
  var SEPARATOR = ':'

  var COMPONENTS = ['nid', 'nss']

  // generates an array of rules that treats all but the last component
  // as an nid string (with limited valid charset)
  function generateDefaultValidationRules(components) {
    var lastIndex = components.length - 1
    var rules = []
    for (var i = 0; i < lastIndex; i++) {
      var name = components[i]
      rules.push([
        name,
        'invalid characters',
        function (value) {
          return isRfc2141NidString(value, false)
        },
      ])
    }
    return rules
  }

  function build(protocol, components, data) {
    data = data || {}
    var built = { protocol: protocol }
    components.forEach(function (name) {
      return (built[name] = data[name] || null)
    })
    return built
  }

  function create(protocol, options) {
    options = options || {}
    var components = options.components || COMPONENTS
    var allowEmpty = 'allowEmpty' in options ? options.allowEmpty : false
    var separator = options.separator || SEPARATOR
    var validationRules =
      options.validationRules || generateDefaultValidationRules(components)
    return {
      validate: urnObject.bind(null, protocol, validationRules, allowEmpty),
      format: format$1.bind(null, protocol, components, separator),
      parse: tokenize.bind(null, components, separator),
      build: build.bind(null, protocol, components),
    }
  }

  var RFC2141 = create(PREFIX, {
    components: COMPONENTS,
    separator: SEPARATOR,
    allowEmpty: false,
  })

  var urnLib_es2015 = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    generateDefaultValidationRules: generateDefaultValidationRules,
    create: create,
    RFC2141: RFC2141,
  })

  const citeNid = 'cite2'
  const citeUrn = urnLib_es2015.create('urn', {
    components: ['nid', 'namespace', 'work', 'passage'],
  })

  function validateUrn(urn, opts = {}) {
    const noPassage = opts.noPassage || false
    const components = citeUrn.parse(urn)
    const nid = opts.nid || citeNid

    return (
      !!components &&
      components.nid === nid &&
      !!components.namespace &&
      !!components.work &&
      ((noPassage && !components.passage) ||
        (!noPassage && !!components.passage))
    )
  }
  // replace last part urn to another schema value
  // urn:cts:sktlit:skt0001.nyaya002.M3D:3.1.1 3.1.2 -> urn:cts:sktlit:skt0001.nyaya002.M3D:3.1.2
  function replaceLastPart(str, replacement) {
    var lastIndex = str.lastIndexOf(':')
    return str.slice(0, lastIndex + 1) + replacement
  }

  function validateNoColon(str) {
    // Checks if the string contains a colon
    if (str.includes(':')) {
      // If it does, return false
      return false
    } else {
      // If it doesn't, return true
      return true
    }
  }

  var ctsUrn = { validateUrn, replaceLastPart, validateNoColon }
  var ctsUrn_1 = ctsUrn.validateUrn
  var ctsUrn_3 = ctsUrn.validateNoColon

  function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
    const o = +getComputedStyle(node).opacity
    return {
      delay,
      duration,
      easing,
      css: (t) => `opacity: ${t * o}`,
    }
  }
  function fly(
    node,
    {
      delay = 0,
      duration = 400,
      easing = cubicOut,
      x = 0,
      y = 0,
      opacity = 0,
    } = {}
  ) {
    const style = getComputedStyle(node)
    const target_opacity = +style.opacity
    const transform = style.transform === 'none' ? '' : style.transform
    const od = target_opacity * (1 - opacity)
    const [xValue, xUnit] = split_css_unit(x)
    const [yValue, yUnit] = split_css_unit(y)
    return {
      delay,
      duration,
      easing,
      css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${
        (1 - t) * yValue
      }${yUnit});
			opacity: ${target_opacity - od * u}`,
    }
  }

  /* src/components/TextAheadOverlay.svelte generated by Svelte v3.58.0 */
  const file$f = 'src/components/TextAheadOverlay.svelte'

  function get_each_context$5(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[8] = list[i]
    child_ctx[10] = i
    return child_ctx
  }

  // (60:4) {#each items as item, i}
  function create_each_block$5(ctx) {
    let div
    let html_tag
    let raw_value = /*item*/ ctx[8].label + ''
    let t
    let mounted
    let dispose

    function click_handler() {
      return /*click_handler*/ ctx[4](/*i*/ ctx[10])
    }

    function keydown_handler(...args) {
      return /*keydown_handler*/ ctx[5](/*i*/ ctx[10], ...args)
    }

    function mousemove_handler() {
      return /*mousemove_handler*/ ctx[6](/*i*/ ctx[10])
    }

    const block = {
      c: function create() {
        div = element('div')
        html_tag = new HtmlTag(false)
        t = space()
        html_tag.a = t
        attr_dev(div, 'class', 'item svelte-14ba8g3')
        toggle_class(
          div,
          'selected',
          /*i*/ ctx[10] === /*selectedIndex*/ ctx[1]
        )
        add_location(div, file$f, 60, 6, 1200)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        html_tag.m(raw_value, div)
        append_dev(div, t)

        if (!mounted) {
          dispose = [
            listen_dev(div, 'click', click_handler, false, false, false, false),
            listen_dev(
              div,
              'keydown',
              keydown_handler,
              false,
              false,
              false,
              false
            ),
            listen_dev(
              div,
              'mousemove',
              mousemove_handler,
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        if (
          dirty & /*items*/ 1 &&
          raw_value !== (raw_value = /*item*/ ctx[8].label + '')
        )
          html_tag.p(raw_value)

        if (dirty & /*selectedIndex*/ 2) {
          toggle_class(
            div,
            'selected',
            /*i*/ ctx[10] === /*selectedIndex*/ ctx[1]
          )
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block$5.name,
      type: 'each',
      source: '(60:4) {#each items as item, i}',
      ctx,
    })

    return block
  }

  function create_fragment$g(ctx) {
    let div1
    let div0
    let div0_intro
    let div0_outro
    let current
    let each_value = /*items*/ ctx[0]
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$5(
        get_each_context$5(ctx, each_value, i)
      )
    }

    const block = {
      c: function create() {
        div1 = element('div')
        div0 = element('div')

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        attr_dev(div0, 'class', 'box search svelte-14ba8g3')
        add_location(div0, file$f, 55, 2, 993)
        attr_dev(div1, 'class', 'search-container svelte-14ba8g3')
        add_location(div1, file$f, 54, 0, 960)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor)
        append_dev(div1, div0)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div0, null)
          }
        }

        current = true
      },
      p: function update(new_ctx, [dirty]) {
        ctx = new_ctx

        if (
          dirty &
          /*selectedIndex, handleClose, handleKeyDown, handleMouseMove, items*/ 15
        ) {
          each_value = /*items*/ ctx[0]
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$5(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block$5(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(div0, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value.length
        }
      },
      i: function intro(local) {
        if (current) return

        add_render_callback(() => {
          if (!current) return
          if (div0_outro) div0_outro.end(1)

          div0_intro = create_in_transition(div0, fly, {
            y: -5,
            duration: 150,
            delay: 0,
            opacity: 0.2,
            start: 0.0,
            easing: quintOut,
          })

          div0_intro.start()
        })

        current = true
      },
      o: function outro(local) {
        if (div0_intro) div0_intro.invalidate()
        div0_outro = create_out_transition(div0, fade, {
          duration: 125,
          easing: quintOut,
        })
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1)
        destroy_each(each_blocks, detaching)
        if (detaching && div0_outro) div0_outro.end()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$g.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function handleKeyDown(event, index) {
    if (event.key === 'Enter' || event.key === ' ') {
      // Trigger the handleClick function when the "Enter" or "Space" key is pressed
      handleClick(index)
    }
  }

  function instance$g($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('TextAheadOverlay', slots, [])
    let { items } = $$props
    let { selectedIndex } = $$props
    const dispatch = createEventDispatcher()

    function handleClose(index) {
      dispatch('close', index)
    }

    function handleMouseMove(index) {
      dispatch('select', index)
    }

    $$self.$$.on_mount.push(function () {
      if (
        items === undefined &&
        !('items' in $$props || $$self.$$.bound[$$self.$$.props['items']])
      ) {
        console.warn(
          "<TextAheadOverlay> was created without expected prop 'items'"
        )
      }

      if (
        selectedIndex === undefined &&
        !(
          'selectedIndex' in $$props ||
          $$self.$$.bound[$$self.$$.props['selectedIndex']]
        )
      ) {
        console.warn(
          "<TextAheadOverlay> was created without expected prop 'selectedIndex'"
        )
      }
    })

    const writable_props = ['items', 'selectedIndex']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(
          `<TextAheadOverlay> was created with unknown prop '${key}'`
        )
    })

    const click_handler = (i) => handleClose(i)
    const keydown_handler = (i, event) => handleKeyDown(event, i)
    const mousemove_handler = (i) => handleMouseMove(i)

    $$self.$$set = ($$props) => {
      if ('items' in $$props) $$invalidate(0, (items = $$props.items))
      if ('selectedIndex' in $$props)
        $$invalidate(1, (selectedIndex = $$props.selectedIndex))
    }

    $$self.$capture_state = () => ({
      createEventDispatcher,
      fade,
      fly,
      quintOut,
      items,
      selectedIndex,
      dispatch,
      handleClose,
      handleMouseMove,
      handleKeyDown,
    })

    $$self.$inject_state = ($$props) => {
      if ('items' in $$props) $$invalidate(0, (items = $$props.items))
      if ('selectedIndex' in $$props)
        $$invalidate(1, (selectedIndex = $$props.selectedIndex))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [
      items,
      selectedIndex,
      handleClose,
      handleMouseMove,
      click_handler,
      keydown_handler,
      mousemove_handler,
    ]
  }

  class TextAheadOverlay extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$g, create_fragment$g, safe_not_equal, {
        items: 0,
        selectedIndex: 1,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'TextAheadOverlay',
        options,
        id: create_fragment$g.name,
      })
    }

    get items() {
      throw new Error(
        "<TextAheadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set items(value) {
      throw new Error(
        "<TextAheadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get selectedIndex() {
      throw new Error(
        "<TextAheadOverlay>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set selectedIndex(value) {
      throw new Error(
        "<TextAheadOverlay>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  function debounce(fn, delay) {
    let timeout

    const call = (...args) => {
      if (timeout) {
        clearTimeout(timeout)
      }
      timeout = setTimeout(() => fn(...args), delay)
    }

    call.cancel = () => {
      if (timeout) {
        clearTimeout(timeout)
      }
    }

    return call
  }

  /* src/components/TextInput.svelte generated by Svelte v3.58.0 */
  const file$e = 'src/components/TextInput.svelte'

  // (149:2) {#if items && overlayOpen && results.length > 0}
  function create_if_block_1$5(ctx) {
    let textaheadoverlay
    let current

    textaheadoverlay = new TextAheadOverlay({
      props: {
        items: /*results*/ ctx[11],
        selectedIndex: /*selectedIndex*/ ctx[10],
      },
      $$inline: true,
    })

    textaheadoverlay.$on('close', /*close_handler*/ ctx[27])
    textaheadoverlay.$on('select', /*select_handler*/ ctx[28])

    const block = {
      c: function create() {
        create_component(textaheadoverlay.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(textaheadoverlay, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textaheadoverlay_changes = {}
        if (dirty[0] & /*results*/ 2048)
          textaheadoverlay_changes.items = /*results*/ ctx[11]
        if (dirty[0] & /*selectedIndex*/ 1024)
          textaheadoverlay_changes.selectedIndex = /*selectedIndex*/ ctx[10]
        textaheadoverlay.$set(textaheadoverlay_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(textaheadoverlay.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(textaheadoverlay.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textaheadoverlay, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$5.name,
      type: 'if',
      source: '(149:2) {#if items && overlayOpen && results.length > 0}',
      ctx,
    })

    return block
  }

  // (157:2) {#if invalidMessage && invalid}
  function create_if_block$8(ctx) {
    let message
    let current

    message = new Message({
      props: {
        text: /*invalidMessage*/ ctx[6],
        error: true,
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        create_component(message.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(message, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const message_changes = {}
        if (dirty[0] & /*invalidMessage*/ 64)
          message_changes.text = /*invalidMessage*/ ctx[6]
        message.$set(message_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(message.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(message.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(message, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$8.name,
      type: 'if',
      source: '(157:2) {#if invalidMessage && invalid}',
      ctx,
    })

    return block
  }

  function create_fragment$f(ctx) {
    let div
    let input
    let input_autocomplete_value
    let t0
    let t1
    let current
    let mounted
    let dispose
    let if_block0 =
      /*items*/ ctx[8] &&
      /*overlayOpen*/ ctx[9] &&
      /*results*/ ctx[11].length > 0 &&
      create_if_block_1$5(ctx)
    let if_block1 =
      /*invalidMessage*/ ctx[6] && /*invalid*/ ctx[2] && create_if_block$8(ctx)

    const block = {
      c: function create() {
        div = element('div')
        input = element('input')
        t0 = space()
        if (if_block0) if_block0.c()
        t1 = space()
        if (if_block1) if_block1.c()
        attr_dev(input, 'id', /*id*/ ctx[3])
        attr_dev(input, 'class', 'input svelte-kurrro')
        attr_dev(input, 'type', 'text')
        input.disabled = /*disabled*/ ctx[5]
        attr_dev(input, 'placeholder', /*placeholder*/ ctx[4])
        attr_dev(
          input,
          'autocomplete',
          (input_autocomplete_value = /*items*/ ctx[8]
            ? 'off'
            : /*autocomplete*/ ctx[7])
        )
        toggle_class(input, 'is-danger', /*invalid*/ ctx[2])
        add_location(input, file$e, 133, 2, 3007)
        add_location(div, file$e, 132, 0, 2999)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, input)
        set_input_value(input, /*value*/ ctx[0])
        /*input_binding*/ ctx[22](input)
        append_dev(div, t0)
        if (if_block0) if_block0.m(div, null)
        append_dev(div, t1)
        if (if_block1) if_block1.m(div, null)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(input, 'input', /*input_input_handler*/ ctx[21]),
            listen_dev(
              input,
              'focus',
              /*focus_handler*/ ctx[23],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input,
              'blur',
              /*blur_handler*/ ctx[24],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input,
              'input',
              /*input_handler*/ ctx[25],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input,
              'keydown',
              /*keydown_handler*/ ctx[26],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (!current || dirty[0] & /*id*/ 8) {
          attr_dev(input, 'id', /*id*/ ctx[3])
        }

        if (!current || dirty[0] & /*disabled*/ 32) {
          prop_dev(input, 'disabled', /*disabled*/ ctx[5])
        }

        if (!current || dirty[0] & /*placeholder*/ 16) {
          attr_dev(input, 'placeholder', /*placeholder*/ ctx[4])
        }

        if (
          !current ||
          (dirty[0] & /*items, autocomplete*/ 384 &&
            input_autocomplete_value !==
              (input_autocomplete_value = /*items*/ ctx[8]
                ? 'off'
                : /*autocomplete*/ ctx[7]))
        ) {
          attr_dev(input, 'autocomplete', input_autocomplete_value)
        }

        if (dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
          set_input_value(input, /*value*/ ctx[0])
        }

        if (!current || dirty[0] & /*invalid*/ 4) {
          toggle_class(input, 'is-danger', /*invalid*/ ctx[2])
        }

        if (
          /*items*/ ctx[8] &&
          /*overlayOpen*/ ctx[9] &&
          /*results*/ ctx[11].length > 0
        ) {
          if (if_block0) {
            if_block0.p(ctx, dirty)

            if (dirty[0] & /*items, overlayOpen, results*/ 2816) {
              transition_in(if_block0, 1)
            }
          } else {
            if_block0 = create_if_block_1$5(ctx)
            if_block0.c()
            transition_in(if_block0, 1)
            if_block0.m(div, t1)
          }
        } else if (if_block0) {
          group_outros()

          transition_out(if_block0, 1, 1, () => {
            if_block0 = null
          })

          check_outros()
        }

        if (/*invalidMessage*/ ctx[6] && /*invalid*/ ctx[2]) {
          if (if_block1) {
            if_block1.p(ctx, dirty)

            if (dirty[0] & /*invalidMessage, invalid*/ 68) {
              transition_in(if_block1, 1)
            }
          } else {
            if_block1 = create_if_block$8(ctx)
            if_block1.c()
            transition_in(if_block1, 1)
            if_block1.m(div, null)
          }
        } else if (if_block1) {
          group_outros()

          transition_out(if_block1, 1, 1, () => {
            if_block1 = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block0)
        transition_in(if_block1)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block0)
        transition_out(if_block1)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        /*input_binding*/ ctx[22](null)
        if (if_block0) if_block0.d()
        if (if_block1) if_block1.d()
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$f.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$f($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('TextInput', slots, [])
    let { id } = $$props
    let { value } = $$props
    let { placeholder = '' } = $$props
    let { inputRef = undefined } = $$props
    let { validate = () => true } = $$props
    let { disabled = false } = $$props
    let { invalidMessage = undefined } = $$props
    let { autocomplete = 'on' } = $$props
    let { invalid = false } = $$props
    let { items = undefined } = $$props
    let { minLength = 1 } = $$props
    let { maxItems = 10 } = $$props
    const dispatch = createEventDispatcher()
    let changed = false
    let overlayOpen = false
    let selectedIndex = 0
    let timer = null
    let results = []
    const setInvalid = debounce(() => $$invalidate(2, (invalid = true)), 1000)

    const regExpEscape = (s) => {
      return s.replace(/[-\\^$*+?.()|[\]{}]/g, '\\$&')
    }

    function handleBlur() {
      timer = setTimeout(() => {
        $$invalidate(9, (overlayOpen = false))
        $$invalidate(2, (invalid = changed && !validate(value)))
      }, 250)
    }

    function handleFocus() {
      clearTimeout(timer)
    }

    const closeOverlay = (index = -1) => {
      $$invalidate(9, (overlayOpen = false))
      $$invalidate(10, (selectedIndex = -1))

      if (index > -1) {
        $$invalidate(0, (value = results[index].value))
      }
    }

    const handleChange = (event) => {
      const term = event.target.value

      if (term.length >= Number(minLength)) {
        $$invalidate(9, (overlayOpen = true))
        filterResults(term)
      } else {
        $$invalidate(11, (results = []))
      }
    }

    const filterResults = (term) => {
      $$invalidate(
        11,
        (results = items
          .filter((item) => {
            if (typeof item !== 'string') item = item.value || ''
            return item.toUpperCase().includes(term.toUpperCase())
          })
          .map((item, i) => {
            const text = typeof item !== 'string' ? item.value : item

            return {
              key: item.key || i,
              value: text,
              label:
                term.trim() === ''
                  ? text
                  : text.replace(
                      RegExp(regExpEscape(term.trim()), 'i'),
                      "<span style='font-weight: 600;'>$&</span>"
                    ),
            }
          })
          .slice(0, maxItems - 1))
      )
    }

    function handleKeyDown(event) {
      if (event.keyCode === 40 && selectedIndex < results.length - 1) {
        $$invalidate(10, (selectedIndex += 1))
      } else if (event.keyCode === 38 && selectedIndex > 0) {
        $$invalidate(10, (selectedIndex -= 1))
      } else if (event.keyCode === 13) {
        event.preventDefault()
        if (selectedIndex === -1) $$invalidate(10, (selectedIndex = 0))
        closeOverlay(selectedIndex)
      } else if (event.keyCode === 27) {
        event.preventDefault()
        closeOverlay()
      }
    }

    $$self.$$.on_mount.push(function () {
      if (
        id === undefined &&
        !('id' in $$props || $$self.$$.bound[$$self.$$.props['id']])
      ) {
        console.warn("<TextInput> was created without expected prop 'id'")
      }

      if (
        value === undefined &&
        !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])
      ) {
        console.warn("<TextInput> was created without expected prop 'value'")
      }
    })

    const writable_props = [
      'id',
      'value',
      'placeholder',
      'inputRef',
      'validate',
      'disabled',
      'invalidMessage',
      'autocomplete',
      'invalid',
      'items',
      'minLength',
      'maxItems',
    ]

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<TextInput> was created with unknown prop '${key}'`)
    })

    function input_input_handler() {
      value = this.value
      $$invalidate(0, value)
    }

    function input_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        inputRef = $$value
        $$invalidate(1, inputRef)
      })
    }

    const focus_handler = () => items && handleFocus()
    const blur_handler = () => items && handleBlur()
    const input_handler = (event) => items && handleChange(event)
    const keydown_handler = (event) => items && handleKeyDown(event)
    const close_handler = (event) => closeOverlay(event.detail)
    const select_handler = (event) =>
      $$invalidate(10, (selectedIndex = event.detail))

    $$self.$$set = ($$props) => {
      if ('id' in $$props) $$invalidate(3, (id = $$props.id))
      if ('value' in $$props) $$invalidate(0, (value = $$props.value))
      if ('placeholder' in $$props)
        $$invalidate(4, (placeholder = $$props.placeholder))
      if ('inputRef' in $$props) $$invalidate(1, (inputRef = $$props.inputRef))
      if ('validate' in $$props) $$invalidate(17, (validate = $$props.validate))
      if ('disabled' in $$props) $$invalidate(5, (disabled = $$props.disabled))
      if ('invalidMessage' in $$props)
        $$invalidate(6, (invalidMessage = $$props.invalidMessage))
      if ('autocomplete' in $$props)
        $$invalidate(7, (autocomplete = $$props.autocomplete))
      if ('invalid' in $$props) $$invalidate(2, (invalid = $$props.invalid))
      if ('items' in $$props) $$invalidate(8, (items = $$props.items))
      if ('minLength' in $$props)
        $$invalidate(18, (minLength = $$props.minLength))
      if ('maxItems' in $$props) $$invalidate(19, (maxItems = $$props.maxItems))
    }

    $$self.$capture_state = () => ({
      createEventDispatcher,
      Message,
      TextAheadOverlay,
      debounce,
      id,
      value,
      placeholder,
      inputRef,
      validate,
      disabled,
      invalidMessage,
      autocomplete,
      invalid,
      items,
      minLength,
      maxItems,
      dispatch,
      changed,
      overlayOpen,
      selectedIndex,
      timer,
      results,
      setInvalid,
      regExpEscape,
      handleBlur,
      handleFocus,
      closeOverlay,
      handleChange,
      filterResults,
      handleKeyDown,
    })

    $$self.$inject_state = ($$props) => {
      if ('id' in $$props) $$invalidate(3, (id = $$props.id))
      if ('value' in $$props) $$invalidate(0, (value = $$props.value))
      if ('placeholder' in $$props)
        $$invalidate(4, (placeholder = $$props.placeholder))
      if ('inputRef' in $$props) $$invalidate(1, (inputRef = $$props.inputRef))
      if ('validate' in $$props) $$invalidate(17, (validate = $$props.validate))
      if ('disabled' in $$props) $$invalidate(5, (disabled = $$props.disabled))
      if ('invalidMessage' in $$props)
        $$invalidate(6, (invalidMessage = $$props.invalidMessage))
      if ('autocomplete' in $$props)
        $$invalidate(7, (autocomplete = $$props.autocomplete))
      if ('invalid' in $$props) $$invalidate(2, (invalid = $$props.invalid))
      if ('items' in $$props) $$invalidate(8, (items = $$props.items))
      if ('minLength' in $$props)
        $$invalidate(18, (minLength = $$props.minLength))
      if ('maxItems' in $$props) $$invalidate(19, (maxItems = $$props.maxItems))
      if ('changed' in $$props) $$invalidate(20, (changed = $$props.changed))
      if ('overlayOpen' in $$props)
        $$invalidate(9, (overlayOpen = $$props.overlayOpen))
      if ('selectedIndex' in $$props)
        $$invalidate(10, (selectedIndex = $$props.selectedIndex))
      if ('timer' in $$props) timer = $$props.timer
      if ('results' in $$props) $$invalidate(11, (results = $$props.results))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty[0] & /*changed, value*/ 1048577) {
        $$invalidate(20, (changed = changed || (value !== '' && !changed)))
      }

      if ($$self.$$.dirty[0] & /*items, changed, validate, value*/ 1179905) {
        if (!items) {
          if (changed && !validate(value)) {
            setInvalid()
          } else {
            setInvalid.cancel()
            $$invalidate(2, (invalid = false))
          }
        }
      }
    }

    return [
      value,
      inputRef,
      invalid,
      id,
      placeholder,
      disabled,
      invalidMessage,
      autocomplete,
      items,
      overlayOpen,
      selectedIndex,
      results,
      handleBlur,
      handleFocus,
      closeOverlay,
      handleChange,
      handleKeyDown,
      validate,
      minLength,
      maxItems,
      changed,
      input_input_handler,
      input_binding,
      focus_handler,
      blur_handler,
      input_handler,
      keydown_handler,
      close_handler,
      select_handler,
    ]
  }

  class TextInput extends SvelteComponentDev {
    constructor(options) {
      super(options)

      init(
        this,
        options,
        instance$f,
        create_fragment$f,
        safe_not_equal,
        {
          id: 3,
          value: 0,
          placeholder: 4,
          inputRef: 1,
          validate: 17,
          disabled: 5,
          invalidMessage: 6,
          autocomplete: 7,
          invalid: 2,
          items: 8,
          minLength: 18,
          maxItems: 19,
        },
        null,
        [-1, -1]
      )

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'TextInput',
        options,
        id: create_fragment$f.name,
      })
    }

    get id() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get value() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set value(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get placeholder() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set placeholder(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get inputRef() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set inputRef(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get validate() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set validate(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get disabled() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set disabled(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get invalidMessage() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set invalidMessage(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get autocomplete() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set autocomplete(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get invalid() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set invalid(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get items() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set items(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get minLength() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set minLength(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get maxItems() {
      throw new Error(
        "<TextInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set maxItems(value) {
      throw new Error(
        "<TextInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  // adopted from: <https://stackoverflow.com/a/43467144>
  function validateHttpUrl(url) {
    let _url

    try {
      _url = new URL(url)
    } catch (_) {
      return false
    }

    return _url.protocol === 'http:' || _url.protocol === 'https:'
  }

  /*!
   * content-type
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */

  /**
   * RegExp to match *( ";" parameter ) in RFC 7231 sec 3.1.1.1
   *
   * parameter     = token "=" ( token / quoted-string )
   * token         = 1*tchar
   * tchar         = "!" / "#" / "$" / "%" / "&" / "'" / "*"
   *               / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
   *               / DIGIT / ALPHA
   *               ; any VCHAR, except delimiters
   * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE
   * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text
   * obs-text      = %x80-FF
   * quoted-pair   = "\" ( HTAB / SP / VCHAR / obs-text )
   */
  var PARAM_REGEXP =
    /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *("(?:[\u000b\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\u000b\u0020-\u00ff])*"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g // eslint-disable-line no-control-regex
  var TEXT_REGEXP = /^[\u000b\u0020-\u007e\u0080-\u00ff]+$/ // eslint-disable-line no-control-regex
  var TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

  /**
   * RegExp to match quoted-pair in RFC 7230 sec 3.2.6
   *
   * quoted-pair = "\" ( HTAB / SP / VCHAR / obs-text )
   * obs-text    = %x80-FF
   */
  var QESC_REGEXP = /\\([\u000b\u0020-\u00ff])/g // eslint-disable-line no-control-regex

  /**
   * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6
   */
  var QUOTE_REGEXP = /([\\"])/g

  /**
   * RegExp to match type in RFC 7231 sec 3.1.1.1
   *
   * media-type = type "/" subtype
   * type       = token
   * subtype    = token
   */
  var TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/

  /**
   * Module exports.
   * @public
   */

  var format_1 = format
  var parse_1 = parse

  /**
   * Format object to media type.
   *
   * @param {object} obj
   * @return {string}
   * @public
   */

  function format(obj) {
    if (!obj || typeof obj !== 'object') {
      throw new TypeError('argument obj is required')
    }

    var parameters = obj.parameters
    var type = obj.type

    if (!type || !TYPE_REGEXP.test(type)) {
      throw new TypeError('invalid type')
    }

    var string = type

    // append parameters
    if (parameters && typeof parameters === 'object') {
      var param
      var params = Object.keys(parameters).sort()

      for (var i = 0; i < params.length; i++) {
        param = params[i]

        if (!TOKEN_REGEXP.test(param)) {
          throw new TypeError('invalid parameter name')
        }

        string += '; ' + param + '=' + qstring(parameters[param])
      }
    }

    return string
  }

  /**
   * Parse media type to object.
   *
   * @param {string|object} string
   * @return {Object}
   * @public
   */

  function parse(string) {
    if (!string) {
      throw new TypeError('argument string is required')
    }

    // support req/res-like objects as argument
    var header = typeof string === 'object' ? getcontenttype(string) : string

    if (typeof header !== 'string') {
      throw new TypeError('argument string is required to be a string')
    }

    var index = header.indexOf(';')
    var type = index !== -1 ? header.slice(0, index).trim() : header.trim()

    if (!TYPE_REGEXP.test(type)) {
      throw new TypeError('invalid media type')
    }

    var obj = new ContentType(type.toLowerCase())

    // parse parameters
    if (index !== -1) {
      var key
      var match
      var value

      PARAM_REGEXP.lastIndex = index

      while ((match = PARAM_REGEXP.exec(header))) {
        if (match.index !== index) {
          throw new TypeError('invalid parameter format')
        }

        index += match[0].length
        key = match[1].toLowerCase()
        value = match[2]

        if (value.charCodeAt(0) === 0x22 /* " */) {
          // remove quotes
          value = value.slice(1, -1)

          // remove escapes
          if (value.indexOf('\\') !== -1) {
            value = value.replace(QESC_REGEXP, '$1')
          }
        }

        obj.parameters[key] = value
      }

      if (index !== header.length) {
        throw new TypeError('invalid parameter format')
      }
    }

    return obj
  }

  /**
   * Get content-type from req/res objects.
   *
   * @param {object}
   * @return {Object}
   * @private
   */

  function getcontenttype(obj) {
    var header

    if (typeof obj.getHeader === 'function') {
      // res-like
      header = obj.getHeader('content-type')
    } else if (typeof obj.headers === 'object') {
      // req-like
      header = obj.headers && obj.headers['content-type']
    }

    if (typeof header !== 'string') {
      throw new TypeError('content-type header is missing from object')
    }

    return header
  }

  /**
   * Quote a string if necessary.
   *
   * @param {string} val
   * @return {string}
   * @private
   */

  function qstring(val) {
    var str = String(val)

    // no need to quote tokens
    if (TOKEN_REGEXP.test(str)) {
      return str
    }

    if (str.length > 0 && !TEXT_REGEXP.test(str)) {
      throw new TypeError('invalid parameter value')
    }

    return '"' + str.replace(QUOTE_REGEXP, '\\$1') + '"'
  }

  /**
   * Class to represent a content type.
   * @private
   */
  function ContentType(type) {
    this.parameters = Object.create(null)
    this.type = type
  }

  var contentType = {
    format: format_1,
    parse: parse_1,
  }

  async function isIIIFImage(url) {
    const res = await fetch(url, { mode: 'cors' })

    const ct = res.headers.get('content-type')

    if (res.ok && ct && contentType.parse(ct).type === 'application/json') {
      const imageManifest = await res.json()
      return [
        imageManifest['@context'] === 'http://iiif.io/api/image/2/context.json',
        imageManifest,
      ]
    } else {
      return [false, null]
    }
  }

  function s3_bucket_url_js(key) {
    const s3 = new AWS.S3()
    var params = { Bucket: 'brucheion', Key: key, Expires: 60 * 300 }
    var s3_presigned = s3.getSignedUrl('getObject', params)
    return s3_presigned
  }

  async function listDZIFiles(bucketName, prefix) {
    const s3 = new AWS.S3()
    const params = {
      Bucket: bucketName,
      Prefix: prefix,
      MaxKeys: 100000,
    }

    try {
      const result = await s3.listObjectsV2(params).promise()

      if (!result) {
        console.error('Error: The result object is undefined.')
        return []
      }

      if (!result.Contents) {
        console.error(
          'Error: The result.Contents property is undefined.',
          result
        )
        return []
      }

      console.log('Result:', result)
      const dziFiles = result.Contents.filter((file) =>
        file.Key.endsWith('.dzi')
      ).map((file) => file.Key)
      return dziFiles
    } catch (error) {
      console.error('Error listing DZI files:', error)
      throw error
    }
  }

  async function listDZIcollection(bucketName, prefix) {
    const s3 = new AWS.S3()

    let result
    let isTruncated = true
    let continuationToken
    let allContents = []

    while (isTruncated) {
      const params = {
        Bucket: bucketName,
        Prefix: prefix,
        //Delimiter: delimiter,
        ContinuationToken: continuationToken,
      }

      try {
        result = await s3.listObjectsV2(params).promise()
        isTruncated = result.IsTruncated
        continuationToken = result.NextContinuationToken

        if (!result || !result.Contents) {
          console.error(
            'Error: The result object or its Contents property is undefined.',
            result
          )
          return []
        }

        allContents = allContents.concat(result.Contents)
      } catch (error) {
        console.error('Error listing DZI files:', error)
        throw error
      }
    }

    const dziFiles = allContents
      .filter((file) => file.Key.endsWith('.dzi'))
      .map((file) => file.Key)
    // return  array
    // nbh/J1img/positive/J1_55v.dzi
    return dziFiles
  }

  /* On a quick note, this is kind of a shallow copy of the BrIC.js library that
   * is being shipped with Brucheion. However, BrIC is not suited for modular
   * use and is tied to the Go template setup of the first-version Brucheion. I've
   * decided to progress a bit and adopt parts of BrIC to flexible 2020 use.
   */

  const localSuffix = '.dzi'

  function getImagePathFromUrn(urn) {
    const ns = urn.split(':')[2]
    const collectionAndVersion = urn.split(':')[3]
    const collection = collectionAndVersion.split('.')[0]
    const version = collectionAndVersion.split('.')[1]
    // console.log('getImagePathFromURN', `${ns}/${collection}/${version}/`)
    return `${ns}/${collection}/${version}/`
  }

  function getDZISources(imgUrn) {
    const plainUrn = imgUrn.split('@')[0]
    const imgId = plainUrn.split(':')[4]
    const imagePath = getImagePathFromUrn(plainUrn)
    // console.log('getTileSources', imagePath, imgId, localSuffix)
    return s3_bucket_url_js(imagePath + imgId + localSuffix)
  }

  const defaultOpts = {
    crossOriginPolicy: 'Anonymous',
    minZoomImageRatio: 0.1, // of viewer size
    immediateRender: true,
    prefixUrl: '/files/static/css/images/',
    toolbar: 'osd_buttons',
  }

  const getStaticOpts = (id, url) => ({
    ...defaultOpts,
    id,
    tileSources: {
      type: 'image',
      url,
    },
    buildPyramid: false,
    crossOriginPolicy: false,
  })

  const getIIIFOpts = (id, imageManifest) => ({
    ...defaultOpts,
    id,
    tileSources: [imageManifest],
    sequenceMode: true,
    prefixUrl: '/files/static/css/images/',
    crossOriginPolicy: 'Anonymous',
    defaultZoomLevel: 1,
    minZoomImageRatio: 0.1, // of viewer size
    immediateRender: true,
  })

  const getInternalOpts = (id, urn) => ({
    ...defaultOpts,
    id,
    tileSources: getDZISources(urn),
  })

  /* src/routes/IngestImage.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1$5, console: console_1$6 } = globals

  const file$d = 'src/routes/IngestImage.svelte'

  // (305:24)
  function create_if_block_4$3(ctx) {
    let h5

    const block = {
      c: function create() {
        h5 = element('h5')
        h5.textContent = `${/*err*/ ctx[17]}`
        add_location(h5, file$d, 305, 12, 8031)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h5, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(h5)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_4$3.name,
      type: 'if',
      source: '(305:24) ',
      ctx,
    })

    return block
  }

  // (301:10) {#if colinfo}
  function create_if_block_3$4(ctx) {
    let h3
    let t0
    let t1_value = /*colinfo*/ ctx[9].title + ''
    let t1
    let t2

    const block = {
      c: function create() {
        h3 = element('h3')
        t0 = text('Define Identifier for "')
        t1 = text(t1_value)
        t2 = text('" collection')
        set_style(h3, 'width', '90%')
        add_location(h3, file$d, 301, 12, 7886)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t0)
        append_dev(h3, t1)
        append_dev(h3, t2)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*colinfo*/ 512 &&
          t1_value !== (t1_value = /*colinfo*/ ctx[9].title + '')
        )
          set_data_dev(t1, t1_value)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_3$4.name,
      type: 'if',
      source: '(301:10) {#if colinfo}',
      ctx,
    })

    return block
  }

  // (309:10) <FormLine             id="URN_prefix"             label="Image name in URN format"             info="Like `urn:cite2:nbh:J1img.positive:J1_31r`. Fill all bottom filelds to take result!">
  function create_default_slot_7(ctx) {
    let textinput
    let updating_value
    let current

    function textinput_value_binding(value) {
      /*textinput_value_binding*/ ctx[28](value)
    }

    let textinput_props = { id: 'URN_prefix', disabled: 'true' }

    if (/*imageName*/ ctx[0] !== void 0) {
      textinput_props.value = /*imageName*/ ctx[0]
    }

    textinput = new TextInput({ props: textinput_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(textinput, 'value', textinput_value_binding)
    )

    const block = {
      c: function create() {
        create_component(textinput.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(textinput, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textinput_changes = {}

        if (!updating_value && dirty[0] & /*imageName*/ 1) {
          updating_value = true
          textinput_changes.value = /*imageName*/ ctx[0]
          add_flush_callback(() => (updating_value = false))
        }

        textinput.$set(textinput_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(textinput.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(textinput.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textinput, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_7.name,
      type: 'slot',
      source:
        '(309:10) <FormLine             id=\\"URN_prefix\\"             label=\\"Image name in URN format\\"             info=\\"Like `urn:cite2:nbh:J1img.positive:J1_31r`. Fill all bottom filelds to take result!\\">',
      ctx,
    })

    return block
  }

  // (316:10) <FormLine             id="namespace"             label="Namespace"             info="Name of your image collection">
  function create_default_slot_6(ctx) {
    let textinput
    let updating_value
    let current

    function textinput_value_binding_1(value) {
      /*textinput_value_binding_1*/ ctx[30](value)
    }

    let textinput_props = {
      id: 'namespace',
      placeholder: 'Select or enter namespace',
      validate: /*func*/ ctx[29],
      items: /*namespaces*/ ctx[13],
      invalidMessage: 'Please enter a valid namespace without COLON(:).',
    }

    if (/*namespace*/ ctx[3] !== void 0) {
      textinput_props.value = /*namespace*/ ctx[3]
    }

    textinput = new TextInput({ props: textinput_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(textinput, 'value', textinput_value_binding_1)
    )

    const block = {
      c: function create() {
        create_component(textinput.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(textinput, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textinput_changes = {}
        if (dirty[0] & /*namespaces*/ 8192)
          textinput_changes.items = /*namespaces*/ ctx[13]

        if (!updating_value && dirty[0] & /*namespace*/ 8) {
          updating_value = true
          textinput_changes.value = /*namespace*/ ctx[3]
          add_flush_callback(() => (updating_value = false))
        }

        textinput.$set(textinput_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(textinput.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(textinput.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textinput, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_6.name,
      type: 'slot',
      source:
        '(316:10) <FormLine             id=\\"namespace\\"             label=\\"Namespace\\"             info=\\"Name of your image collection\\">',
      ctx,
    })

    return block
  }

  // (329:10) <FormLine             id="collection"             label="Collection ID and/or Object Type"             info="Like `nyaya.positive`">
  function create_default_slot_5(ctx) {
    let textinput
    let updating_value
    let current

    function textinput_value_binding_2(value) {
      /*textinput_value_binding_2*/ ctx[32](value)
    }

    let textinput_props = {
      id: 'collection',
      placeholder: 'Select or enter collection ID and/or object type',
      validate: /*func_1*/ ctx[31],
      items: /*collectionIDs*/ ctx[14],
      invalidMessage: 'Please enter a value without COLON(:).',
    }

    if (/*collectionID*/ ctx[4] !== void 0) {
      textinput_props.value = /*collectionID*/ ctx[4]
    }

    textinput = new TextInput({ props: textinput_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(textinput, 'value', textinput_value_binding_2)
    )

    const block = {
      c: function create() {
        create_component(textinput.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(textinput, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textinput_changes = {}
        if (dirty[0] & /*collectionIDs*/ 16384)
          textinput_changes.items = /*collectionIDs*/ ctx[14]

        if (!updating_value && dirty[0] & /*collectionID*/ 16) {
          updating_value = true
          textinput_changes.value = /*collectionID*/ ctx[4]
          add_flush_callback(() => (updating_value = false))
        }

        textinput.$set(textinput_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(textinput.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(textinput.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textinput, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_5.name,
      type: 'slot',
      source:
        '(329:10) <FormLine             id=\\"collection\\"             label=\\"Collection ID and/or Object Type\\"             info=\\"Like `nyaya.positive`\\">',
      ctx,
    })

    return block
  }

  // (342:10) <FormLine             id="image_id"             label="Image Identifier"             info="Image number in collection. Like `J1D_35`">
  function create_default_slot_4(ctx) {
    let textinput
    let updating_value
    let current

    function textinput_value_binding_3(value) {
      /*textinput_value_binding_3*/ ctx[34](value)
    }

    let textinput_props = {
      id: 'image_id',
      placeholder: 'Enter image identifier',
      validate: /*func_2*/ ctx[33],
      invalidMessage: 'Please enter a valid image identifier without COLON(:).',
    }

    if (/*imageID*/ ctx[5] !== void 0) {
      textinput_props.value = /*imageID*/ ctx[5]
    }

    textinput = new TextInput({ props: textinput_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(textinput, 'value', textinput_value_binding_3)
    )

    const block = {
      c: function create() {
        create_component(textinput.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(textinput, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textinput_changes = {}

        if (!updating_value && dirty[0] & /*imageID*/ 32) {
          updating_value = true
          textinput_changes.value = /*imageID*/ ctx[5]
          add_flush_callback(() => (updating_value = false))
        }

        textinput.$set(textinput_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(textinput.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(textinput.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textinput, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_4.name,
      type: 'slot',
      source:
        '(342:10) <FormLine             id=\\"image_id\\"             label=\\"Image Identifier\\"             info=\\"Image number in collection. Like `J1D_35`\\">',
      ctx,
    })

    return block
  }

  // (365:12) {#if previewErrored}
  function create_if_block_2$4(ctx) {
    let message
    let current

    message = new Message({
      props: {
        text: 'The media could not be loaded for preview due to errors.\n                You can ingest it nonetheless.',
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        create_component(message.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(message, target, anchor)
        current = true
      },
      i: function intro(local) {
        if (current) return
        transition_in(message.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(message.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(message, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_2$4.name,
      type: 'if',
      source: '(365:12) {#if previewErrored}',
      ctx,
    })

    return block
  }

  // (354:10) <FormLine             id="source"             label="Source"             info="Link to external source like `https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png`">
  function create_default_slot_3(ctx) {
    let textinput
    let updating_value
    let t
    let if_block_anchor
    let current

    function textinput_value_binding_4(value) {
      /*textinput_value_binding_4*/ ctx[36](value)
    }

    let textinput_props = {
      id: 'source',
      placeholder: 'Resource URL',
      validate: /*func_3*/ ctx[35],
      invalidMessage:
        'Please enter a valid CITE object URN or a HTTP(S)\n              URL.',
    }

    if (/*imageUrl*/ ctx[1] !== void 0) {
      textinput_props.value = /*imageUrl*/ ctx[1]
    }

    textinput = new TextInput({ props: textinput_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(textinput, 'value', textinput_value_binding_4)
    )
    let if_block = /*previewErrored*/ ctx[8] && create_if_block_2$4(ctx)

    const block = {
      c: function create() {
        create_component(textinput.$$.fragment)
        t = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
      },
      m: function mount(target, anchor) {
        mount_component(textinput, target, anchor)
        insert_dev(target, t, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const textinput_changes = {}

        if (!updating_value && dirty[0] & /*imageUrl*/ 2) {
          updating_value = true
          textinput_changes.value = /*imageUrl*/ ctx[1]
          add_flush_callback(() => (updating_value = false))
        }

        textinput.$set(textinput_changes)

        if (/*previewErrored*/ ctx[8]) {
          if (if_block) {
            if (dirty[0] & /*previewErrored*/ 256) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block_2$4(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(textinput.$$.fragment, local)
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(textinput.$$.fragment, local)
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(textinput, detaching)
        if (detaching) detach_dev(t)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_3.name,
      type: 'slot',
      source:
        '(354:10) <FormLine             id=\\"source\\"             label=\\"Source\\"             info=\\"Link to external source like `https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png`\\">',
      ctx,
    })

    return block
  }

  // (372:10) <FormLine             id="protocol"             label="Type"             info="Usually defined automatically when Source defined">
  function create_default_slot_2(ctx) {
    let div
    let select
    let option0
    let option1
    let mounted
    let dispose

    const block = {
      c: function create() {
        div = element('div')
        select = element('select')
        option0 = element('option')
        option0.textContent = 'Static'
        option1 = element('option')
        option1.textContent = 'IIIF'
        option0.__value = 'static'
        option0.value = option0.__value
        add_location(option0, file$d, 377, 16, 10781)
        option1.__value = 'iiif'
        option1.value = option1.__value
        add_location(option1, file$d, 379, 16, 10912)
        attr_dev(select, 'id', 'protocol')
        attr_dev(select, 'class', 'svelte-1iimkqc')
        if (/*protocol*/ ctx[6] === void 0)
          add_render_callback(() =>
            /*select_change_handler*/ ctx[37].call(select)
          )
        add_location(select, file$d, 376, 14, 10720)
        attr_dev(div, 'class', 'select')
        add_location(div, file$d, 375, 12, 10685)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, select)
        append_dev(select, option0)
        append_dev(select, option1)
        select_option(select, /*protocol*/ ctx[6], true)

        if (!mounted) {
          dispose = listen_dev(
            select,
            'change',
            /*select_change_handler*/ ctx[37]
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*protocol*/ 64) {
          select_option(select, /*protocol*/ ctx[6])
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_2.name,
      type: 'slot',
      source:
        '(372:10) <FormLine             id=\\"protocol\\"             label=\\"Type\\"             info=\\"Usually defined automatically when Source defined\\">',
      ctx,
    })

    return block
  }

  // (393:12) {#if statusMessage}
  function create_if_block_1$4(ctx) {
    let message
    let current

    message = new Message({
      props: {
        text: /*statusMessage*/ ctx[2],
        error: /*errorMessage*/ ctx[16],
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        create_component(message.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(message, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const message_changes = {}
        if (dirty[0] & /*statusMessage*/ 4)
          message_changes.text = /*statusMessage*/ ctx[2]
        if (dirty[0] & /*errorMessage*/ 65536)
          message_changes.error = /*errorMessage*/ ctx[16]
        message.$set(message_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(message.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(message.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(message, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$4.name,
      type: 'if',
      source: '(393:12) {#if statusMessage}',
      ctx,
    })

    return block
  }

  // (385:10) <FormLine offset>
  function create_default_slot_1(ctx) {
    let button
    let t0
    let button_disabled_value
    let t1
    let if_block_anchor
    let current
    let mounted
    let dispose
    let if_block = /*statusMessage*/ ctx[2] && create_if_block_1$4(ctx)

    const block = {
      c: function create() {
        button = element('button')
        t0 = text('Add Image')
        t1 = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
        attr_dev(button, 'type', 'button')
        attr_dev(button, 'class', 'btn btn-primary')
        button.disabled = button_disabled_value = !(/*complete*/ ctx[15])
        add_location(button, file$d, 385, 12, 11053)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)
        append_dev(button, t0)
        insert_dev(target, t1, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*handleSubmit*/ ctx[18],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          !current ||
          (dirty[0] & /*complete*/ 32768 &&
            button_disabled_value !==
              (button_disabled_value = !(/*complete*/ ctx[15])))
        ) {
          prop_dev(button, 'disabled', button_disabled_value)
        }

        if (/*statusMessage*/ ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty[0] & /*statusMessage*/ 4) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block_1$4(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        if (detaching) detach_dev(t1)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot_1.name,
      type: 'slot',
      source: '(385:10) <FormLine offset>',
      ctx,
    })

    return block
  }

  // (409:0) {#if showModal}
  function create_if_block$7(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[38](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot$3],
        default: [create_default_slot$4],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[10] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[10]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (
          (dirty[0] & /*modalHeader, modalText*/ 6144) |
          (dirty[1] & /*$$scope*/ 131072)
        ) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty[0] & /*showModal*/ 1024) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[10]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$7.name,
      type: 'if',
      source: '(409:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (410:2) <Modal bind:showModal>
  function create_default_slot$4(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[12])
        add_location(h4, file$d, 413, 6, 11779)
        add_location(body, file$d, 412, 4, 11766)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*modalText*/ 4096)
          set_data_dev(t, /*modalText*/ ctx[12])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$4.name,
      type: 'slot',
      source: '(410:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (411:4)
  function create_header_slot$3(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[11])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$d, 410, 4, 11724)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*modalHeader*/ 2048)
          set_data_dev(t, /*modalHeader*/ ctx[11])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot$3.name,
      type: 'slot',
      source: '(411:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$e(ctx) {
    let div5
    let section
    let div4
    let div0
    let form
    let t0
    let formline0
    let t1
    let formline1
    let t2
    let formline2
    let t3
    let formline3
    let t4
    let formline4
    let t5
    let formline5
    let t6
    let formline6
    let t7
    let div3
    let div2
    let h3
    let t9
    let div1
    let t10
    let if_block1_anchor
    let current
    let mounted
    let dispose

    function select_block_type(ctx, dirty) {
      if (/*colinfo*/ ctx[9]) return create_if_block_3$4
      if (/*err*/ ctx[17]) return create_if_block_4$3
    }

    let current_block_type = select_block_type(ctx)
    let if_block0 = current_block_type && current_block_type(ctx)

    formline0 = new FormLine({
      props: {
        id: 'URN_prefix',
        label: 'Image name in URN format',
        info: 'Like `urn:cite2:nbh:J1img.positive:J1_31r`. Fill all bottom filelds to take result!',
        $$slots: { default: [create_default_slot_7] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline1 = new FormLine({
      props: {
        id: 'namespace',
        label: 'Namespace',
        info: 'Name of your image collection',
        $$slots: { default: [create_default_slot_6] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline2 = new FormLine({
      props: {
        id: 'collection',
        label: 'Collection ID and/or Object Type',
        info: 'Like `nyaya.positive`',
        $$slots: { default: [create_default_slot_5] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline3 = new FormLine({
      props: {
        id: 'image_id',
        label: 'Image Identifier',
        info: 'Image number in collection. Like `J1D_35`',
        $$slots: { default: [create_default_slot_4] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline4 = new FormLine({
      props: {
        id: 'source',
        label: 'Source',
        info: 'Link to external source like `https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png`',
        $$slots: { default: [create_default_slot_3] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline5 = new FormLine({
      props: {
        id: 'protocol',
        label: 'Type',
        info: 'Usually defined automatically when Source defined',
        $$slots: { default: [create_default_slot_2] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    formline6 = new FormLine({
      props: {
        offset: true,
        $$slots: { default: [create_default_slot_1] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    let if_block1 = /*showModal*/ ctx[10] && create_if_block$7(ctx)

    const block = {
      c: function create() {
        div5 = element('div')
        section = element('section')
        div4 = element('div')
        div0 = element('div')
        form = element('form')
        if (if_block0) if_block0.c()
        t0 = space()
        create_component(formline0.$$.fragment)
        t1 = space()
        create_component(formline1.$$.fragment)
        t2 = space()
        create_component(formline2.$$.fragment)
        t3 = space()
        create_component(formline3.$$.fragment)
        t4 = space()
        create_component(formline4.$$.fragment)
        t5 = space()
        create_component(formline5.$$.fragment)
        t6 = space()
        create_component(formline6.$$.fragment)
        t7 = space()
        div3 = element('div')
        div2 = element('div')
        h3 = element('h3')
        h3.textContent = 'Preview'
        t9 = space()
        div1 = element('div')
        t10 = space()
        if (if_block1) if_block1.c()
        if_block1_anchor = empty()
        attr_dev(form, 'class', 'form svelte-1iimkqc')
        add_location(form, file$d, 299, 8, 7805)
        attr_dev(div0, 'class', 'column form-column svelte-1iimkqc')
        add_location(div0, file$d, 298, 6, 7764)
        attr_dev(h3, 'class', 'title is-4')
        add_location(h3, file$d, 400, 10, 11536)
        attr_dev(div1, 'id', 'preview')
        attr_dev(div1, 'class', 'preview svelte-1iimkqc')
        add_location(div1, file$d, 401, 10, 11582)
        attr_dev(div2, 'class', 'preview-container svelte-1iimkqc')
        toggle_class(div2, 'visible', /*previewVisible*/ ctx[7])
        add_location(div2, file$d, 399, 8, 11463)
        attr_dev(div3, 'class', 'column form-column svelte-1iimkqc')
        add_location(div3, file$d, 398, 6, 11422)
        attr_dev(div4, 'class', 'columns is-desktop')
        add_location(div4, file$d, 297, 4, 7725)
        add_location(section, file$d, 296, 2, 7711)
        attr_dev(div5, 'class', 'container is-fluid')
        add_location(div5, file$d, 295, 0, 7676)
      },
      l: function claim(nodes) {
        throw new Error_1$5(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div5, anchor)
        append_dev(div5, section)
        append_dev(section, div4)
        append_dev(div4, div0)
        append_dev(div0, form)
        if (if_block0) if_block0.m(form, null)
        append_dev(form, t0)
        mount_component(formline0, form, null)
        append_dev(form, t1)
        mount_component(formline1, form, null)
        append_dev(form, t2)
        mount_component(formline2, form, null)
        append_dev(form, t3)
        mount_component(formline3, form, null)
        append_dev(form, t4)
        mount_component(formline4, form, null)
        append_dev(form, t5)
        mount_component(formline5, form, null)
        append_dev(form, t6)
        mount_component(formline6, form, null)
        append_dev(div4, t7)
        append_dev(div4, div3)
        append_dev(div3, div2)
        append_dev(div2, h3)
        append_dev(div2, t9)
        append_dev(div2, div1)
        insert_dev(target, t10, anchor)
        if (if_block1) if_block1.m(target, anchor)
        insert_dev(target, if_block1_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = listen_dev(
            form,
            'submit',
            /*handleSubmit*/ ctx[18],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          current_block_type ===
            (current_block_type = select_block_type(ctx)) &&
          if_block0
        ) {
          if_block0.p(ctx, dirty)
        } else {
          if (if_block0) if_block0.d(1)
          if_block0 = current_block_type && current_block_type(ctx)

          if (if_block0) {
            if_block0.c()
            if_block0.m(form, t0)
          }
        }

        const formline0_changes = {}

        if ((dirty[0] & /*imageName*/ 1) | (dirty[1] & /*$$scope*/ 131072)) {
          formline0_changes.$$scope = { dirty, ctx }
        }

        formline0.$set(formline0_changes)
        const formline1_changes = {}

        if (
          (dirty[0] & /*namespaces, namespace*/ 8200) |
          (dirty[1] & /*$$scope*/ 131072)
        ) {
          formline1_changes.$$scope = { dirty, ctx }
        }

        formline1.$set(formline1_changes)
        const formline2_changes = {}

        if (
          (dirty[0] & /*collectionIDs, collectionID*/ 16400) |
          (dirty[1] & /*$$scope*/ 131072)
        ) {
          formline2_changes.$$scope = { dirty, ctx }
        }

        formline2.$set(formline2_changes)
        const formline3_changes = {}

        if ((dirty[0] & /*imageID*/ 32) | (dirty[1] & /*$$scope*/ 131072)) {
          formline3_changes.$$scope = { dirty, ctx }
        }

        formline3.$set(formline3_changes)
        const formline4_changes = {}

        if (
          (dirty[0] & /*previewErrored, imageUrl*/ 258) |
          (dirty[1] & /*$$scope*/ 131072)
        ) {
          formline4_changes.$$scope = { dirty, ctx }
        }

        formline4.$set(formline4_changes)
        const formline5_changes = {}

        if ((dirty[0] & /*protocol*/ 64) | (dirty[1] & /*$$scope*/ 131072)) {
          formline5_changes.$$scope = { dirty, ctx }
        }

        formline5.$set(formline5_changes)
        const formline6_changes = {}

        if (
          (dirty[0] & /*statusMessage, errorMessage, complete*/ 98308) |
          (dirty[1] & /*$$scope*/ 131072)
        ) {
          formline6_changes.$$scope = { dirty, ctx }
        }

        formline6.$set(formline6_changes)

        if (!current || dirty[0] & /*previewVisible*/ 128) {
          toggle_class(div2, 'visible', /*previewVisible*/ ctx[7])
        }

        if (/*showModal*/ ctx[10]) {
          if (if_block1) {
            if_block1.p(ctx, dirty)

            if (dirty[0] & /*showModal*/ 1024) {
              transition_in(if_block1, 1)
            }
          } else {
            if_block1 = create_if_block$7(ctx)
            if_block1.c()
            transition_in(if_block1, 1)
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor)
          }
        } else if (if_block1) {
          group_outros()

          transition_out(if_block1, 1, 1, () => {
            if_block1 = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(formline0.$$.fragment, local)
        transition_in(formline1.$$.fragment, local)
        transition_in(formline2.$$.fragment, local)
        transition_in(formline3.$$.fragment, local)
        transition_in(formline4.$$.fragment, local)
        transition_in(formline5.$$.fragment, local)
        transition_in(formline6.$$.fragment, local)
        transition_in(if_block1)
        current = true
      },
      o: function outro(local) {
        transition_out(formline0.$$.fragment, local)
        transition_out(formline1.$$.fragment, local)
        transition_out(formline2.$$.fragment, local)
        transition_out(formline3.$$.fragment, local)
        transition_out(formline4.$$.fragment, local)
        transition_out(formline5.$$.fragment, local)
        transition_out(formline6.$$.fragment, local)
        transition_out(if_block1)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div5)

        if (if_block0) {
          if_block0.d()
        }

        destroy_component(formline0)
        destroy_component(formline1)
        destroy_component(formline2)
        destroy_component(formline3)
        destroy_component(formline4)
        destroy_component(formline5)
        destroy_component(formline6)
        if (detaching) detach_dev(t10)
        if (if_block1) if_block1.d(detaching)
        if (detaching) detach_dev(if_block1_anchor)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$e.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$e($$self, $$props, $$invalidate) {
    let validNames
    let validSource
    let complete
    let errorMessage
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('IngestImage', slots, [])
    let { id_col } = $$props
    let collection = ''
    let imageName = ''
    let imageUrl = ''
    let external = true
    let protocol = 'static'
    let statusMessage = null,
      timeoutHandle = null
    let collectionRef, imageNameRef
    let collections = []
    let nameExists = false

    let previewViewer = undefined,
      viewerOpts = undefined,
      previewVisible = false,
      previewErrored = false

    let colinfo,
      colimages = [],
      err = 'Loading information about the collection...'
    let showModal = false,
      modalHeader,
      modalText

    let namespace = '',
      namespaces = [],
      collectionID = '',
      collectionIDs = [],
      imageID = ''

    onMount(async () => {
      const query = new URLSearchParams(location.search)

      if (query.has('collection')) {
        if (ctsUrn_1(query.get('collection'), { noPassage: true })) {
          $$invalidate(20, (collection = query.get('collection')))
          imageNameRef.focus()
        } else {
          query.delete('collection')
          navigate(`/ingest?${query.toString()}`, { replace: true })
        }
      } // collectionRef.focus()

      await fetchCollectionImages()
      await fetchCollectionInfo()
    }) //await getDZIcollection()

    async function displayExternalMedia(imageUrl) {
      try {
        const [isManifest, imageManifest] = await isIIIFImage(imageUrl)

        if (isManifest) {
          $$invalidate(25, (viewerOpts = getIIIFOpts('preview', imageManifest)))
          $$invalidate(6, (protocol = 'iiif'))
        } else {
          $$invalidate(25, (viewerOpts = getStaticOpts('preview', imageUrl)))
          $$invalidate(6, (protocol = 'static'))
        }
      } catch (err) {
        if (!err.message.includes('NetworkError')) {
          console.error(err.message)
        }

        $$invalidate(25, (viewerOpts = getStaticOpts('preview', imageUrl)))
        $$invalidate(6, (protocol = 'static'))
      }
    }

    async function getDZIcollection() {
      const bucketName = 'brucheion'
      const prefix = 'nbh/J1img/positive/'

      // const prefix = '';
      const dziCollection = await listDZIcollection(bucketName, prefix)

      console.log(
        'List of DZI files with folder paths and names:',
        dziCollection
      )
    }

    function createViewer(opts) {
      const { tileSources, ...otherOpts } = opts
      $$invalidate(24, (previewViewer = openseadragon(otherOpts)))

      previewViewer.addHandler('open-failed', () => {
        $$invalidate(7, (previewVisible = false))
        previewViewer.destroy()
        $$invalidate(8, (previewErrored = true))
      })

      previewViewer.addHandler('open', () => {
        $$invalidate(7, (previewVisible = true))
      })

      previewViewer.open(tileSources)
    }

    // ready
    async function fetchCollectionImages() {
      const res = await fetch(`/api/v1/collectionimages/${id_col}`)

      if (res.ok) {
        $$invalidate(22, (collections = (await res.json()).data))
      } else {
        throw new Error(res.body)
      }
    }

    async function fetchCollectionInfo() {
      const res = await fetch(`/api/v1/collection/${id_col}`)

      if (res.ok) {
        $$invalidate(9, (colinfo = (await res.json()).data))
      } else {
        throw new Error(res.body) //  console.log('colinfo', colinfo)
      }
    }

    async function handleSubmit(event) {
      event.preventDefault()

      if (!complete) {
        return
      }

      let query = {
        colid: parseInt(id_col),
        imagename: imageName,
        colname: collection,
        protocol,
        license: 'CC-BY-4.0',
        external,
        location: imageUrl,
      }

      const res = await fetch('/api/v2/addimagetocite', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(query),
      })

      if (res.ok) {
        $$invalidate(11, (modalHeader = 'Success'))
        $$invalidate(
          12,
          (modalText = 'The image has been saved to the image collection')
        )
        $$invalidate(10, (showModal = true))
      } else {
        // Handle error
        console.error(
          `Ingestion failed: HTTP ${res.status} ${await res.text()}`
        ) // showMetadata = false

        $$invalidate(11, (modalHeader = 'Error'))
        $$invalidate(12, (modalText = 'An error occurred. Please try later.'))
        $$invalidate(10, (showModal = true))
        return
      }
    }

    $$self.$$.on_mount.push(function () {
      if (
        id_col === undefined &&
        !('id_col' in $$props || $$self.$$.bound[$$self.$$.props['id_col']])
      ) {
        console_1$6.warn(
          "<IngestImage> was created without expected prop 'id_col'"
        )
      }
    })

    const writable_props = ['id_col']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$6.warn(`<IngestImage> was created with unknown prop '${key}'`)
    })

    function textinput_value_binding(value) {
      imageName = value
      ;(($$invalidate(0, imageName), $$invalidate(3, namespace)),
      $$invalidate(4, collectionID)),
        $$invalidate(5, imageID)
    }

    const func = (value) => ctsUrn_3(value)

    function textinput_value_binding_1(value) {
      namespace = value
      $$invalidate(3, namespace)
    }

    const func_1 = (value) => ctsUrn_3(value)

    function textinput_value_binding_2(value) {
      collectionID = value
      $$invalidate(4, collectionID)
    }

    const func_2 = (value) => ctsUrn_3(value)

    function textinput_value_binding_3(value) {
      imageID = value
      $$invalidate(5, imageID)
    }

    const func_3 = (value) => ctsUrn_1(value) || validateHttpUrl(value)

    function textinput_value_binding_4(value) {
      imageUrl = value
      $$invalidate(1, imageUrl)
    }

    function select_change_handler() {
      protocol = select_value(this)
      ;($$invalidate(6, protocol), $$invalidate(26, validSource)),
        $$invalidate(1, imageUrl)
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(10, showModal)
    }

    $$self.$$set = ($$props) => {
      if ('id_col' in $$props) $$invalidate(19, (id_col = $$props.id_col))
    }

    $$self.$capture_state = () => ({
      OpenSeadragon: openseadragon,
      onMount,
      navigate,
      FormLine,
      Message,
      validateUrn: ctsUrn_1,
      validateNoColon: ctsUrn_3,
      TextInput,
      validateHttpUrl,
      isIIIFImage,
      getStaticOpts,
      getIIIFOpts,
      getInternalOpts,
      Modal,
      listDZIFiles,
      s3_bucket_url_js,
      listDZIcollection,
      id_col,
      collection,
      imageName,
      imageUrl,
      external,
      protocol,
      statusMessage,
      timeoutHandle,
      collectionRef,
      imageNameRef,
      collections,
      nameExists,
      previewViewer,
      viewerOpts,
      previewVisible,
      previewErrored,
      colinfo,
      colimages,
      err,
      showModal,
      modalHeader,
      modalText,
      namespace,
      namespaces,
      collectionID,
      collectionIDs,
      imageID,
      displayExternalMedia,
      getDZIcollection,
      createViewer,
      fetchCollectionImages,
      fetchCollectionInfo,
      handleSubmit,
      complete,
      validSource,
      validNames,
      errorMessage,
    })

    $$self.$inject_state = ($$props) => {
      if ('id_col' in $$props) $$invalidate(19, (id_col = $$props.id_col))
      if ('collection' in $$props)
        $$invalidate(20, (collection = $$props.collection))
      if ('imageName' in $$props)
        $$invalidate(0, (imageName = $$props.imageName))
      if ('imageUrl' in $$props) $$invalidate(1, (imageUrl = $$props.imageUrl))
      if ('external' in $$props) external = $$props.external
      if ('protocol' in $$props) $$invalidate(6, (protocol = $$props.protocol))
      if ('statusMessage' in $$props)
        $$invalidate(2, (statusMessage = $$props.statusMessage))
      if ('timeoutHandle' in $$props)
        $$invalidate(21, (timeoutHandle = $$props.timeoutHandle))
      if ('collectionRef' in $$props) collectionRef = $$props.collectionRef
      if ('imageNameRef' in $$props) imageNameRef = $$props.imageNameRef
      if ('collections' in $$props)
        $$invalidate(22, (collections = $$props.collections))
      if ('nameExists' in $$props)
        $$invalidate(23, (nameExists = $$props.nameExists))
      if ('previewViewer' in $$props)
        $$invalidate(24, (previewViewer = $$props.previewViewer))
      if ('viewerOpts' in $$props)
        $$invalidate(25, (viewerOpts = $$props.viewerOpts))
      if ('previewVisible' in $$props)
        $$invalidate(7, (previewVisible = $$props.previewVisible))
      if ('previewErrored' in $$props)
        $$invalidate(8, (previewErrored = $$props.previewErrored))
      if ('colinfo' in $$props) $$invalidate(9, (colinfo = $$props.colinfo))
      if ('colimages' in $$props) colimages = $$props.colimages
      if ('err' in $$props) $$invalidate(17, (err = $$props.err))
      if ('showModal' in $$props)
        $$invalidate(10, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(11, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(12, (modalText = $$props.modalText))
      if ('namespace' in $$props)
        $$invalidate(3, (namespace = $$props.namespace))
      if ('namespaces' in $$props)
        $$invalidate(13, (namespaces = $$props.namespaces))
      if ('collectionID' in $$props)
        $$invalidate(4, (collectionID = $$props.collectionID))
      if ('collectionIDs' in $$props)
        $$invalidate(14, (collectionIDs = $$props.collectionIDs))
      if ('imageID' in $$props) $$invalidate(5, (imageID = $$props.imageID))
      if ('complete' in $$props) $$invalidate(15, (complete = $$props.complete))
      if ('validSource' in $$props)
        $$invalidate(26, (validSource = $$props.validSource))
      if ('validNames' in $$props)
        $$invalidate(27, (validNames = $$props.validNames))
      if ('errorMessage' in $$props)
        $$invalidate(16, (errorMessage = $$props.errorMessage))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty[0] & /*namespace, collectionID, imageID*/ 56) {
        $$invalidate(
          0,
          (imageName =
            'urn:cite2:' + namespace + ':' + collectionID + ':' + imageID)
        )
      }

      if ($$self.$$.dirty[0] & /*namespace, collectionID*/ 24) {
        $$invalidate(
          20,
          (collection = 'urn:cite2:' + namespace + ':' + collectionID + ':')
        )
      }

      if ($$self.$$.dirty[0] & /*collection, imageName*/ 1048577) {
        $$invalidate(
          27,
          (validNames =
            ctsUrn_1(collection, { noPassage: true }) && ctsUrn_1(imageName))
        )
      }

      if ($$self.$$.dirty[0] & /*imageUrl*/ 2) {
        $$invalidate(
          26,
          (validSource = ctsUrn_1(imageUrl) || validateHttpUrl(imageUrl))
        )
      }

      if ($$self.$$.dirty[0] & /*validNames, validSource*/ 201326592) {
        $$invalidate(15, (complete = validNames && validSource))
      }

      if ($$self.$$.dirty[0] & /*statusMessage, timeoutHandle*/ 2097156) {
        if (statusMessage !== null) {
          clearTimeout(timeoutHandle)
          $$invalidate(
            21,
            (timeoutHandle = setTimeout(
              () => $$invalidate(2, (statusMessage = null)),
              10000
            ))
          )
        }
      }

      if ($$self.$$.dirty[0] & /*statusMessage*/ 4) {
        $$invalidate(
          16,
          (errorMessage =
            statusMessage && statusMessage.toLowerCase().includes('error'))
        )
      }

      if ($$self.$$.dirty[0] & /*imageUrl*/ 2) {
        external = !ctsUrn_1(imageUrl)
      }

      if (
        $$self.$$.dirty[0] & /*validNames, collections, nameExists*/ 146800640
      ) {
        if (validNames) {
          // fetch(`/api/v2/imageinfo/${id_col}/${collection}/${imageName}`).then(
          //   async (res) => {
          //     const imageInfo = await res.json()
          //     nameExists = !!imageInfo.data.imagename
          //   }
          // )
          $$invalidate(23, (nameExists = !!collections.imagename))
        } else if (nameExists) {
          $$invalidate(23, (nameExists = false))
        }
      }

      if ($$self.$$.dirty[0] & /*validSource, imageUrl*/ 67108866) {
        if (validSource) {
          $$invalidate(8, (previewErrored = false))

          if (validateHttpUrl(imageUrl)) {
            displayExternalMedia(imageUrl)
          } else if (ctsUrn_1(imageUrl)) {
            $$invalidate(
              25,
              (viewerOpts = getInternalOpts('preview', imageUrl))
            )
            $$invalidate(6, (protocol = 'localDZ'))
          }
        }
      }

      if ($$self.$$.dirty[0] & /*collections*/ 4194304) {
        if (!!collections) {
          colimages = collections.map((entry) => entry.colname)

          $$invalidate(
            13,
            (namespaces = collections.map((entry) => {
              let urnParts = entry.colname.split(':')

              if (urnParts.length >= 3) {
                return urnParts[2]
              } else {
                return null // or any other default value, or you can exclude it
              }
            }))
          )

          $$invalidate(
            14,
            (collectionIDs = collections.map((entry) => {
              let urnParts = entry.colname.split(':')

              if (urnParts.length >= 4) {
                return urnParts[3]
              } else {
                return null // or any other default value, or you can exclude it
              }
            }))
          )
        }
      }

      if (
        $$self.$$.dirty[0] &
        /*validSource, viewerOpts, previewViewer*/ 117440512
      ) {
        /* We'll need to trick the Svelte reactivity here, since destroying a prior viewer before creating a new one will result
         * in a circular dependency within the $-statement. Hence, above we just create the viewer options and handle viewer
         * lifecycles in the below $-statement.
         */
        if (validSource && viewerOpts) {
          if (previewViewer) {
            $$invalidate(7, (previewVisible = false))
            previewViewer.destroy()
          }

          createViewer(viewerOpts)
        }
      }
    }

    return [
      imageName,
      imageUrl,
      statusMessage,
      namespace,
      collectionID,
      imageID,
      protocol,
      previewVisible,
      previewErrored,
      colinfo,
      showModal,
      modalHeader,
      modalText,
      namespaces,
      collectionIDs,
      complete,
      errorMessage,
      err,
      handleSubmit,
      id_col,
      collection,
      timeoutHandle,
      collections,
      nameExists,
      previewViewer,
      viewerOpts,
      validSource,
      validNames,
      textinput_value_binding,
      func,
      textinput_value_binding_1,
      func_1,
      textinput_value_binding_2,
      func_2,
      textinput_value_binding_3,
      func_3,
      textinput_value_binding_4,
      select_change_handler,
      modal_showModal_binding,
    ]
  }

  class IngestImage extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(
        this,
        options,
        instance$e,
        create_fragment$e,
        safe_not_equal,
        { id_col: 19 },
        null,
        [-1, -1]
      )

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'IngestImage',
        options,
        id: create_fragment$e.name,
      })
    }

    get id_col() {
      throw new Error_1$5(
        "<IngestImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_col(value) {
      throw new Error_1$5(
        "<IngestImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/components/ResizeBarLanscape.svelte generated by Svelte v3.58.0 */
  const file$c = 'src/components/ResizeBarLanscape.svelte'

  function create_fragment$d(ctx) {
    let t
    let div1
    let div0
    let mounted
    let dispose

    const block = {
      c: function create() {
        t = space()
        div1 = element('div')
        div0 = element('div')
        attr_dev(div0, 'class', 'handle svelte-xbaxut')
        add_location(div0, file$c, 78, 2, 1562)
        attr_dev(div1, 'class', 'bar resizing svelte-xbaxut')
        toggle_class(div1, 'active', /*resizing*/ ctx[1])
        add_location(div1, file$c, 73, 0, 1447)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
        insert_dev(target, div1, anchor)
        append_dev(div1, div0)
        /*div1_binding*/ ctx[5](div1)

        if (!mounted) {
          dispose = [
            listen_dev(
              window,
              'mouseup',
              /*handleMouseUp*/ ctx[3],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              div1,
              'mousedown',
              /*handleMouseDown*/ ctx[2],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*resizing*/ 2) {
          toggle_class(div1, 'active', /*resizing*/ ctx[1])
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
        if (detaching) detach_dev(div1)
        /*div1_binding*/ ctx[5](null)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$d.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$d($$self, $$props, $$invalidate) {
    let resizing
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('ResizeBarLanscape', slots, [])
    const dispatch = createEventDispatcher()
    let barElement = undefined,
      innerOffsetY = null

    function handleMouseDown(e) {
      $$invalidate(4, (innerOffsetY = e.y))
      document.addEventListener('mousemove', handleMouseMove, false)
      dispatch('down', {})
    }

    function handleMouseMove(e) {
      dispatch('move', { y: e.y - innerOffsetY })
    }

    function handleMouseUp() {
      $$invalidate(4, (innerOffsetY = null))
      document.removeEventListener('mousemove', handleMouseMove, false)
      dispatch('up')
    }

    const writable_props = []

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(
          `<ResizeBarLanscape> was created with unknown prop '${key}'`
        )
    })

    function div1_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        barElement = $$value
        $$invalidate(0, barElement)
      })
    }

    $$self.$capture_state = () => ({
      createEventDispatcher,
      dispatch,
      barElement,
      innerOffsetY,
      handleMouseDown,
      handleMouseMove,
      handleMouseUp,
      resizing,
    })

    $$self.$inject_state = ($$props) => {
      if ('barElement' in $$props)
        $$invalidate(0, (barElement = $$props.barElement))
      if ('innerOffsetY' in $$props)
        $$invalidate(4, (innerOffsetY = $$props.innerOffsetY))
      if ('resizing' in $$props) $$invalidate(1, (resizing = $$props.resizing))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*innerOffsetY*/ 16) {
        $$invalidate(1, (resizing = innerOffsetY !== null))
      }
    }

    return [
      barElement,
      resizing,
      handleMouseDown,
      handleMouseUp,
      innerOffsetY,
      div1_binding,
    ]
  }

  class ResizeBarLanscape extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$d, create_fragment$d, safe_not_equal, {})

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'ResizeBarLanscape',
        options,
        id: create_fragment$d.name,
      })
    }
  }

  /* src/components/ResizeBarPortrait.svelte generated by Svelte v3.58.0 */
  const file$b = 'src/components/ResizeBarPortrait.svelte'

  function create_fragment$c(ctx) {
    let t
    let div1
    let div0
    let mounted
    let dispose

    const block = {
      c: function create() {
        t = space()
        div1 = element('div')
        div0 = element('div')
        attr_dev(div0, 'class', 'handle svelte-1720ort')
        add_location(div0, file$b, 78, 2, 1579)
        attr_dev(div1, 'class', 'bar resizing svelte-1720ort')
        toggle_class(div1, 'active', /*resizing*/ ctx[1])
        add_location(div1, file$b, 73, 0, 1464)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
        insert_dev(target, div1, anchor)
        append_dev(div1, div0)
        /*div1_binding*/ ctx[5](div1)

        if (!mounted) {
          dispose = [
            listen_dev(
              window,
              'mouseup',
              /*handleMouseUp*/ ctx[3],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              div1,
              'mousedown',
              /*handleMouseDown*/ ctx[2],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*resizing*/ 2) {
          toggle_class(div1, 'active', /*resizing*/ ctx[1])
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
        if (detaching) detach_dev(div1)
        /*div1_binding*/ ctx[5](null)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$c.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$c($$self, $$props, $$invalidate) {
    let resizing
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('ResizeBarPortrait', slots, [])
    const dispatch = createEventDispatcher()
    let barElement = undefined,
      innerOffsetX = null

    function handleMouseDown(e) {
      $$invalidate(4, (innerOffsetX = e.x))
      document.addEventListener('mousemove', handleMouseMove, false)
      dispatch('down', {})
    }

    function handleMouseMove(e) {
      // console.log('!!', e.x, innerOffsetX)
      dispatch('move', { x: e.x - innerOffsetX })
    }

    function handleMouseUp() {
      $$invalidate(4, (innerOffsetX = null))
      document.removeEventListener('mousemove', handleMouseMove, false)
      dispatch('up')
    }

    const writable_props = []

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(
          `<ResizeBarPortrait> was created with unknown prop '${key}'`
        )
    })

    function div1_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        barElement = $$value
        $$invalidate(0, barElement)
      })
    }

    $$self.$capture_state = () => ({
      createEventDispatcher,
      dispatch,
      barElement,
      innerOffsetX,
      handleMouseDown,
      handleMouseMove,
      handleMouseUp,
      resizing,
    })

    $$self.$inject_state = ($$props) => {
      if ('barElement' in $$props)
        $$invalidate(0, (barElement = $$props.barElement))
      if ('innerOffsetX' in $$props)
        $$invalidate(4, (innerOffsetX = $$props.innerOffsetX))
      if ('resizing' in $$props) $$invalidate(1, (resizing = $$props.resizing))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*innerOffsetX*/ 16) {
        $$invalidate(1, (resizing = innerOffsetX !== null))
      }
    }

    return [
      barElement,
      resizing,
      handleMouseDown,
      handleMouseUp,
      innerOffsetX,
      div1_binding,
    ]
  }

  class ResizeBarPortrait extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$c, create_fragment$c, safe_not_equal, {})

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'ResizeBarPortrait',
        options,
        id: create_fragment$c.name,
      })
    }
  }

  /* src/components/LineEditor.svelte generated by Svelte v3.58.0 */

  const { console: console_1$5 } = globals
  const file$a = 'src/components/LineEditor.svelte'

  function get_each_context$4(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[9] = list[i]
    child_ctx[11] = i
    return child_ctx
  }

  // (195:4) {#if transcriptionEditNav && lineIndex == i}
  function create_if_block$6(ctx) {
    let div
    let a0
    let t0
    let i0
    let t1
    let a1
    let t2
    let i1
    let t3
    let a2
    let t4
    let i2
    let mounted
    let dispose

    const block = {
      c: function create() {
        div = element('div')
        a0 = element('a')
        t0 = text('Add\n          ')
        i0 = element('i')
        t1 = space()
        a1 = element('a')
        t2 = text('Add\n          ')
        i1 = element('i')
        t3 = space()
        a2 = element('a')
        t4 = text('Del\n          ')
        i2 = element('i')
        attr_dev(i0, 'class', 'fa fa-level-up fa-lg')
        add_location(i0, file$a, 202, 10, 5052)
        attr_dev(a0, 'class', 'btn btn_toolbar tip my-2 my-sm-0 svelte-hj08zx')
        attr_dev(a0, 'data-title', 'This button will insert one line above')
        attr_dev(a0, 'href', '#top')
        add_location(a0, file$a, 196, 8, 4837)
        attr_dev(i1, 'class', 'fa fa-level-down fa-lg')
        add_location(i1, file$a, 211, 10, 5393)
        attr_dev(a1, 'class', 'btn btn_toolbar tip my-2 my-sm-0 svelte-hj08zx')
        attr_dev(a1, 'data-title', 'This button will insert one line below')
        attr_dev(a1, 'href', '#top')
        add_location(a1, file$a, 205, 8, 5179)
        attr_dev(i2, 'class', 'fa fa-remove fa-lg')
        add_location(i2, file$a, 220, 10, 5733)
        attr_dev(a2, 'class', 'btn btn_toolbar tip my-2 my-sm-0 svelte-hj08zx')
        attr_dev(a2, 'data-title', 'This button will delete the current line')
        attr_dev(a2, 'href', '#top')
        add_location(a2, file$a, 214, 8, 5522)
        attr_dev(div, 'class', 'row toolbar_editor svelte-hj08zx')
        add_location(div, file$a, 195, 6, 4796)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, a0)
        append_dev(a0, t0)
        append_dev(a0, i0)
        append_dev(div, t1)
        append_dev(div, a1)
        append_dev(a1, t2)
        append_dev(a1, i1)
        append_dev(div, t3)
        append_dev(div, a2)
        append_dev(a2, t4)
        append_dev(a2, i2)

        if (!mounted) {
          dispose = [
            listen_dev(
              a0,
              'click',
              /*handleEditorAddLineBeforeClick*/ ctx[6],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              a1,
              'click',
              /*handleEditorAddLineAfterClick*/ ctx[7],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              a2,
              'click',
              /*handleEditorDelLineClick*/ ctx[8],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$6.name,
      type: 'if',
      source: '(195:4) {#if transcriptionEditNav && lineIndex == i}',
      ctx,
    })

    return block
  }

  // (194:2) {#each currentTranscriptionLines as line, i}
  function create_each_block$4(ctx) {
    let t0
    let div
    let span0
    let t1_value = /*transcriptionLineNumbers*/ ctx[5][/*i*/ ctx[11]] + ''
    let t1
    let t2
    let t3
    let span1
    let t4_value = /*line*/ ctx[9] + ''
    let t4
    let span1_contenteditable_value
    let t5
    let if_block =
      /*transcriptionEditNav*/ ctx[2] &&
      /*lineIndex*/ ctx[1] == /*i*/ ctx[11] &&
      create_if_block$6(ctx)

    const block = {
      c: function create() {
        if (if_block) if_block.c()
        t0 = space()
        div = element('div')
        span0 = element('span')
        t1 = text(t1_value)
        t2 = text(':')
        t3 = space()
        span1 = element('span')
        t4 = text(t4_value)
        t5 = space()
        attr_dev(span0, 'class', 'font-weight-bold')
        set_style(span0, 'display', 'table-cell')
        set_style(span0, 'width', '40px')
        add_location(span0, file$a, 226, 6, 5891)
        set_style(span1, 'margin-left', '25px')
        set_style(span1, 'display', 'table-cell')
        set_style(span1, 'webkit-line-break', 'normal')
        attr_dev(
          span1,
          'contenteditable',
          (span1_contenteditable_value = `${
            /*isLineEditor*/ ctx[3] ? true : false
          }`)
        )
        attr_dev(span1, 'data-index', /*i*/ ctx[11])
        add_location(span1, file$a, 229, 6, 6024)
        add_location(div, file$a, 225, 4, 5879)
      },
      m: function mount(target, anchor) {
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, t0, anchor)
        insert_dev(target, div, anchor)
        append_dev(div, span0)
        append_dev(span0, t1)
        append_dev(span0, t2)
        append_dev(div, t3)
        append_dev(div, span1)
        append_dev(span1, t4)
        append_dev(div, t5)
      },
      p: function update(ctx, dirty) {
        if (
          /*transcriptionEditNav*/ ctx[2] &&
          /*lineIndex*/ ctx[1] == /*i*/ ctx[11]
        ) {
          if (if_block) {
            if_block.p(ctx, dirty)
          } else {
            if_block = create_if_block$6(ctx)
            if_block.c()
            if_block.m(t0.parentNode, t0)
          }
        } else if (if_block) {
          if_block.d(1)
          if_block = null
        }

        if (
          dirty & /*transcriptionLineNumbers*/ 32 &&
          t1_value !==
            (t1_value = /*transcriptionLineNumbers*/ ctx[5][/*i*/ ctx[11]] + '')
        )
          set_data_dev(t1, t1_value)
        if (
          dirty & /*currentTranscriptionLines*/ 1 &&
          t4_value !== (t4_value = /*line*/ ctx[9] + '')
        )
          set_data_maybe_contenteditable_dev(
            t4,
            t4_value,
            `${/*isLineEditor*/ ctx[3] ? true : false}`
          )

        if (
          dirty & /*isLineEditor*/ 8 &&
          span1_contenteditable_value !==
            (span1_contenteditable_value = `${
              /*isLineEditor*/ ctx[3] ? true : false
            }`)
        ) {
          attr_dev(span1, 'contenteditable', span1_contenteditable_value)
        }
      },
      d: function destroy(detaching) {
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(t0)
        if (detaching) detach_dev(div)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block$4.name,
      type: 'each',
      source: '(194:2) {#each currentTranscriptionLines as line, i}',
      ctx,
    })

    return block
  }

  function create_fragment$b(ctx) {
    let div
    let each_value = /*currentTranscriptionLines*/ ctx[0]
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$4(
        get_each_context$4(ctx, each_value, i)
      )
    }

    const block = {
      c: function create() {
        div = element('div')

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        attr_dev(div, 'class', 'transcription')
        set_style(div, 'font-size', /*transcriptionFontSize*/ ctx[4])
        add_location(div, file$a, 192, 0, 4622)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div, null)
          }
        }
      },
      p: function update(ctx, [dirty]) {
        if (
          dirty &
          /*isLineEditor, currentTranscriptionLines, transcriptionLineNumbers, handleEditorDelLineClick, handleEditorAddLineAfterClick, handleEditorAddLineBeforeClick, transcriptionEditNav, lineIndex*/ 495
        ) {
          each_value = /*currentTranscriptionLines*/ ctx[0]
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$4(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block$4(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(div, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value.length
        }

        if (dirty & /*transcriptionFontSize*/ 16) {
          set_style(div, 'font-size', /*transcriptionFontSize*/ ctx[4])
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        destroy_each(each_blocks, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$b.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function updateLineNumber(strarray) {
    let count = 0
    let lineNumbers = []

    strarray.forEach((line, index) => {
      let val = getNumeralBeforeClosingBrace(line)

      if (val > 0) {
        count = val
      } else if (val === null) {
        count = count + 1
      } else {
        count = 1
      }

      lineNumbers.push(count)
    })

    // console.log('!!!!', lineNumbers)
    return lineNumbers
  }

  function getNumeralBeforeClosingBrace(code) {
    const closingBraceIndex = code.indexOf('}')

    if (closingBraceIndex === -1 || closingBraceIndex === 0) {
      return null
    } else {
      let numeral = ''
      let i = closingBraceIndex - 1

      while (i >= 0 && /[0-9]/.test(code.charAt(i))) {
        numeral = code.charAt(i) + numeral
        i--
      }

      return numeral === '' ? null : parseInt(numeral, 10)
    }
  }

  function instance$b($$self, $$props, $$invalidate) {
    let transcriptionLineNumbers
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('LineEditor', slots, [])
    let { lineIndex } = $$props
    let { transcriptionEditNav } = $$props
    let { currentTranscriptionLines = [] } = $$props
    let { isLineEditor } = $$props
    let { transcriptionFontSize } = $$props

    // $: console.log(
    //   'Selected line index:',
    //   lineIndex,
    //   currentTranscriptionLines.length,
    //   currentTranscriptionLines,
    //   isLineEditor
    // )
    function handleEditorAddLineBeforeClick() {
      currentTranscriptionLines.splice(lineIndex, 0, '#')
      $$invalidate(
        0,
        (currentTranscriptionLines = [...currentTranscriptionLines])
      )
      console.log(
        '!handleEditorAddLineBeforeClick',
        lineIndex,
        currentTranscriptionLines
      )
    }

    function handleEditorAddLineAfterClick() {
      currentTranscriptionLines.splice(parseInt(lineIndex) + 1, 0, '#')
      $$invalidate(
        0,
        (currentTranscriptionLines = [...currentTranscriptionLines])
      )
      $$invalidate(1, (lineIndex = parseInt(lineIndex) + 1))
      console.log(
        '!handleEditorAddLineAfterClick',
        lineIndex,
        currentTranscriptionLines
      )
    }

    function handleEditorDelLineClick() {
      currentTranscriptionLines.splice(lineIndex, 1)
      $$invalidate(
        0,
        (currentTranscriptionLines = [...currentTranscriptionLines])
      )
    } //  passage.transcriptionlines = currentTranscriptionLines.map((obj) => obj.line)

    $$self.$$.on_mount.push(function () {
      if (
        lineIndex === undefined &&
        !(
          'lineIndex' in $$props ||
          $$self.$$.bound[$$self.$$.props['lineIndex']]
        )
      ) {
        console_1$5.warn(
          "<LineEditor> was created without expected prop 'lineIndex'"
        )
      }

      if (
        transcriptionEditNav === undefined &&
        !(
          'transcriptionEditNav' in $$props ||
          $$self.$$.bound[$$self.$$.props['transcriptionEditNav']]
        )
      ) {
        console_1$5.warn(
          "<LineEditor> was created without expected prop 'transcriptionEditNav'"
        )
      }

      if (
        isLineEditor === undefined &&
        !(
          'isLineEditor' in $$props ||
          $$self.$$.bound[$$self.$$.props['isLineEditor']]
        )
      ) {
        console_1$5.warn(
          "<LineEditor> was created without expected prop 'isLineEditor'"
        )
      }

      if (
        transcriptionFontSize === undefined &&
        !(
          'transcriptionFontSize' in $$props ||
          $$self.$$.bound[$$self.$$.props['transcriptionFontSize']]
        )
      ) {
        console_1$5.warn(
          "<LineEditor> was created without expected prop 'transcriptionFontSize'"
        )
      }
    })

    const writable_props = [
      'lineIndex',
      'transcriptionEditNav',
      'currentTranscriptionLines',
      'isLineEditor',
      'transcriptionFontSize',
    ]

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$5.warn(`<LineEditor> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('lineIndex' in $$props)
        $$invalidate(1, (lineIndex = $$props.lineIndex))
      if ('transcriptionEditNav' in $$props)
        $$invalidate(2, (transcriptionEditNav = $$props.transcriptionEditNav))
      if ('currentTranscriptionLines' in $$props)
        $$invalidate(
          0,
          (currentTranscriptionLines = $$props.currentTranscriptionLines)
        )
      if ('isLineEditor' in $$props)
        $$invalidate(3, (isLineEditor = $$props.isLineEditor))
      if ('transcriptionFontSize' in $$props)
        $$invalidate(4, (transcriptionFontSize = $$props.transcriptionFontSize))
    }

    $$self.$capture_state = () => ({
      lineIndex,
      transcriptionEditNav,
      currentTranscriptionLines,
      isLineEditor,
      transcriptionFontSize,
      handleEditorAddLineBeforeClick,
      handleEditorAddLineAfterClick,
      handleEditorDelLineClick,
      updateLineNumber,
      getNumeralBeforeClosingBrace,
      transcriptionLineNumbers,
    })

    $$self.$inject_state = ($$props) => {
      if ('lineIndex' in $$props)
        $$invalidate(1, (lineIndex = $$props.lineIndex))
      if ('transcriptionEditNav' in $$props)
        $$invalidate(2, (transcriptionEditNav = $$props.transcriptionEditNav))
      if ('currentTranscriptionLines' in $$props)
        $$invalidate(
          0,
          (currentTranscriptionLines = $$props.currentTranscriptionLines)
        )
      if ('isLineEditor' in $$props)
        $$invalidate(3, (isLineEditor = $$props.isLineEditor))
      if ('transcriptionFontSize' in $$props)
        $$invalidate(4, (transcriptionFontSize = $$props.transcriptionFontSize))
      if ('transcriptionLineNumbers' in $$props)
        $$invalidate(
          5,
          (transcriptionLineNumbers = $$props.transcriptionLineNumbers)
        )
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*currentTranscriptionLines*/ 1) {
        $$invalidate(
          5,
          (transcriptionLineNumbers = updateLineNumber(
            currentTranscriptionLines
          ))
        )
      }

      if ($$self.$$.dirty & /*isLineEditor*/ 8) {
        if (isLineEditor) {
          $$invalidate(2, (transcriptionEditNav = true))
        } else {
          $$invalidate(2, (transcriptionEditNav = false))
        }
      }
    }

    return [
      currentTranscriptionLines,
      lineIndex,
      transcriptionEditNav,
      isLineEditor,
      transcriptionFontSize,
      transcriptionLineNumbers,
      handleEditorAddLineBeforeClick,
      handleEditorAddLineAfterClick,
      handleEditorDelLineClick,
    ]
  }

  class LineEditor extends SvelteComponentDev {
    constructor(options) {
      super(options)

      init(this, options, instance$b, create_fragment$b, safe_not_equal, {
        lineIndex: 1,
        transcriptionEditNav: 2,
        currentTranscriptionLines: 0,
        isLineEditor: 3,
        transcriptionFontSize: 4,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'LineEditor',
        options,
        id: create_fragment$b.name,
      })
    }

    get lineIndex() {
      throw new Error(
        "<LineEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set lineIndex(value) {
      throw new Error(
        "<LineEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get transcriptionEditNav() {
      throw new Error(
        "<LineEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set transcriptionEditNav(value) {
      throw new Error(
        "<LineEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get currentTranscriptionLines() {
      throw new Error(
        "<LineEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set currentTranscriptionLines(value) {
      throw new Error(
        "<LineEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get isLineEditor() {
      throw new Error(
        "<LineEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set isLineEditor(value) {
      throw new Error(
        "<LineEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get transcriptionFontSize() {
      throw new Error(
        "<LineEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set transcriptionFontSize(value) {
      throw new Error(
        "<LineEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/components/BlockEditor.svelte generated by Svelte v3.58.0 */
  const file$9 = 'src/components/BlockEditor.svelte'

  function create_fragment$a(ctx) {
    let div
    let textarea
    let mounted
    let dispose

    const block = {
      c: function create() {
        div = element('div')
        textarea = element('textarea')
        attr_dev(textarea, 'class', 'specialKey svelte-1tx41s4')
        attr_dev(textarea, 'rows', '15')
        attr_dev(textarea, 'name', 'transcription')
        set_style(textarea, 'font-size', /*transcriptionFontSize*/ ctx[1])
        add_location(textarea, file$9, 41, 2, 780)
        attr_dev(div, 'class', 'container svelte-1tx41s4')
        add_location(div, file$9, 40, 0, 754)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, textarea)
        set_input_value(textarea, /*passagetext*/ ctx[0])

        if (!mounted) {
          dispose = [
            listen_dev(textarea, 'input', /*textarea_input_handler*/ ctx[3]),
            listen_dev(
              textarea,
              'change',
              /*updateValue*/ ctx[2],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*transcriptionFontSize*/ 2) {
          set_style(textarea, 'font-size', /*transcriptionFontSize*/ ctx[1])
        }

        if (dirty & /*passagetext*/ 1) {
          set_input_value(textarea, /*passagetext*/ ctx[0])
        }
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$a.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$a($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('BlockEditor', slots, [])
    let { passagetext } = $$props
    let { transcriptionFontSize } = $$props

    // function autoResize(textarea) {
    //   textarea.style.height = 'auto'
    //   textarea.style.height = textarea.scrollHeight + 'px'
    //   console.log('!!!!', textarea.scrollHeight)
    // }
    // on:input={autoResize(this)}
    const dispatch = createEventDispatcher()

    function updateValue(event) {
      const newpassagetext = event.target.value
      dispatch('update', newpassagetext)
    }

    $$self.$$.on_mount.push(function () {
      if (
        passagetext === undefined &&
        !(
          'passagetext' in $$props ||
          $$self.$$.bound[$$self.$$.props['passagetext']]
        )
      ) {
        console.warn(
          "<BlockEditor> was created without expected prop 'passagetext'"
        )
      }

      if (
        transcriptionFontSize === undefined &&
        !(
          'transcriptionFontSize' in $$props ||
          $$self.$$.bound[$$self.$$.props['transcriptionFontSize']]
        )
      ) {
        console.warn(
          "<BlockEditor> was created without expected prop 'transcriptionFontSize'"
        )
      }
    })

    const writable_props = ['passagetext', 'transcriptionFontSize']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<BlockEditor> was created with unknown prop '${key}'`)
    })

    function textarea_input_handler() {
      passagetext = this.value
      $$invalidate(0, passagetext)
    }

    $$self.$$set = ($$props) => {
      if ('passagetext' in $$props)
        $$invalidate(0, (passagetext = $$props.passagetext))
      if ('transcriptionFontSize' in $$props)
        $$invalidate(1, (transcriptionFontSize = $$props.transcriptionFontSize))
    }

    $$self.$capture_state = () => ({
      passagetext,
      transcriptionFontSize,
      createEventDispatcher,
      dispatch,
      updateValue,
    })

    $$self.$inject_state = ($$props) => {
      if ('passagetext' in $$props)
        $$invalidate(0, (passagetext = $$props.passagetext))
      if ('transcriptionFontSize' in $$props)
        $$invalidate(1, (transcriptionFontSize = $$props.transcriptionFontSize))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [
      passagetext,
      transcriptionFontSize,
      updateValue,
      textarea_input_handler,
    ]
  }

  class BlockEditor extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$a, create_fragment$a, safe_not_equal, {
        passagetext: 0,
        transcriptionFontSize: 1,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'BlockEditor',
        options,
        id: create_fragment$a.name,
      })
    }

    get passagetext() {
      throw new Error(
        "<BlockEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set passagetext(value) {
      throw new Error(
        "<BlockEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get transcriptionFontSize() {
      throw new Error(
        "<BlockEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set transcriptionFontSize(value) {
      throw new Error(
        "<BlockEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/components/MetadataEditor.svelte generated by Svelte v3.58.0 */
  const file$8 = 'src/components/MetadataEditor.svelte'

  // (212:0) {#if showModal}
  function create_if_block$5(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[16](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot$2],
        default: [create_default_slot$3],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[2] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[2]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (dirty & /*$$scope, modalHeader, modalText*/ 131096) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty & /*showModal*/ 4) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[2]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$5.name,
      type: 'if',
      source: '(212:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (213:2) <Modal bind:showModal>
  function create_default_slot$3(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[4])
        add_location(h4, file$8, 215, 6, 4976)
        add_location(body, file$8, 214, 4, 4963)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalText*/ 16) set_data_dev(t, /*modalText*/ ctx[4])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$3.name,
      type: 'slot',
      source: '(213:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (214:4)
  function create_header_slot$2(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[3])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$8, 213, 4, 4922)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalHeader*/ 8) set_data_dev(t, /*modalHeader*/ ctx[3])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot$2.name,
      type: 'slot',
      source: '(214:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$9(ctx) {
    let form
    let dl
    let dt0
    let t0
    let i0
    let t1
    let dd0
    let input0
    let t2
    let dt1
    let t3
    let i1
    let t4
    let dd1
    let input1
    let input1_readonly_value
    let t5
    let dt2
    let t6
    let i2
    let t7
    let dd2
    let input2
    let input2_readonly_value
    let t8
    let dt3
    let t9
    let i3
    let t10
    let dd3
    let input3
    let input3_readonly_value
    let t11
    let dt4
    let t12
    let i4
    let t13
    let dd4
    let input4
    let input4_readonly_value
    let t14
    let dt5
    let t15
    let i5
    let t16
    let dd5
    let input5
    let input5_readonly_value
    let t17
    let dt6
    let t18
    let i6
    let t19
    let dd6
    let input6
    let input6_readonly_value
    let t20
    let dt7
    let t21
    let i7
    let t22
    let dd7
    let input7
    let input7_readonly_value
    let t23
    let if_block_anchor
    let current
    let mounted
    let dispose
    let if_block = /*showModal*/ ctx[2] && create_if_block$5(ctx)

    const block = {
      c: function create() {
        form = element('form')
        dl = element('dl')
        dt0 = element('dt')
        t0 = text('Work URN\n      ')
        i0 = element('i')
        t1 = space()
        dd0 = element('dd')
        input0 = element('input')
        t2 = space()
        dt1 = element('dt')
        t3 = text('Scheme\n      ')
        i1 = element('i')
        t4 = space()
        dd1 = element('dd')
        input1 = element('input')
        t5 = space()
        dt2 = element('dt')
        t6 = text('Workgroup\n      ')
        i2 = element('i')
        t7 = space()
        dd2 = element('dd')
        input2 = element('input')
        t8 = space()
        dt3 = element('dt')
        t9 = text('Title\n      ')
        i3 = element('i')
        t10 = space()
        dd3 = element('dd')
        input3 = element('input')
        t11 = space()
        dt4 = element('dt')
        t12 = text('Version\n      ')
        i4 = element('i')
        t13 = space()
        dd4 = element('dd')
        input4 = element('input')
        t14 = space()
        dt5 = element('dt')
        t15 = text('Exemplar\n      ')
        i5 = element('i')
        t16 = space()
        dd5 = element('dd')
        input5 = element('input')
        t17 = space()
        dt6 = element('dt')
        t18 = text('Online\n      ')
        i6 = element('i')
        t19 = space()
        dd6 = element('dd')
        input6 = element('input')
        t20 = space()
        dt7 = element('dt')
        t21 = text('Language\n      ')
        i7 = element('i')
        t22 = space()
        dd7 = element('dd')
        input7 = element('input')
        t23 = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
        attr_dev(i0, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i0, 'data-title', 'This field is non-editable')
        add_location(i0, file$8, 107, 6, 2464)
        add_location(dt0, file$8, 105, 4, 2438)
        attr_dev(input0, 'type', 'text')
        attr_dev(input0, 'class', 'form-control')
        input0.readOnly = true
        add_location(input0, file$8, 112, 6, 2583)
        add_location(dd0, file$8, 111, 4, 2572)
        attr_dev(i1, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(
          i1,
          'data-title',
          "Citation scheme of the work for example, 'a.b.c' could resemble 'adhyāya / āhnika / sūtra'"
        )
        add_location(i1, file$8, 120, 6, 2731)
        add_location(dt1, file$8, 118, 4, 2707)
        attr_dev(input1, 'type', 'text')
        attr_dev(input1, 'class', 'form-control')
        input1.readOnly = input1_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input1, file$8, 125, 6, 2914)
        add_location(dd1, file$8, 124, 4, 2903)
        attr_dev(i2, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i2, 'data-title', 'Workgroup in natural language')
        add_location(i2, file$8, 133, 6, 3095)
        add_location(dt2, file$8, 131, 4, 3068)
        attr_dev(input2, 'type', 'text')
        attr_dev(input2, 'class', 'form-control')
        input2.readOnly = input2_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input2, file$8, 138, 6, 3217)
        add_location(dd2, file$8, 137, 4, 3206)
        attr_dev(i3, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i3, 'data-title', 'Title in natural language')
        add_location(i3, file$8, 146, 6, 3389)
        add_location(dt3, file$8, 144, 4, 3366)
        attr_dev(input3, 'type', 'text')
        attr_dev(input3, 'class', 'form-control')
        input3.readOnly = input3_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input3, file$8, 151, 6, 3507)
        add_location(dd3, file$8, 150, 4, 3496)
        attr_dev(i4, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i4, 'data-title', 'Version in natural language')
        add_location(i4, file$8, 159, 6, 3681)
        add_location(dt4, file$8, 157, 4, 3656)
        attr_dev(input4, 'type', 'text')
        attr_dev(input4, 'class', 'form-control')
        input4.readOnly = input4_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input4, file$8, 164, 6, 3801)
        add_location(dd4, file$8, 163, 4, 3790)
        attr_dev(i5, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i5, 'data-title', 'Exemplar in natural language')
        add_location(i5, file$8, 172, 6, 3979)
        add_location(dt5, file$8, 170, 4, 3953)
        attr_dev(input5, 'type', 'text')
        attr_dev(input5, 'class', 'form-control')
        input5.readOnly = input5_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input5, file$8, 177, 6, 4100)
        add_location(dd5, file$8, 176, 4, 4089)
        attr_dev(i6, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i6, 'data-title', "Boolean type; usually 'true' or 'false'")
        add_location(i6, file$8, 185, 6, 4277)
        add_location(dt6, file$8, 183, 4, 4253)
        attr_dev(input6, 'type', 'text')
        attr_dev(input6, 'class', 'form-control')
        input6.readOnly = input6_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input6, file$8, 190, 6, 4409)
        add_location(dd6, file$8, 189, 4, 4398)
        attr_dev(i7, 'class', 'fa fa-question-circle-o svelte-1awclhr')
        attr_dev(i7, 'data-title', 'Language ID')
        add_location(i7, file$8, 198, 6, 4581)
        add_location(dt7, file$8, 196, 4, 4555)
        attr_dev(input7, 'type', 'text')
        attr_dev(input7, 'class', 'form-control')
        input7.readOnly = input7_readonly_value = !(/*canEditMetadata*/ ctx[0])
        add_location(input7, file$8, 201, 6, 4669)
        add_location(dd7, file$8, 200, 4, 4658)
        add_location(dl, file$8, 104, 2, 2429)
        add_location(form, file$8, 103, 0, 2380)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, form, anchor)
        append_dev(form, dl)
        append_dev(dl, dt0)
        append_dev(dt0, t0)
        append_dev(dt0, i0)
        append_dev(dt0, t1)
        append_dev(dl, dd0)
        append_dev(dd0, input0)
        set_input_value(input0, /*formData*/ ctx[1].urn)
        append_dev(dd0, t2)
        append_dev(dl, dt1)
        append_dev(dt1, t3)
        append_dev(dt1, i1)
        append_dev(dt1, t4)
        append_dev(dl, dd1)
        append_dev(dd1, input1)
        set_input_value(input1, /*formData*/ ctx[1].citationScheme)
        append_dev(dd1, t5)
        append_dev(dl, dt2)
        append_dev(dt2, t6)
        append_dev(dt2, i2)
        append_dev(dt2, t7)
        append_dev(dl, dd2)
        append_dev(dd2, input2)
        set_input_value(input2, /*formData*/ ctx[1].groupName)
        append_dev(dd2, t8)
        append_dev(dl, dt3)
        append_dev(dt3, t9)
        append_dev(dt3, i3)
        append_dev(dt3, t10)
        append_dev(dl, dd3)
        append_dev(dd3, input3)
        set_input_value(input3, /*formData*/ ctx[1].workTitle)
        append_dev(dd3, t11)
        append_dev(dl, dt4)
        append_dev(dt4, t12)
        append_dev(dt4, i4)
        append_dev(dt4, t13)
        append_dev(dl, dd4)
        append_dev(dd4, input4)
        set_input_value(input4, /*formData*/ ctx[1].versionLabel)
        append_dev(dd4, t14)
        append_dev(dl, dt5)
        append_dev(dt5, t15)
        append_dev(dt5, i5)
        append_dev(dt5, t16)
        append_dev(dl, dd5)
        append_dev(dd5, input5)
        set_input_value(input5, /*formData*/ ctx[1].exemplarLabel)
        append_dev(dd5, t17)
        append_dev(dl, dt6)
        append_dev(dt6, t18)
        append_dev(dt6, i6)
        append_dev(dt6, t19)
        append_dev(dl, dd6)
        append_dev(dd6, input6)
        set_input_value(input6, /*formData*/ ctx[1].online)
        append_dev(dd6, t20)
        append_dev(dl, dt7)
        append_dev(dt7, t21)
        append_dev(dt7, i7)
        append_dev(dt7, t22)
        append_dev(dl, dd7)
        append_dev(dd7, input7)
        set_input_value(input7, /*formData*/ ctx[1].language)
        insert_dev(target, t23, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(input0, 'input', /*input0_input_handler*/ ctx[8]),
            listen_dev(input1, 'input', /*input1_input_handler*/ ctx[9]),
            listen_dev(input2, 'input', /*input2_input_handler*/ ctx[10]),
            listen_dev(input3, 'input', /*input3_input_handler*/ ctx[11]),
            listen_dev(input4, 'input', /*input4_input_handler*/ ctx[12]),
            listen_dev(input5, 'input', /*input5_input_handler*/ ctx[13]),
            listen_dev(input6, 'input', /*input6_input_handler*/ ctx[14]),
            listen_dev(input7, 'input', /*input7_input_handler*/ ctx[15]),
            listen_dev(
              form,
              'submit',
              prevent_default(/*handleSubmit*/ ctx[5]),
              false,
              true,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (
          dirty & /*formData*/ 2 &&
          input0.value !== /*formData*/ ctx[1].urn
        ) {
          set_input_value(input0, /*formData*/ ctx[1].urn)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input1_readonly_value !==
              (input1_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input1, 'readOnly', input1_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input1.value !== /*formData*/ ctx[1].citationScheme
        ) {
          set_input_value(input1, /*formData*/ ctx[1].citationScheme)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input2_readonly_value !==
              (input2_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input2, 'readOnly', input2_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input2.value !== /*formData*/ ctx[1].groupName
        ) {
          set_input_value(input2, /*formData*/ ctx[1].groupName)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input3_readonly_value !==
              (input3_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input3, 'readOnly', input3_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input3.value !== /*formData*/ ctx[1].workTitle
        ) {
          set_input_value(input3, /*formData*/ ctx[1].workTitle)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input4_readonly_value !==
              (input4_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input4, 'readOnly', input4_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input4.value !== /*formData*/ ctx[1].versionLabel
        ) {
          set_input_value(input4, /*formData*/ ctx[1].versionLabel)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input5_readonly_value !==
              (input5_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input5, 'readOnly', input5_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input5.value !== /*formData*/ ctx[1].exemplarLabel
        ) {
          set_input_value(input5, /*formData*/ ctx[1].exemplarLabel)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input6_readonly_value !==
              (input6_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input6, 'readOnly', input6_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input6.value !== /*formData*/ ctx[1].online
        ) {
          set_input_value(input6, /*formData*/ ctx[1].online)
        }

        if (
          !current ||
          (dirty & /*canEditMetadata*/ 1 &&
            input7_readonly_value !==
              (input7_readonly_value = !(/*canEditMetadata*/ ctx[0])))
        ) {
          prop_dev(input7, 'readOnly', input7_readonly_value)
        }

        if (
          dirty & /*formData*/ 2 &&
          input7.value !== /*formData*/ ctx[1].language
        ) {
          set_input_value(input7, /*formData*/ ctx[1].language)
        }

        if (/*showModal*/ ctx[2]) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty & /*showModal*/ 4) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block$5(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(form)
        if (detaching) detach_dev(t23)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$9.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$9($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('MetadataEditor', slots, [])
    let { passage, savedata, canEditMetadata = false } = $$props

    let formData = {
      urn: '',
      citationScheme: '',
      groupName: '',
      workTitle: '',
      versionLabel: '',
      exemplarLabel: '',
      online: '',
      language: '',
    }

    let showModal = false,
      modalHeader,
      modalText

    onMount(() => {
      $$invalidate(1, (formData = { ...passage.catalog }))
    })

    async function handleSubmit() {
      if (!savedata) return

      // formData.colid= parseInt(id_col)
      // console.log('!!!!!', JSON.stringify(formData))
      const response = await fetch('/api/v2/savemetadata', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })

      if (response.ok) {
        // Handle successful POST action
        $$invalidate(7, (passage.catalog = { ...formData }), passage)

        $$invalidate(3, (modalHeader = 'Success'))
        $$invalidate(4, (modalText = 'Metadata saved'))
        $$invalidate(2, (showModal = true))
      } else {
        // Handle error
        $$invalidate(3, (modalHeader = 'Error')) // showMetadata = false

        $$invalidate(4, (modalText = 'Metadata not saved'))
        $$invalidate(2, (showModal = true))
      }

      $$invalidate(6, (savedata = false))
    }

    $$self.$$.on_mount.push(function () {
      if (
        passage === undefined &&
        !('passage' in $$props || $$self.$$.bound[$$self.$$.props['passage']])
      ) {
        console.warn(
          "<MetadataEditor> was created without expected prop 'passage'"
        )
      }

      if (
        savedata === undefined &&
        !('savedata' in $$props || $$self.$$.bound[$$self.$$.props['savedata']])
      ) {
        console.warn(
          "<MetadataEditor> was created without expected prop 'savedata'"
        )
      }
    })

    const writable_props = ['passage', 'savedata', 'canEditMetadata']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<MetadataEditor> was created with unknown prop '${key}'`)
    })

    function input0_input_handler() {
      formData.urn = this.value
      $$invalidate(1, formData)
    }

    function input1_input_handler() {
      formData.citationScheme = this.value
      $$invalidate(1, formData)
    }

    function input2_input_handler() {
      formData.groupName = this.value
      $$invalidate(1, formData)
    }

    function input3_input_handler() {
      formData.workTitle = this.value
      $$invalidate(1, formData)
    }

    function input4_input_handler() {
      formData.versionLabel = this.value
      $$invalidate(1, formData)
    }

    function input5_input_handler() {
      formData.exemplarLabel = this.value
      $$invalidate(1, formData)
    }

    function input6_input_handler() {
      formData.online = this.value
      $$invalidate(1, formData)
    }

    function input7_input_handler() {
      formData.language = this.value
      $$invalidate(1, formData)
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(2, showModal)
    }

    $$self.$$set = ($$props) => {
      if ('passage' in $$props) $$invalidate(7, (passage = $$props.passage))
      if ('savedata' in $$props) $$invalidate(6, (savedata = $$props.savedata))
      if ('canEditMetadata' in $$props)
        $$invalidate(0, (canEditMetadata = $$props.canEditMetadata))
    }

    $$self.$capture_state = () => ({
      onMount,
      Message,
      Modal,
      passage,
      savedata,
      canEditMetadata,
      formData,
      showModal,
      modalHeader,
      modalText,
      handleSubmit,
    })

    $$self.$inject_state = ($$props) => {
      if ('passage' in $$props) $$invalidate(7, (passage = $$props.passage))
      if ('savedata' in $$props) $$invalidate(6, (savedata = $$props.savedata))
      if ('canEditMetadata' in $$props)
        $$invalidate(0, (canEditMetadata = $$props.canEditMetadata))
      if ('formData' in $$props) $$invalidate(1, (formData = $$props.formData))
      if ('showModal' in $$props)
        $$invalidate(2, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(3, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(4, (modalText = $$props.modalText))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*savedata*/ 64) {
        handleSubmit()
      }
    }

    return [
      canEditMetadata,
      formData,
      showModal,
      modalHeader,
      modalText,
      handleSubmit,
      savedata,
      passage,
      input0_input_handler,
      input1_input_handler,
      input2_input_handler,
      input3_input_handler,
      input4_input_handler,
      input5_input_handler,
      input6_input_handler,
      input7_input_handler,
      modal_showModal_binding,
    ]
  }

  class MetadataEditor extends SvelteComponentDev {
    constructor(options) {
      super(options)

      init(this, options, instance$9, create_fragment$9, safe_not_equal, {
        passage: 7,
        savedata: 6,
        canEditMetadata: 0,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'MetadataEditor',
        options,
        id: create_fragment$9.name,
      })
    }

    get passage() {
      throw new Error(
        "<MetadataEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set passage(value) {
      throw new Error(
        "<MetadataEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get savedata() {
      throw new Error(
        "<MetadataEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set savedata(value) {
      throw new Error(
        "<MetadataEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get canEditMetadata() {
      throw new Error(
        "<MetadataEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set canEditMetadata(value) {
      throw new Error(
        "<MetadataEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/components/ImageEditor.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1$4, console: console_1$4 } = globals
  const file$7 = 'src/components/ImageEditor.svelte'

  function get_each_context$3(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[36] = list[i]
    return child_ctx
  }

  function get_each_context_1$3(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[36] = list[i]
    return child_ctx
  }

  function get_each_context_2$2(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[41] = list[i]
    return child_ctx
  }

  function get_each_context_3(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[44] = list[i]
    return child_ctx
  }

  // (253:14) {#if activeTab === 'local'}
  function create_if_block_2$3(ctx) {
    let div0
    let label0
    let t1
    let select0
    let option0
    let t3
    let div1
    let label1
    let t5
    let select1
    let option1
    let mounted
    let dispose

    function select_block_type(ctx, dirty) {
      if (!!(/*collections*/ ctx[1])) return create_if_block_3$3
      return create_else_block$3
    }

    let current_block_type = select_block_type(ctx)
    let if_block = current_block_type(ctx)
    let each_value_2 = /*filteredImagenames*/ ctx[11]
    validate_each_argument(each_value_2)
    let each_blocks = []

    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2$2(
        get_each_context_2$2(ctx, each_value_2, i)
      )
    }

    const block = {
      c: function create() {
        div0 = element('div')
        label0 = element('label')
        label0.textContent = 'Select Collection:'
        t1 = space()
        select0 = element('select')
        option0 = element('option')
        option0.textContent = 'Choose collection'
        if_block.c()
        t3 = space()
        div1 = element('div')
        label1 = element('label')
        label1.textContent = 'Select Image:'
        t5 = space()
        select1 = element('select')
        option1 = element('option')
        option1.textContent = 'Choose folio'

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        attr_dev(label0, 'for', 'sel1')
        add_location(label0, file$7, 254, 18, 7021)
        option0.disabled = true
        option0.__value = 'Choose collection'
        option0.value = option0.__value
        add_location(option0, file$7, 259, 20, 7247)
        attr_dev(select0, 'class', 'form-control svelte-o820xj')
        attr_dev(select0, 'id', 'image_colSelect')
        if (/*selectedCollection*/ ctx[0] === void 0)
          add_render_callback(() =>
            /*select0_change_handler*/ ctx[22].call(select0)
          )
        add_location(select0, file$7, 255, 18, 7084)
        attr_dev(div0, 'class', 'form-group')
        add_location(div0, file$7, 253, 16, 6978)
        attr_dev(label1, 'for', 'sel1')
        add_location(label1, file$7, 271, 18, 7694)
        option1.disabled = true
        option1.__value = 'Choose folio'
        option1.value = option1.__value
        add_location(option1, file$7, 277, 20, 7960)
        attr_dev(select1, 'class', 'form-control svelte-o820xj')
        attr_dev(select1, 'id', 'image_urnSelect')
        if (/*selectedImage*/ ctx[3] === void 0)
          add_render_callback(() =>
            /*select1_change_handler*/ ctx[23].call(select1)
          )
        add_location(select1, file$7, 272, 18, 7752)
        attr_dev(div1, 'class', 'form-group')
        add_location(div1, file$7, 270, 16, 7651)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div0, anchor)
        append_dev(div0, label0)
        append_dev(div0, t1)
        append_dev(div0, select0)
        append_dev(select0, option0)
        if_block.m(select0, null)
        select_option(select0, /*selectedCollection*/ ctx[0], true)
        insert_dev(target, t3, anchor)
        insert_dev(target, div1, anchor)
        append_dev(div1, label1)
        append_dev(div1, t5)
        append_dev(div1, select1)
        append_dev(select1, option1)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(select1, null)
          }
        }

        select_option(select1, /*selectedImage*/ ctx[3], true)

        if (!mounted) {
          dispose = [
            listen_dev(select0, 'change', /*select0_change_handler*/ ctx[22]),
            listen_dev(select1, 'change', /*select1_change_handler*/ ctx[23]),
            listen_dev(
              select1,
              'change',
              /*handleImageChange*/ ctx[14],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          current_block_type ===
            (current_block_type = select_block_type(ctx)) &&
          if_block
        ) {
          if_block.p(ctx, dirty)
        } else {
          if_block.d(1)
          if_block = current_block_type(ctx)

          if (if_block) {
            if_block.c()
            if_block.m(select0, null)
          }
        }

        if (dirty[0] & /*selectedCollection, colnames*/ 17) {
          select_option(select0, /*selectedCollection*/ ctx[0])
        }

        if (dirty[0] & /*filteredImagenames*/ 2048) {
          each_value_2 = /*filteredImagenames*/ ctx[11]
          validate_each_argument(each_value_2)
          let i

          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2$2(ctx, each_value_2, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block_2$2(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(select1, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value_2.length
        }

        if (dirty[0] & /*selectedImage, filteredImagenames*/ 2056) {
          select_option(select1, /*selectedImage*/ ctx[3])
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div0)
        if_block.d()
        if (detaching) detach_dev(t3)
        if (detaching) detach_dev(div1)
        destroy_each(each_blocks, detaching)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_2$3.name,
      type: 'if',
      source: "(253:14) {#if activeTab === 'local'}",
      ctx,
    })

    return block
  }

  // (265:20) {:else}
  function create_else_block$3(ctx) {
    let option

    const block = {
      c: function create() {
        option = element('option')
        option.textContent = 'No collections'
        option.disabled = true
        option.__value = 'No collections'
        option.value = option.__value
        add_location(option, file$7, 265, 22, 7516)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block$3.name,
      type: 'else',
      source: '(265:20) {:else}',
      ctx,
    })

    return block
  }

  // (261:20) {#if !!collections}
  function create_if_block_3$3(ctx) {
    let each_1_anchor
    let each_value_3 = /*colnames*/ ctx[4]
    validate_each_argument(each_value_3)
    let each_blocks = []

    for (let i = 0; i < each_value_3.length; i += 1) {
      each_blocks[i] = create_each_block_3(
        get_each_context_3(ctx, each_value_3, i)
      )
    }

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*colnames*/ 16) {
          each_value_3 = /*colnames*/ ctx[4]
          validate_each_argument(each_value_3)
          let i

          for (i = 0; i < each_value_3.length; i += 1) {
            const child_ctx = get_each_context_3(ctx, each_value_3, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block_3(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value_3.length
        }
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_3$3.name,
      type: 'if',
      source: '(261:20) {#if !!collections}',
      ctx,
    })

    return block
  }

  // (262:22) {#each colnames as col}
  function create_each_block_3(ctx) {
    let option
    let t_value = /*col*/ ctx[44] + ''
    let t
    let option_value_value

    const block = {
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*col*/ ctx[44]
        option.value = option.__value
        add_location(option, file$7, 262, 24, 7401)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*colnames*/ 16 &&
          t_value !== (t_value = /*col*/ ctx[44] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*colnames*/ 16 &&
          option_value_value !== (option_value_value = /*col*/ ctx[44])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_3.name,
      type: 'each',
      source: '(262:22) {#each colnames as col}',
      ctx,
    })

    return block
  }

  // (279:20) {#each filteredImagenames as imagename}
  function create_each_block_2$2(ctx) {
    let option
    let t_value = /*imagename*/ ctx[41] + ''
    let t
    let option_value_value

    const block = {
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*imagename*/ ctx[41]
        option.value = option.__value
        add_location(option, file$7, 279, 22, 8081)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*filteredImagenames*/ 2048 &&
          t_value !== (t_value = /*imagename*/ ctx[41] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*filteredImagenames*/ 2048 &&
          option_value_value !== (option_value_value = /*imagename*/ ctx[41])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_2$2.name,
      type: 'each',
      source: '(279:20) {#each filteredImagenames as imagename}',
      ctx,
    })

    return block
  }

  // (287:14) {#if activeTab === 's3'}
  function create_if_block_1$3(ctx) {
    let div
    let select
    let option
    let mounted
    let dispose
    let each_value_1 = /*filteredLocalImagenames*/ ctx[10]
    validate_each_argument(each_value_1)
    let each_blocks = []

    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1$3(
        get_each_context_1$3(ctx, each_value_1, i)
      )
    }

    const block = {
      c: function create() {
        div = element('div')
        select = element('select')
        option = element('option')
        option.textContent = '-- select an image --'

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        option.__value = ''
        option.value = option.__value
        add_location(option, file$7, 289, 20, 8447)
        attr_dev(select, 'class', 'form-control svelte-o820xj')
        if (/*selectedImage*/ ctx[3] === void 0)
          add_render_callback(() =>
            /*select_change_handler*/ ctx[24].call(select)
          )
        add_location(select, file$7, 288, 18, 8370)
        attr_dev(div, 'class', 'form-group')
        add_location(div, file$7, 287, 16, 8327)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, select)
        append_dev(select, option)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(select, null)
          }
        }

        select_option(select, /*selectedImage*/ ctx[3], true)

        if (!mounted) {
          dispose = listen_dev(
            select,
            'change',
            /*select_change_handler*/ ctx[24]
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*filteredLocalImagenames*/ 1024) {
          each_value_1 = /*filteredLocalImagenames*/ ctx[10]
          validate_each_argument(each_value_1)
          let i

          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1$3(ctx, each_value_1, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block_1$3(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(select, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value_1.length
        }

        if (dirty[0] & /*selectedImage, filteredImagenames*/ 2056) {
          select_option(select, /*selectedImage*/ ctx[3])
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        destroy_each(each_blocks, detaching)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$3.name,
      type: 'if',
      source: "(287:14) {#if activeTab === 's3'}",
      ctx,
    })

    return block
  }

  // (291:20) {#each filteredLocalImagenames as image}
  function create_each_block_1$3(ctx) {
    let option
    let t_value = /*image*/ ctx[36] + ''
    let t
    let option_value_value

    const block = {
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*image*/ ctx[36]
        option.value = option.__value
        add_location(option, file$7, 291, 22, 8578)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*filteredLocalImagenames*/ 1024 &&
          t_value !== (t_value = /*image*/ ctx[36] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*filteredLocalImagenames*/ 1024 &&
          option_value_value !== (option_value_value = /*image*/ ctx[36])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_1$3.name,
      type: 'each',
      source: '(291:20) {#each filteredLocalImagenames as image}',
      ctx,
    })

    return block
  }

  // (305:14) {#each imageRefs as image}
  function create_each_block$3(ctx) {
    let li
    let div
    let t0_value = /*image*/ ctx[36] + ''
    let t0
    let t1
    let button
    let t3
    let mounted
    let dispose

    function click_handler_2(...args) {
      return /*click_handler_2*/ ctx[25](/*image*/ ctx[36], ...args)
    }

    function click_handler_3(...args) {
      return /*click_handler_3*/ ctx[26](/*image*/ ctx[36], ...args)
    }

    const block = {
      c: function create() {
        li = element('li')
        div = element('div')
        t0 = text(t0_value)
        t1 = space()
        button = element('button')
        button.textContent = 'DEL'
        t3 = space()
        attr_dev(button, 'class', 'btn btn-primary delete-button svelte-o820xj')
        add_location(button, file$7, 314, 20, 9366)
        attr_dev(div, 'class', 'image-item svelte-o820xj')
        add_location(div, file$7, 307, 18, 9120)
        attr_dev(li, 'class', 'svelte-o820xj')
        add_location(li, file$7, 305, 16, 9022)
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor)
        append_dev(li, div)
        append_dev(div, t0)
        append_dev(div, t1)
        append_dev(div, button)
        append_dev(li, t3)

        if (!mounted) {
          dispose = [
            listen_dev(
              button,
              'click',
              click_handler_2,
              false,
              false,
              false,
              false
            ),
            listen_dev(
              div,
              'click',
              click_handler_3,
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        if (
          dirty[0] & /*imageRefs*/ 4 &&
          t0_value !== (t0_value = /*image*/ ctx[36] + '')
        )
          set_data_dev(t0, t0_value)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block$3.name,
      type: 'each',
      source: '(305:14) {#each imageRefs as image}',
      ctx,
    })

    return block
  }

  // (334:0) {#if showModal}
  function create_if_block$4(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[27](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot$1],
        default: [create_default_slot$2],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[6] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[6]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (
          (dirty[0] & /*modalHeader, modalText*/ 384) |
          (dirty[1] & /*$$scope*/ 65536)
        ) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty[0] & /*showModal*/ 64) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[6]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$4.name,
      type: 'if',
      source: '(334:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (335:2) <Modal bind:showModal>
  function create_default_slot$2(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[8])
        add_location(h4, file$7, 338, 6, 9977)
        add_location(body, file$7, 337, 4, 9964)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*modalText*/ 256) set_data_dev(t, /*modalText*/ ctx[8])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$2.name,
      type: 'slot',
      source: '(335:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (336:4)
  function create_header_slot$1(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[7])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$7, 335, 4, 9922)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*modalHeader*/ 128)
          set_data_dev(t, /*modalHeader*/ ctx[7])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot$1.name,
      type: 'slot',
      source: '(336:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$8(ctx) {
    let div6
    let section
    let div5
    let div4
    let div3
    let div2
    let div0
    let ul0
    let li0
    let a0
    let t1
    let li1
    let a1
    let t3
    let div1
    let t4
    let t5
    let button
    let t7
    let ul1
    let t8
    let if_block2_anchor
    let current
    let mounted
    let dispose
    let if_block0 = /*activeTab*/ ctx[5] === 'local' && create_if_block_2$3(ctx)
    let if_block1 = /*activeTab*/ ctx[5] === 's3' && create_if_block_1$3(ctx)
    let each_value = /*imageRefs*/ ctx[2]
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$3(
        get_each_context$3(ctx, each_value, i)
      )
    }

    let if_block2 = /*showModal*/ ctx[6] && create_if_block$4(ctx)

    const block = {
      c: function create() {
        div6 = element('div')
        section = element('section')
        div5 = element('div')
        div4 = element('div')
        div3 = element('div')
        div2 = element('div')
        div0 = element('div')
        ul0 = element('ul')
        li0 = element('li')
        a0 = element('a')
        a0.textContent = 'External Images'
        t1 = space()
        li1 = element('li')
        a1 = element('a')
        a1.textContent = 'Internal Images'
        t3 = space()
        div1 = element('div')
        if (if_block0) if_block0.c()
        t4 = space()
        if (if_block1) if_block1.c()
        t5 = space()
        button = element('button')
        button.textContent = 'Add'
        t7 = space()
        ul1 = element('ul')

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        t8 = space()
        if (if_block2) if_block2.c()
        if_block2_anchor = empty()
        add_location(a0, file$7, 238, 18, 6427)
        attr_dev(li0, 'class', 'svelte-o820xj')
        toggle_class(li0, 'is-active', /*activeTab*/ ctx[5] === 'local')
        add_location(li0, file$7, 234, 16, 6225)
        add_location(a1, file$7, 245, 18, 6757)
        attr_dev(li1, 'class', 'svelte-o820xj')
        toggle_class(li1, 'is-active', /*activeTab*/ ctx[5] === 's3')
        add_location(li1, file$7, 241, 16, 6561)
        attr_dev(ul0, 'class', 'svelte-o820xj')
        add_location(ul0, file$7, 232, 14, 6131)
        attr_dev(div0, 'class', 'tabs svelte-o820xj')
        add_location(div0, file$7, 231, 12, 6098)
        attr_dev(button, 'class', 'button is-small is-primary')
        add_location(button, file$7, 296, 14, 8716)
        attr_dev(div1, 'class', 'tab-content svelte-o820xj')
        add_location(div1, file$7, 250, 12, 6854)
        add_location(ul1, file$7, 302, 12, 8899)
        attr_dev(div2, 'class', 'tile is-child')
        add_location(div2, file$7, 229, 10, 6018)
        attr_dev(div3, 'class', 'tile is-vertical')
        add_location(div3, file$7, 228, 8, 5977)
        attr_dev(div4, 'class', 'tile is-parent')
        add_location(div4, file$7, 227, 6, 5940)
        attr_dev(div5, 'class', 'tile is-ancestor')
        add_location(div5, file$7, 226, 4, 5903)
        add_location(section, file$7, 225, 2, 5889)
        attr_dev(div6, 'class', 'container is-fluid')
        set_style(div6, 'cursor', /*isLoading*/ ctx[9] ? 'progress' : 'default')
        add_location(div6, file$7, 222, 0, 5797)
      },
      l: function claim(nodes) {
        throw new Error_1$4(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div6, anchor)
        append_dev(div6, section)
        append_dev(section, div5)
        append_dev(div5, div4)
        append_dev(div4, div3)
        append_dev(div3, div2)
        append_dev(div2, div0)
        append_dev(div0, ul0)
        append_dev(ul0, li0)
        append_dev(li0, a0)
        append_dev(ul0, t1)
        append_dev(ul0, li1)
        append_dev(li1, a1)
        append_dev(div2, t3)
        append_dev(div2, div1)
        if (if_block0) if_block0.m(div1, null)
        append_dev(div1, t4)
        if (if_block1) if_block1.m(div1, null)
        append_dev(div1, t5)
        append_dev(div1, button)
        append_dev(div2, t7)
        append_dev(div2, ul1)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(ul1, null)
          }
        }

        insert_dev(target, t8, anchor)
        if (if_block2) if_block2.m(target, anchor)
        insert_dev(target, if_block2_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(
              li0,
              'click',
              /*click_handler*/ ctx[20],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              li1,
              'click',
              /*click_handler_1*/ ctx[21],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button,
              'click',
              /*addImageToCollection*/ ctx[12],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (!current || dirty[0] & /*activeTab*/ 32) {
          toggle_class(li0, 'is-active', /*activeTab*/ ctx[5] === 'local')
        }

        if (!current || dirty[0] & /*activeTab*/ 32) {
          toggle_class(li1, 'is-active', /*activeTab*/ ctx[5] === 's3')
        }

        if (/*activeTab*/ ctx[5] === 'local') {
          if (if_block0) {
            if_block0.p(ctx, dirty)
          } else {
            if_block0 = create_if_block_2$3(ctx)
            if_block0.c()
            if_block0.m(div1, t4)
          }
        } else if (if_block0) {
          if_block0.d(1)
          if_block0 = null
        }

        if (/*activeTab*/ ctx[5] === 's3') {
          if (if_block1) {
            if_block1.p(ctx, dirty)
          } else {
            if_block1 = create_if_block_1$3(ctx)
            if_block1.c()
            if_block1.m(div1, t5)
          }
        } else if (if_block1) {
          if_block1.d(1)
          if_block1 = null
        }

        if (
          dirty[0] & /*selectImage, imageRefs, removeImageFromCollection*/ 40964
        ) {
          each_value = /*imageRefs*/ ctx[2]
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$3(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block$3(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(ul1, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value.length
        }

        if (!current || dirty[0] & /*isLoading*/ 512) {
          set_style(
            div6,
            'cursor',
            /*isLoading*/ ctx[9] ? 'progress' : 'default'
          )
        }

        if (/*showModal*/ ctx[6]) {
          if (if_block2) {
            if_block2.p(ctx, dirty)

            if (dirty[0] & /*showModal*/ 64) {
              transition_in(if_block2, 1)
            }
          } else {
            if_block2 = create_if_block$4(ctx)
            if_block2.c()
            transition_in(if_block2, 1)
            if_block2.m(if_block2_anchor.parentNode, if_block2_anchor)
          }
        } else if (if_block2) {
          group_outros()

          transition_out(if_block2, 1, 1, () => {
            if_block2 = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block2)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block2)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div6)
        if (if_block0) if_block0.d()
        if (if_block1) if_block1.d()
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(t8)
        if (if_block2) if_block2.d(detaching)
        if (detaching) detach_dev(if_block2_anchor)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$8.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$8($$self, $$props, $$invalidate) {
    let filteredImagenames
    let filteredLocalImagenames
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('ImageEditor', slots, [])
    const dispatch = createEventDispatcher()
    let { passage, colID, savedata } = $$props
    let ctsurn // Replace with the value from your original code

    // let imageRef = '' // Replace with the value from your original code
    // let imageJS = '' // Replace with the value from your original code
    let selectedCollection = '',
      selectedImage = writable(null),
      collections = [],
      s3collections = [],
      imagenames = [],
      locations = [],
      colnames = [],
      imageURL,
      imageRefs = [],
      activeTab = 'local'

    let showModal = false,
      modalHeader,
      modalText
    let isLoading = false

    function addImageToCollection() {
      if (selectedImage && !imageRefs.includes(selectedImage)) {
        $$invalidate(2, (imageRefs = [...imageRefs, selectedImage]))
      }
    }

    function removeImageFromCollection(imageName) {
      $$invalidate(
        2,
        (imageRefs = imageRefs.filter((image) => image !== imageName))
      )
    }

    onMount(async () => {
      $$invalidate(2, (imageRefs = [...passage.imageRefs]))
      ctsurn = passage.passageid
      populateCollectionDropdown()
      populateS3CollectionDropdown()
    })

    //  .map((entry) => entry)
    //  .filter(( ) => !imageRefs.includes( entry))
    async function populateCollectionDropdown() {
      const collectionurl = `/api/v1/collectionimages/${colID}`
      const res = await fetch(collectionurl)

      if (res.ok) {
        $$invalidate(1, (collections = (await res.json()).data))
      } else {
        throw new Error(res.body)
      }
    }

    async function populateS3CollectionDropdown() {
      const collectionurl = `/api/v1/localimages`
      const res = await fetch(collectionurl)

      if (res.ok) {
        $$invalidate(19, (s3collections = (await res.json()).data))
      } else {
        throw new Error(res.body)
      }
    }

    function handleImageChange(event) {
      const selectedIndex = imagenames.indexOf(selectedImage)

      if (selectedIndex !== -1) {
        imageURL = locations[selectedIndex]

        // console.log('Selected imageURL:', imageURL)
        // Emit the custom event with the new imageURL
        dispatch('imageurlchange', { imageURL })
      } else {
        console.log('Image not found in the imagenames array')
      }
    }

    async function handleSubmit() {
      if (!savedata) return
      $$invalidate(9, (isLoading = true)) // Set isLoading to true before making the request
      const id = colID

      // const imageref = imageRefs.replaceAll('#', '+')
      const formData = {
        colid: parseInt(id),
        ctsurn,
        imageref: imageRefs,
      }

      const response = await fetch('/api/v2/savereference', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
      })

      $$invalidate(9, (isLoading = false)) // Set isLoading back to false after the request is complete

      if (response.ok) {
        // Handle successful POST action
        $$invalidate(7, (modalHeader = 'Success'))

        $$invalidate(8, (modalText = 'Image references have been saved'))
        $$invalidate(6, (showModal = true))
      } else {
        // Handle error
        $$invalidate(7, (modalHeader = 'Error'))

        $$invalidate(8, (modalText = 'Image references have not been saved'))
        $$invalidate(6, (showModal = true))
      }

      $$invalidate(16, (savedata = false))
      window.location.href = `/view/${colID}/${passage.passageid}`
    }

    function selectImage(image) {
      //selectedImage.set(image); // Set the value of the selectedImage store to the clicked image
      // console.log('Image ', image, imageRefs)
      const selectedIndex = imageRefs.indexOf(image)

      if (selectedIndex !== -1) {
        imageURL = imageRefs[selectedIndex]
      } else {
        console.log('Image not found in the imagenames array') // console.log('Selected imageURL:', imageURL)
      }

      dispatch('imageurlchange', { imageURL })
    }

    $$self.$$.on_mount.push(function () {
      if (
        passage === undefined &&
        !('passage' in $$props || $$self.$$.bound[$$self.$$.props['passage']])
      ) {
        console_1$4.warn(
          "<ImageEditor> was created without expected prop 'passage'"
        )
      }

      if (
        colID === undefined &&
        !('colID' in $$props || $$self.$$.bound[$$self.$$.props['colID']])
      ) {
        console_1$4.warn(
          "<ImageEditor> was created without expected prop 'colID'"
        )
      }

      if (
        savedata === undefined &&
        !('savedata' in $$props || $$self.$$.bound[$$self.$$.props['savedata']])
      ) {
        console_1$4.warn(
          "<ImageEditor> was created without expected prop 'savedata'"
        )
      }
    })

    const writable_props = ['passage', 'colID', 'savedata']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$4.warn(`<ImageEditor> was created with unknown prop '${key}'`)
    })

    const click_handler = () => $$invalidate(5, (activeTab = 'local'))
    const click_handler_1 = () => $$invalidate(5, (activeTab = 's3'))

    function select0_change_handler() {
      selectedCollection = select_value(this)
      $$invalidate(0, selectedCollection)
      $$invalidate(4, colnames), $$invalidate(1, collections)
    }

    function select1_change_handler() {
      selectedImage = select_value(this)
      $$invalidate(3, selectedImage)
      ;(($$invalidate(11, filteredImagenames), $$invalidate(1, collections)),
      $$invalidate(0, selectedCollection)),
        $$invalidate(2, imageRefs)
    }

    function select_change_handler() {
      selectedImage = select_value(this)
      $$invalidate(3, selectedImage)
      ;(($$invalidate(11, filteredImagenames), $$invalidate(1, collections)),
      $$invalidate(0, selectedCollection)),
        $$invalidate(2, imageRefs)
    }

    const click_handler_2 = (image, event) => {
      event.stopPropagation() // Prevent the li click event from triggering
      removeImageFromCollection(image)
    }

    const click_handler_3 = (image, event) => {
      event.stopPropagation()
      selectImage(image)
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(6, showModal)
    }

    $$self.$$set = ($$props) => {
      if ('passage' in $$props) $$invalidate(17, (passage = $$props.passage))
      if ('colID' in $$props) $$invalidate(18, (colID = $$props.colID))
      if ('savedata' in $$props) $$invalidate(16, (savedata = $$props.savedata))
    }

    $$self.$capture_state = () => ({
      onMount,
      createEventDispatcher,
      writable,
      Modal,
      dispatch,
      passage,
      colID,
      savedata,
      ctsurn,
      selectedCollection,
      selectedImage,
      collections,
      s3collections,
      imagenames,
      locations,
      colnames,
      imageURL,
      imageRefs,
      activeTab,
      showModal,
      modalHeader,
      modalText,
      isLoading,
      addImageToCollection,
      removeImageFromCollection,
      populateCollectionDropdown,
      populateS3CollectionDropdown,
      handleImageChange,
      handleSubmit,
      selectImage,
      filteredLocalImagenames,
      filteredImagenames,
    })

    $$self.$inject_state = ($$props) => {
      if ('passage' in $$props) $$invalidate(17, (passage = $$props.passage))
      if ('colID' in $$props) $$invalidate(18, (colID = $$props.colID))
      if ('savedata' in $$props) $$invalidate(16, (savedata = $$props.savedata))
      if ('ctsurn' in $$props) ctsurn = $$props.ctsurn
      if ('selectedCollection' in $$props)
        $$invalidate(0, (selectedCollection = $$props.selectedCollection))
      if ('selectedImage' in $$props)
        $$invalidate(3, (selectedImage = $$props.selectedImage))
      if ('collections' in $$props)
        $$invalidate(1, (collections = $$props.collections))
      if ('s3collections' in $$props)
        $$invalidate(19, (s3collections = $$props.s3collections))
      if ('imagenames' in $$props) imagenames = $$props.imagenames
      if ('locations' in $$props) locations = $$props.locations
      if ('colnames' in $$props) $$invalidate(4, (colnames = $$props.colnames))
      if ('imageURL' in $$props) imageURL = $$props.imageURL
      if ('imageRefs' in $$props)
        $$invalidate(2, (imageRefs = $$props.imageRefs))
      if ('activeTab' in $$props)
        $$invalidate(5, (activeTab = $$props.activeTab))
      if ('showModal' in $$props)
        $$invalidate(6, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(7, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(8, (modalText = $$props.modalText))
      if ('isLoading' in $$props)
        $$invalidate(9, (isLoading = $$props.isLoading))
      if ('filteredLocalImagenames' in $$props)
        $$invalidate(
          10,
          (filteredLocalImagenames = $$props.filteredLocalImagenames)
        )
      if ('filteredImagenames' in $$props)
        $$invalidate(11, (filteredImagenames = $$props.filteredImagenames))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty[0] & /*savedata*/ 65536) {
        handleSubmit()
      }

      if ($$self.$$.dirty[0] & /*collections*/ 2) {
        if (!!collections) {
          collections.forEach((entry) => {
            const option = document.createElement('option')
            option.value = entry.colname
            option.text = entry.colname
          })

          imagenames = collections.map((entry) => entry.imagename)
          locations = collections.map((entry) => entry.location)
          $$invalidate(
            4,
            (colnames = collections
              .map((entry) => entry.colname)
              .filter((value, index, self) => self.indexOf(value) === index))
          )
        }
      }

      if (
        $$self.$$.dirty[0] & /*collections, selectedCollection, imageRefs*/ 7
      ) {
        $$invalidate(
          11,
          (filteredImagenames = collections
            .filter((entry) => entry.colname === selectedCollection)
            .map((entry) => entry.imagename)
            .filter((imagename) => !imageRefs.includes(imagename)))
        )
      }

      if ($$self.$$.dirty[0] & /*s3collections, imageRefs*/ 524292) {
        $$invalidate(
          10,
          (filteredLocalImagenames = s3collections.filter(
            (entry) => !imageRefs.includes(entry)
          ))
        )
      }
    }

    return [
      selectedCollection,
      collections,
      imageRefs,
      selectedImage,
      colnames,
      activeTab,
      showModal,
      modalHeader,
      modalText,
      isLoading,
      filteredLocalImagenames,
      filteredImagenames,
      addImageToCollection,
      removeImageFromCollection,
      handleImageChange,
      selectImage,
      savedata,
      passage,
      colID,
      s3collections,
      click_handler,
      click_handler_1,
      select0_change_handler,
      select1_change_handler,
      select_change_handler,
      click_handler_2,
      click_handler_3,
      modal_showModal_binding,
    ]
  }

  class ImageEditor extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(
        this,
        options,
        instance$8,
        create_fragment$8,
        safe_not_equal,
        { passage: 17, colID: 18, savedata: 16 },
        null,
        [-1, -1]
      )

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'ImageEditor',
        options,
        id: create_fragment$8.name,
      })
    }

    get passage() {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set passage(value) {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get colID() {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set colID(value) {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get savedata() {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set savedata(value) {
      throw new Error_1$4(
        "<ImageEditor>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/CollectionOverview.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1$3, console: console_1$3 } = globals
  const file$6 = 'src/routes/CollectionOverview.svelte'

  function get_each_context$2(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[95] = list[i]
    return child_ctx
  }

  function get_each_context_1$2(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[98] = list[i]
    return child_ctx
  }

  function get_each_context_2$1(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[95] = list[i]
    return child_ctx
  }

  // (967:2) {:else}
  function create_else_block$2(ctx) {
    let nav
    let ul0
    let li0
    let label0
    let t1
    let li1
    let div0
    let select0
    let t2
    let li2
    let a0
    let t4
    let li3
    let a1
    let t6
    let select1
    let t7
    let li4
    let a2
    let t9
    let li5
    let a3
    let t11
    let li6
    let label1
    let t13
    let li7
    let div1
    let select2
    let t14
    let li8
    let a4
    let t15
    let t16
    let t17
    let div12
    let section0
    let div6
    let div2
    let t18
    let div3
    let t19
    let div5
    let input0
    let t20
    let div4
    let t21
    let input1
    let t22
    let a5
    let t23
    let t24
    let div7
    let t26
    let div8
    let section0_class_value
    let t27
    let current_block_type_index
    let if_block6
    let t28
    let section1
    let div11
    let div10
    let ul1
    let li9
    let label2
    let t30
    let li10
    let button0
    let t32
    let button1
    let t34
    let button2
    let t36
    let li11
    let t37
    let t38
    let div9
    let current_block_type_index_1
    let if_block8
    let div9_class_value
    let t39
    let t40
    let div11_class_value
    let section1_class_value
    let div12_class_value
    let current
    let mounted
    let dispose

    function select_block_type_1(ctx, dirty) {
      if (/*passage*/ ctx[6] && /*passage*/ ctx[6].textRefs)
        return create_if_block_16
      return create_else_block_8
    }

    let current_block_type = select_block_type_1(ctx)
    let if_block0 = current_block_type(ctx)

    function select_block_type_2(ctx, dirty) {
      if (/*passage*/ ctx[6] && /*passage*/ ctx[6].schemes)
        return create_if_block_15
      return create_else_block_7
    }

    let current_block_type_1 = select_block_type_2(ctx)
    let if_block1 = current_block_type_1(ctx)

    function select_block_type_3(ctx, dirty) {
      if (/*passage*/ ctx[6] && /*passage*/ ctx[6].imageRefs)
        return create_if_block_14
      return create_else_block_6
    }

    let current_block_type_2 = select_block_type_3(ctx)
    let if_block2 = current_block_type_2(ctx)

    function select_block_type_4(ctx, dirty) {
      if (/*showMetadata*/ ctx[2]) return create_if_block_13
      return create_else_block_5
    }

    let current_block_type_3 = select_block_type_4(ctx)
    let if_block3 = current_block_type_3(ctx)
    let if_block4 =
      /*userrights*/ ctx[16] &&
      /*userrights*/ ctx[16].canEditMetadata &&
      create_if_block_11(ctx)

    function select_block_type_6(ctx, dirty) {
      if (/*showReadingLine*/ ctx[9]) return create_if_block_10
      return create_else_block_3
    }

    let current_block_type_4 = select_block_type_6(ctx)
    let if_block5 = current_block_type_4(ctx)
    const if_block_creators = [create_if_block_9, create_else_block_2$1]
    const if_blocks = []

    function select_block_type_7(ctx, dirty) {
      if (!(/*isPortrait*/ ctx[12])) return 0
      return 1
    }

    current_block_type_index = select_block_type_7(ctx)
    if_block6 = if_blocks[current_block_type_index] =
      if_block_creators[current_block_type_index](ctx)
    let if_block7 =
      /*userrights*/ ctx[16] &&
      /*userrights*/ ctx[16].canEditTranscription &&
      create_if_block_6$1(ctx)
    const if_block_creators_1 = [create_if_block_5$1, create_else_block_1$1]
    const if_blocks_1 = []

    function select_block_type_8(ctx, dirty) {
      if (/*isBlockEditor*/ ctx[5]) return 0
      return 1
    }

    current_block_type_index_1 = select_block_type_8(ctx)
    if_block8 = if_blocks_1[current_block_type_index_1] =
      if_block_creators_1[current_block_type_index_1](ctx)
    let if_block9 = /*showMetadata*/ ctx[2] && create_if_block_3$2(ctx)
    let if_block10 = /*showImageEdit*/ ctx[3] && create_if_block_1$2(ctx)

    const block = {
      c: function create() {
        nav = element('nav')
        ul0 = element('ul')
        li0 = element('li')
        label0 = element('label')
        label0.textContent = 'Witness:'
        t1 = space()
        li1 = element('li')
        div0 = element('div')
        select0 = element('select')
        if_block0.c()
        t2 = space()
        li2 = element('li')
        a0 = element('a')
        a0.textContent = '<'
        t4 = space()
        li3 = element('li')
        a1 = element('a')
        a1.textContent = '←'
        t6 = space()
        select1 = element('select')
        if_block1.c()
        t7 = space()
        li4 = element('li')
        a2 = element('a')
        a2.textContent = '→'
        t9 = space()
        li5 = element('li')
        a3 = element('a')
        a3.textContent = '>'
        t11 = space()
        li6 = element('li')
        label1 = element('label')
        label1.textContent = 'Folio:'
        t13 = space()
        li7 = element('li')
        div1 = element('div')
        select2 = element('select')
        if_block2.c()
        t14 = space()
        li8 = element('li')
        a4 = element('a')
        if_block3.c()
        t15 = text('\n            Metadata')
        t16 = space()
        if (if_block4) if_block4.c()
        t17 = space()
        div12 = element('div')
        section0 = element('section')
        div6 = element('div')
        div2 = element('div')
        t18 = space()
        div3 = element('div')
        t19 = space()
        div5 = element('div')
        input0 = element('input')
        t20 = space()
        div4 = element('div')
        t21 = space()
        input1 = element('input')
        t22 = space()
        a5 = element('a')
        if_block5.c()
        t23 = text('\n            Reading Line')
        t24 = space()
        div7 = element('div')
        div7.textContent = 'Loading image...'
        t26 = space()
        div8 = element('div')
        t27 = space()
        if_block6.c()
        t28 = space()
        section1 = element('section')
        div11 = element('div')
        div10 = element('div')
        ul1 = element('ul')
        li9 = element('li')
        label2 = element('label')
        label2.textContent = 'Transcription'
        t30 = space()
        li10 = element('li')
        button0 = element('button')
        button0.textContent = 'Aˇ'
        t32 = space()
        button1 = element('button')
        button1.textContent = 'A'
        t34 = space()
        button2 = element('button')
        button2.textContent = 'Aˆ'
        t36 = space()
        li11 = element('li')
        t37 = space()
        if (if_block7) if_block7.c()
        t38 = space()
        div9 = element('div')
        if_block8.c()
        t39 = space()
        if (if_block9) if_block9.c()
        t40 = space()
        if (if_block10) if_block10.c()
        attr_dev(label0, 'for', 'passage.passageid')
        attr_dev(label0, 'class', 'svelte-1bw3apw')
        add_location(label0, file$6, 969, 12, 24527)
        attr_dev(li0, 'class', 'svelte-1bw3apw')
        add_location(li0, file$6, 969, 8, 24523)
        attr_dev(select0, 'class', 'svelte-1bw3apw')
        if (/*selectedCatalogUrn*/ ctx[8] === void 0)
          add_render_callback(() =>
            /*select0_change_handler*/ ctx[57].call(select0)
          )
        add_location(select0, file$6, 972, 12, 24647)
        attr_dev(div0, 'class', 'select svelte-1bw3apw')
        add_location(div0, file$6, 971, 10, 24614)
        attr_dev(li1, 'class', 'pl svelte-1bw3apw')
        add_location(li1, file$6, 970, 8, 24588)
        attr_dev(a0, 'href', '#top')
        attr_dev(a0, 'class', 'svelte-1bw3apw')
        add_location(a0, file$6, 987, 10, 25109)
        attr_dev(li2, 'class', 'pl svelte-1bw3apw')
        add_location(li2, file$6, 986, 8, 25083)
        attr_dev(a1, 'href', '#top')
        attr_dev(a1, 'class', 'svelte-1bw3apw')
        add_location(a1, file$6, 990, 10, 25225)
        attr_dev(li3, 'class', 'pl svelte-1bw3apw')
        add_location(li3, file$6, 989, 8, 25199)
        attr_dev(select1, 'class', 'svelte-1bw3apw')
        if (/*passageId*/ ctx[17] === void 0)
          add_render_callback(() =>
            /*select1_change_handler*/ ctx[58].call(select1)
          )
        add_location(select1, file$6, 993, 8, 25378)
        attr_dev(a2, 'href', '#top')
        attr_dev(a2, 'class', 'svelte-1bw3apw')
        add_location(a2, file$6, 1003, 10, 25735)
        attr_dev(li4, 'class', 'pl svelte-1bw3apw')
        add_location(li4, file$6, 1002, 8, 25709)
        attr_dev(a3, 'href', '#top')
        attr_dev(a3, 'class', 'svelte-1bw3apw')
        add_location(a3, file$6, 1006, 10, 25848)
        attr_dev(li5, 'class', 'pl svelte-1bw3apw')
        add_location(li5, file$6, 1005, 8, 25822)
        attr_dev(label1, 'for', 'passage.passageid')
        attr_dev(label1, 'class', 'svelte-1bw3apw')
        add_location(label1, file$6, 1009, 12, 25942)
        attr_dev(li6, 'class', 'svelte-1bw3apw')
        add_location(li6, file$6, 1009, 8, 25938)
        attr_dev(select2, 'class', 'svelte-1bw3apw')
        if (/*selectedImageRef*/ ctx[1] === void 0)
          add_render_callback(() =>
            /*select2_change_handler*/ ctx[59].call(select2)
          )
        add_location(select2, file$6, 1012, 12, 26049)
        attr_dev(div1, 'class', 'select svelte-1bw3apw')
        add_location(div1, file$6, 1011, 10, 26016)
        attr_dev(li7, 'class', 'svelte-1bw3apw')
        add_location(li7, file$6, 1010, 8, 26001)
        attr_dev(a4, 'href', '#top')
        attr_dev(a4, 'class', 'svelte-1bw3apw')
        add_location(a4, file$6, 1026, 10, 26515)
        attr_dev(li8, 'class', 'pl svelte-1bw3apw')
        add_location(li8, file$6, 1025, 8, 26489)
        attr_dev(ul0, 'class', 'toolbar svelte-1bw3apw')
        set_style(ul0, 'width', '100vw')
        add_location(ul0, file$6, 968, 6, 24473)
        attr_dev(nav, 'class', 'flex svelte-1bw3apw')
        toggle_class(nav, 'shadow', /*hidePassageToolbar*/ ctx[23])
        add_location(nav, file$6, 967, 4, 24414)
        attr_dev(div2, 'id', 'osd_buttons')
        attr_dev(div2, 'class', 'flex frow svelte-1bw3apw')
        add_location(div2, file$6, 1049, 10, 27263)
        attr_dev(div3, 'class', 'fgrow svelte-1bw3apw')
        add_location(div3, file$6, 1050, 10, 27316)
        attr_dev(input0, 'type', 'range')
        attr_dev(input0, 'min', '-100')
        attr_dev(input0, 'max', '100')
        input0.value = '0'
        attr_dev(input0, 'id', 'lineOffsetRange')
        set_style(input0, 'width', '200px')
        attr_dev(input0, 'class', 'svelte-1bw3apw')
        add_location(input0, file$6, 1055, 12, 27494)
        set_style(div4, 'padding-right', '5px')
        attr_dev(div4, 'class', 'svelte-1bw3apw')
        add_location(div4, file$6, 1063, 12, 27730)
        attr_dev(input1, 'type', 'color')
        attr_dev(input1, 'id', 'myColorPicker')

        input1.value =
          localStorage.getItem('linecolor') === null
            ? '#FF0000'
            : localStorage.getItem('linecolor')

        attr_dev(input1, 'class', 'svelte-1bw3apw')
        add_location(input1, file$6, 1064, 12, 27777)
        attr_dev(div5, 'id', 'lineOpts')
        attr_dev(div5, 'class', 'flex frow svelte-1bw3apw')
        set_style(div5, 'padding-top', '3px')
        set_style(div5, 'padding-right', '7px')
        set_style(div5, 'display', 'none')
        add_location(div5, file$6, 1051, 10, 27348)
        attr_dev(a5, 'href', '#top')
        set_style(a5, 'text-align', 'right')
        set_style(a5, 'padding-right', '3px')
        set_style(a5, 'padding-top', '3px')
        set_style(a5, 'white-space', 'nowrap')
        attr_dev(a5, 'class', 'svelte-1bw3apw')
        add_location(a5, file$6, 1070, 10, 28031)
        attr_dev(div6, 'id', 'osd_toolbar')
        attr_dev(div6, 'class', 'flex frow svelte-1bw3apw')
        add_location(div6, file$6, 1048, 8, 27212)
        attr_dev(div7, 'class', 'loading svelte-1bw3apw')
        set_style(div7, 'position', 'absolute')
        set_style(div7, 'left', '10px')
        set_style(div7, 'top', '40px')
        set_style(div7, 'font-size', '16px')
        set_style(div7, 'z-index', '10')
        add_location(div7, file$6, 1078, 8, 28332)
        attr_dev(div8, 'class', 'preview openseadragon fgrow svelte-1bw3apw')
        attr_dev(div8, 'id', 'preview')
        add_location(div8, file$6, 1084, 8, 28514)
        attr_dev(section0, 'id', 'openseadragon_sec')
        attr_dev(
          section0,
          'class',
          (section0_class_value =
            '' +
            (null_to_empty(
              `flex  fcol ${/*isPortrait*/ ctx[12] ? ' sectionw' : ' sectionh'}`
            ) +
              ' svelte-1bw3apw'))
        )
        add_location(section0, file$6, 1045, 6, 27092)
        attr_dev(label2, 'for', 'passage.passageid')
        set_style(label2, 'font-size', 'large')
        attr_dev(label2, 'class', 'svelte-1bw3apw')
        add_location(label2, file$6, 1109, 16, 29278)
        attr_dev(li9, 'class', 'svelte-1bw3apw')
        add_location(li9, file$6, 1108, 14, 29257)
        attr_dev(button0, 'type', 'button')
        attr_dev(button0, 'class', 'transcriptionBtn svelte-1bw3apw')
        set_style(button0, 'font-size', 'large')
        add_location(button0, file$6, 1114, 16, 29447)
        attr_dev(button1, 'type', 'button')
        attr_dev(button1, 'class', 'transcriptionBtn svelte-1bw3apw')
        set_style(button1, 'font-size', 'large')
        add_location(button1, file$6, 1119, 16, 29643)
        attr_dev(button2, 'type', 'button')
        attr_dev(button2, 'class', 'transcriptionBtn svelte-1bw3apw')
        set_style(button2, 'font-size', 'large')
        add_location(button2, file$6, 1124, 16, 29835)
        attr_dev(li10, 'class', 'svelte-1bw3apw')
        add_location(li10, file$6, 1113, 14, 29426)
        attr_dev(li11, 'class', 'svelte-1bw3apw')
        add_location(li11, file$6, 1130, 14, 30047)
        attr_dev(ul1, 'class', 'toolbar svelte-1bw3apw')
        toggle_class(ul1, 'shadow', /*hideTranscriptionToolbar*/ ctx[24])
        add_location(ul1, file$6, 1107, 12, 29182)
        attr_dev(
          div9,
          'class',
          (div9_class_value =
            'scroll transh $' +
            /*isPortrait*/ (ctx[12] ? ' transw' : '') +
            ' svelte-1bw3apw')
        )
        add_location(div9, file$6, 1180, 12, 31731)
        attr_dev(div10, 'class', 'pane pheight svelte-1bw3apw')
        add_location(div10, file$6, 1106, 10, 29143)
        attr_dev(
          div11,
          'class',
          (div11_class_value =
            '' +
            (null_to_empty(
              `flex vertical-split${/*isPortrait*/ ctx[12] ? ' portrait' : ''}`
            ) +
              ' svelte-1bw3apw'))
        )
        add_location(div11, file$6, 1105, 8, 29065)
        attr_dev(section1, 'id', 'transcription_sec')
        attr_dev(
          section1,
          'class',
          (section1_class_value =
            '' +
            (null_to_empty(
              `flex scroll ${
                /*isPortrait*/ ctx[12] ? ' sectionw' : ' sectionh'
              }`
            ) +
              ' svelte-1bw3apw'))
        )
        add_location(section1, file$6, 1102, 6, 28944)
        attr_dev(
          div12,
          'class',
          (div12_class_value =
            '' +
            (null_to_empty(
              `${/*isPortrait*/ ctx[12] ? 'flex frow' : 'flex fcol'}`
            ) +
              ' svelte-1bw3apw'))
        )
        set_style(div12, 'width', '100%')
        add_location(div12, file$6, 1042, 4, 26996)
      },
      m: function mount(target, anchor) {
        insert_dev(target, nav, anchor)
        append_dev(nav, ul0)
        append_dev(ul0, li0)
        append_dev(li0, label0)
        append_dev(ul0, t1)
        append_dev(ul0, li1)
        append_dev(li1, div0)
        append_dev(div0, select0)
        if_block0.m(select0, null)
        select_option(select0, /*selectedCatalogUrn*/ ctx[8], true)
        append_dev(ul0, t2)
        append_dev(ul0, li2)
        append_dev(li2, a0)
        append_dev(ul0, t4)
        append_dev(ul0, li3)
        append_dev(li3, a1)
        append_dev(ul0, t6)
        append_dev(ul0, select1)
        if_block1.m(select1, null)
        select_option(select1, /*passageId*/ ctx[17], true)
        append_dev(ul0, t7)
        append_dev(ul0, li4)
        append_dev(li4, a2)
        append_dev(ul0, t9)
        append_dev(ul0, li5)
        append_dev(li5, a3)
        append_dev(ul0, t11)
        append_dev(ul0, li6)
        append_dev(li6, label1)
        append_dev(ul0, t13)
        append_dev(ul0, li7)
        append_dev(li7, div1)
        append_dev(div1, select2)
        if_block2.m(select2, null)
        select_option(select2, /*selectedImageRef*/ ctx[1], true)
        append_dev(ul0, t14)
        append_dev(ul0, li8)
        append_dev(li8, a4)
        if_block3.m(a4, null)
        append_dev(a4, t15)
        append_dev(ul0, t16)
        if (if_block4) if_block4.m(ul0, null)
        insert_dev(target, t17, anchor)
        insert_dev(target, div12, anchor)
        append_dev(div12, section0)
        append_dev(section0, div6)
        append_dev(div6, div2)
        append_dev(div6, t18)
        append_dev(div6, div3)
        append_dev(div6, t19)
        append_dev(div6, div5)
        append_dev(div5, input0)
        append_dev(div5, t20)
        append_dev(div5, div4)
        append_dev(div5, t21)
        append_dev(div5, input1)
        append_dev(div6, t22)
        append_dev(div6, a5)
        if_block5.m(a5, null)
        append_dev(a5, t23)
        append_dev(section0, t24)
        append_dev(section0, div7)
        append_dev(section0, t26)
        append_dev(section0, div8)
        /*div8_binding*/ ctx[60](div8)
        append_dev(div12, t27)
        if_blocks[current_block_type_index].m(div12, null)
        append_dev(div12, t28)
        append_dev(div12, section1)
        append_dev(section1, div11)
        append_dev(div11, div10)
        append_dev(div10, ul1)
        append_dev(ul1, li9)
        append_dev(li9, label2)
        append_dev(ul1, t30)
        append_dev(ul1, li10)
        append_dev(li10, button0)
        append_dev(li10, t32)
        append_dev(li10, button1)
        append_dev(li10, t34)
        append_dev(li10, button2)
        append_dev(ul1, t36)
        append_dev(ul1, li11)
        append_dev(ul1, t37)
        if (if_block7) if_block7.m(ul1, null)
        append_dev(div10, t38)
        append_dev(div10, div9)
        if_blocks_1[current_block_type_index_1].m(div9, null)
        append_dev(div11, t39)
        if (if_block9) if_block9.m(div11, null)
        append_dev(div11, t40)
        if (if_block10) if_block10.m(div11, null)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(select0, 'change', /*select0_change_handler*/ ctx[57]),
            listen_dev(
              select0,
              'change',
              /*handleWitnessSelection*/ ctx[27],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              a0,
              'click',
              prevent_default(/*handleFirstPassage*/ ctx[28]),
              false,
              true,
              false,
              false
            ),
            listen_dev(
              a1,
              'click',
              prevent_default(/*handlePreviousPassage*/ ctx[29]),
              false,
              true,
              false,
              false
            ),
            listen_dev(
              select1,
              'change',
              /*handleSelect*/ ctx[26],
              false,
              false,
              false,
              false
            ),
            listen_dev(select1, 'change', /*select1_change_handler*/ ctx[58]),
            listen_dev(
              a2,
              'click',
              prevent_default(/*handleNextPassage*/ ctx[30]),
              false,
              true,
              false,
              false
            ),
            listen_dev(
              a3,
              'click',
              prevent_default(/*handleLastPassage*/ ctx[31]),
              false,
              true,
              false,
              false
            ),
            listen_dev(select2, 'change', /*select2_change_handler*/ ctx[59]),
            listen_dev(
              select2,
              'change',
              /*handleFolioSelection*/ ctx[32],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              a4,
              'click',
              prevent_default(/*handleToggleMetadata*/ ctx[33]),
              false,
              true,
              false,
              false
            ),
            listen_dev(
              input0,
              'input',
              /*updateLinePosition*/ ctx[36],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input1,
              'input',
              /*updateLinePosition*/ ctx[36],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              a5,
              'click',
              prevent_default(/*handleToggleLine*/ ctx[35]),
              false,
              true,
              false,
              false
            ),
            listen_dev(
              button0,
              'click',
              /*fontDown*/ ctx[47],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              'click',
              /*fontReset*/ ctx[48],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button2,
              'click',
              /*fontUp*/ ctx[49],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          current_block_type ===
            (current_block_type = select_block_type_1(ctx)) &&
          if_block0
        ) {
          if_block0.p(ctx, dirty)
        } else {
          if_block0.d(1)
          if_block0 = current_block_type(ctx)

          if (if_block0) {
            if_block0.c()
            if_block0.m(select0, null)
          }
        }

        if (dirty[0] & /*selectedCatalogUrn, passage*/ 320) {
          select_option(select0, /*selectedCatalogUrn*/ ctx[8])
        }

        if (
          current_block_type_1 ===
            (current_block_type_1 = select_block_type_2(ctx)) &&
          if_block1
        ) {
          if_block1.p(ctx, dirty)
        } else {
          if_block1.d(1)
          if_block1 = current_block_type_1(ctx)

          if (if_block1) {
            if_block1.c()
            if_block1.m(select1, null)
          }
        }

        if (dirty[0] & /*passageId, schemes*/ 4325376) {
          select_option(select1, /*passageId*/ ctx[17])
        }

        if (
          current_block_type_2 ===
            (current_block_type_2 = select_block_type_3(ctx)) &&
          if_block2
        ) {
          if_block2.p(ctx, dirty)
        } else {
          if_block2.d(1)
          if_block2 = current_block_type_2(ctx)

          if (if_block2) {
            if_block2.c()
            if_block2.m(select2, null)
          }
        }

        if (dirty[0] & /*selectedImageRef, passage*/ 66) {
          select_option(select2, /*selectedImageRef*/ ctx[1])
        }

        if (
          current_block_type_3 !==
          (current_block_type_3 = select_block_type_4(ctx))
        ) {
          if_block3.d(1)
          if_block3 = current_block_type_3(ctx)

          if (if_block3) {
            if_block3.c()
            if_block3.m(a4, t15)
          }
        }

        if (/*userrights*/ ctx[16] && /*userrights*/ ctx[16].canEditMetadata) {
          if (if_block4) {
            if_block4.p(ctx, dirty)
          } else {
            if_block4 = create_if_block_11(ctx)
            if_block4.c()
            if_block4.m(ul0, null)
          }
        } else if (if_block4) {
          if_block4.d(1)
          if_block4 = null
        }

        if (!current || dirty[0] & /*hidePassageToolbar*/ 8388608) {
          toggle_class(nav, 'shadow', /*hidePassageToolbar*/ ctx[23])
        }

        if (
          current_block_type_4 !==
          (current_block_type_4 = select_block_type_6(ctx))
        ) {
          if_block5.d(1)
          if_block5 = current_block_type_4(ctx)

          if (if_block5) {
            if_block5.c()
            if_block5.m(a5, t23)
          }
        }

        if (
          !current ||
          (dirty[0] & /*isPortrait*/ 4096 &&
            section0_class_value !==
              (section0_class_value =
                '' +
                (null_to_empty(
                  `flex  fcol ${
                    /*isPortrait*/ ctx[12] ? ' sectionw' : ' sectionh'
                  }`
                ) +
                  ' svelte-1bw3apw')))
        ) {
          attr_dev(section0, 'class', section0_class_value)
        }

        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type_7(ctx)

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null
          })

          check_outros()
          if_block6 = if_blocks[current_block_type_index]

          if (!if_block6) {
            if_block6 = if_blocks[current_block_type_index] =
              if_block_creators[current_block_type_index](ctx)
            if_block6.c()
          } else {
            if_block6.p(ctx, dirty)
          }

          transition_in(if_block6, 1)
          if_block6.m(div12, t28)
        }

        if (
          /*userrights*/ ctx[16] &&
          /*userrights*/ ctx[16].canEditTranscription
        ) {
          if (if_block7) {
            if_block7.p(ctx, dirty)
          } else {
            if_block7 = create_if_block_6$1(ctx)
            if_block7.c()
            if_block7.m(ul1, null)
          }
        } else if (if_block7) {
          if_block7.d(1)
          if_block7 = null
        }

        if (!current || dirty[0] & /*hideTranscriptionToolbar*/ 16777216) {
          toggle_class(ul1, 'shadow', /*hideTranscriptionToolbar*/ ctx[24])
        }

        let previous_block_index_1 = current_block_type_index_1
        current_block_type_index_1 = select_block_type_8(ctx)

        if (current_block_type_index_1 === previous_block_index_1) {
          if_blocks_1[current_block_type_index_1].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
            if_blocks_1[previous_block_index_1] = null
          })

          check_outros()
          if_block8 = if_blocks_1[current_block_type_index_1]

          if (!if_block8) {
            if_block8 = if_blocks_1[current_block_type_index_1] =
              if_block_creators_1[current_block_type_index_1](ctx)
            if_block8.c()
          } else {
            if_block8.p(ctx, dirty)
          }

          transition_in(if_block8, 1)
          if_block8.m(div9, null)
        }

        if (
          !current ||
          (dirty[0] & /*isPortrait*/ 4096 &&
            div9_class_value !==
              (div9_class_value =
                'scroll transh $' +
                /*isPortrait*/ (ctx[12] ? ' transw' : '') +
                ' svelte-1bw3apw'))
        ) {
          attr_dev(div9, 'class', div9_class_value)
        }

        if (/*showMetadata*/ ctx[2]) {
          if (if_block9) {
            if_block9.p(ctx, dirty)

            if (dirty[0] & /*showMetadata*/ 4) {
              transition_in(if_block9, 1)
            }
          } else {
            if_block9 = create_if_block_3$2(ctx)
            if_block9.c()
            transition_in(if_block9, 1)
            if_block9.m(div11, t40)
          }
        } else if (if_block9) {
          group_outros()

          transition_out(if_block9, 1, 1, () => {
            if_block9 = null
          })

          check_outros()
        }

        if (/*showImageEdit*/ ctx[3]) {
          if (if_block10) {
            if_block10.p(ctx, dirty)

            if (dirty[0] & /*showImageEdit*/ 8) {
              transition_in(if_block10, 1)
            }
          } else {
            if_block10 = create_if_block_1$2(ctx)
            if_block10.c()
            transition_in(if_block10, 1)
            if_block10.m(div11, null)
          }
        } else if (if_block10) {
          group_outros()

          transition_out(if_block10, 1, 1, () => {
            if_block10 = null
          })

          check_outros()
        }

        if (
          !current ||
          (dirty[0] & /*isPortrait*/ 4096 &&
            div11_class_value !==
              (div11_class_value =
                '' +
                (null_to_empty(
                  `flex vertical-split${
                    /*isPortrait*/ ctx[12] ? ' portrait' : ''
                  }`
                ) +
                  ' svelte-1bw3apw')))
        ) {
          attr_dev(div11, 'class', div11_class_value)
        }

        if (
          !current ||
          (dirty[0] & /*isPortrait*/ 4096 &&
            section1_class_value !==
              (section1_class_value =
                '' +
                (null_to_empty(
                  `flex scroll ${
                    /*isPortrait*/ ctx[12] ? ' sectionw' : ' sectionh'
                  }`
                ) +
                  ' svelte-1bw3apw')))
        ) {
          attr_dev(section1, 'class', section1_class_value)
        }

        if (
          !current ||
          (dirty[0] & /*isPortrait*/ 4096 &&
            div12_class_value !==
              (div12_class_value =
                '' +
                (null_to_empty(
                  `${/*isPortrait*/ ctx[12] ? 'flex frow' : 'flex fcol'}`
                ) +
                  ' svelte-1bw3apw')))
        ) {
          attr_dev(div12, 'class', div12_class_value)
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block6)
        transition_in(if_block8)
        transition_in(if_block9)
        transition_in(if_block10)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block6)
        transition_out(if_block8)
        transition_out(if_block9)
        transition_out(if_block10)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(nav)
        if_block0.d()
        if_block1.d()
        if_block2.d()
        if_block3.d()
        if (if_block4) if_block4.d()
        if (detaching) detach_dev(t17)
        if (detaching) detach_dev(div12)
        if_block5.d()
        /*div8_binding*/ ctx[60](null)
        if_blocks[current_block_type_index].d()
        if (if_block7) if_block7.d()
        if_blocks_1[current_block_type_index_1].d()
        if (if_block9) if_block9.d()
        if (if_block10) if_block10.d()
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block$2.name,
      type: 'else',
      source: '(967:2) {:else}',
      ctx,
    })

    return block
  }

  // (959:2) {#if err}
  function create_if_block$3(ctx) {
    let h5
    let t1
    let h6
    let t2
    let a
    let t4
    let span
    let t5

    const block = {
      c: function create() {
        h5 = element('h5')
        h5.textContent =
          'Error: You do not have permission to view this collection'
        t1 = space()
        h6 = element('h6')
        t2 = text('You can return to the\n      ')
        a = element('a')
        a.textContent = 'Brucheion home page'
        t4 = text('\n      to see all available collections\n      ')
        span = element('span')
        t5 = text(/*err*/ ctx[11])
        add_location(h5, file$6, 959, 4, 24180)
        attr_dev(a, 'href', '/')
        add_location(a, file$6, 962, 6, 24290)
        add_location(span, file$6, 964, 6, 24371)
        add_location(h6, file$6, 960, 4, 24251)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h5, anchor)
        insert_dev(target, t1, anchor)
        insert_dev(target, h6, anchor)
        append_dev(h6, t2)
        append_dev(h6, a)
        append_dev(h6, t4)
        append_dev(h6, span)
        append_dev(span, t5)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*err*/ 2048) set_data_dev(t5, /*err*/ ctx[11])
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(h5)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(h6)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$3.name,
      type: 'if',
      source: '(959:2) {#if err}',
      ctx,
    })

    return block
  }

  // (980:14) {:else}
  function create_else_block_8(ctx) {
    let option

    const block = {
      c: function create() {
        option = element('option')
        option.textContent = 'No witnesses'
        option.disabled = true
        option.__value = 'No witnesses'
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 980, 16, 24962)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_8.name,
      type: 'else',
      source: '(980:14) {:else}',
      ctx,
    })

    return block
  }

  // (976:14) {#if passage && passage.textRefs}
  function create_if_block_16(ctx) {
    let each_1_anchor
    let each_value_2 = /*passage*/ ctx[6].textRefs
    validate_each_argument(each_value_2)
    let each_blocks = []

    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2$1(
        get_each_context_2$1(ctx, each_value_2, i)
      )
    }

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*passage*/ 64) {
          each_value_2 = /*passage*/ ctx[6].textRefs
          validate_each_argument(each_value_2)
          let i

          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2$1(ctx, each_value_2, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block_2$1(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value_2.length
        }
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_16.name,
      type: 'if',
      source: '(976:14) {#if passage && passage.textRefs}',
      ctx,
    })

    return block
  }

  // (977:16) {#each passage.textRefs as ref}
  function create_each_block_2$1(ctx) {
    let option
    let t_value = /*ref*/ ctx[95] + ''
    let t
    let option_value_value

    const block = {
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*ref*/ ctx[95]
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 977, 18, 24865)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*passage*/ 64 &&
          t_value !== (t_value = /*ref*/ ctx[95] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*passage*/ 64 &&
          option_value_value !== (option_value_value = /*ref*/ ctx[95])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_2$1.name,
      type: 'each',
      source: '(977:16) {#each passage.textRefs as ref}',
      ctx,
    })

    return block
  }

  // (999:10) {:else}
  function create_else_block_7(ctx) {
    let option

    const block = {
      c: function create() {
        option = element('option')
        option.textContent = 'No schemes'
        option.disabled = true
        option.__value = 'No schemes'
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 999, 12, 25630)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_7.name,
      type: 'else',
      source: '(999:10) {:else}',
      ctx,
    })

    return block
  }

  // (995:10) {#if passage && passage.schemes}
  function create_if_block_15(ctx) {
    let each_blocks = []
    let each_1_lookup = new Map()
    let each_1_anchor
    let each_value_1 = /*schemes*/ ctx[22]
    validate_each_argument(each_value_1)
    const get_key = (ctx) => /*schema*/ ctx[98]
    validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key)

    for (let i = 0; i < each_value_1.length; i += 1) {
      let child_ctx = get_each_context_1$2(ctx, each_value_1, i)
      let key = get_key(child_ctx)
      each_1_lookup.set(
        key,
        (each_blocks[i] = create_each_block_1$2(key, child_ctx))
      )
    }

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*schemes*/ 4194304) {
          each_value_1 = /*schemes*/ ctx[22]
          validate_each_argument(each_value_1)
          validate_each_keys(ctx, each_value_1, get_each_context_1$2, get_key)
          each_blocks = update_keyed_each(
            each_blocks,
            dirty,
            get_key,
            1,
            ctx,
            each_value_1,
            each_1_lookup,
            each_1_anchor.parentNode,
            destroy_block,
            create_each_block_1$2,
            each_1_anchor,
            get_each_context_1$2
          )
        }
      },
      d: function destroy(detaching) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].d(detaching)
        }

        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_15.name,
      type: 'if',
      source: '(995:10) {#if passage && passage.schemes}',
      ctx,
    })

    return block
  }

  // (996:12) {#each schemes as schema (schema)}
  function create_each_block_1$2(key_1, ctx) {
    let option
    let t_value = /*schema*/ ctx[98] + ''
    let t
    let option_value_value

    const block = {
      key: key_1,
      first: null,
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*schema*/ ctx[98]
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 996, 14, 25539)
        this.first = option
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        if (
          dirty[0] & /*schemes*/ 4194304 &&
          t_value !== (t_value = /*schema*/ ctx[98] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*schemes*/ 4194304 &&
          option_value_value !== (option_value_value = /*schema*/ ctx[98])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_1$2.name,
      type: 'each',
      source: '(996:12) {#each schemes as schema (schema)}',
      ctx,
    })

    return block
  }

  // (1020:14) {:else}
  function create_else_block_6(ctx) {
    let option

    const block = {
      c: function create() {
        option = element('option')
        option.textContent = 'No image references'
        option.disabled = true
        option.__value = 'No image references'
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 1020, 16, 26362)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_6.name,
      type: 'else',
      source: '(1020:14) {:else}',
      ctx,
    })

    return block
  }

  // (1016:14) {#if passage && passage.imageRefs}
  function create_if_block_14(ctx) {
    let each_1_anchor
    let each_value = /*passage*/ ctx[6].imageRefs
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$2(
        get_each_context$2(ctx, each_value, i)
      )
    }

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
      },
      p: function update(ctx, dirty) {
        if (dirty[0] & /*passage*/ 64) {
          each_value = /*passage*/ ctx[6].imageRefs
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$2(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block$2(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value.length
        }
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_14.name,
      type: 'if',
      source: '(1016:14) {#if passage && passage.imageRefs}',
      ctx,
    })

    return block
  }

  // (1017:16) {#each passage.imageRefs as ref}
  function create_each_block$2(ctx) {
    let option
    let t_value = /*ref*/ ctx[95] + ''
    let t
    let option_value_value

    const block = {
      c: function create() {
        option = element('option')
        t = text(t_value)
        option.__value = option_value_value = /*ref*/ ctx[95]
        option.value = option.__value
        attr_dev(option, 'class', 'svelte-1bw3apw')
        add_location(option, file$6, 1017, 18, 26265)
      },
      m: function mount(target, anchor) {
        insert_dev(target, option, anchor)
        append_dev(option, t)
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*passage*/ 64 &&
          t_value !== (t_value = /*ref*/ ctx[95] + '')
        )
          set_data_dev(t, t_value)

        if (
          dirty[0] & /*passage*/ 64 &&
          option_value_value !== (option_value_value = /*ref*/ ctx[95])
        ) {
          prop_dev(option, '__value', option_value_value)
          option.value = option.__value
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(option)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block$2.name,
      type: 'each',
      source: '(1017:16) {#each passage.imageRefs as ref}',
      ctx,
    })

    return block
  }

  // (1028:34) {:else}
  function create_else_block_5(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Show')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_5.name,
      type: 'else',
      source: '(1028:34) {:else}',
      ctx,
    })

    return block
  }

  // (1028:12) {#if showMetadata}
  function create_if_block_13(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Hide')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_13.name,
      type: 'if',
      source: '(1028:12) {#if showMetadata}',
      ctx,
    })

    return block
  }

  // (1032:8) {#if userrights && userrights.canEditMetadata}
  function create_if_block_11(ctx) {
    let li
    let a
    let t
    let mounted
    let dispose

    function select_block_type_5(ctx, dirty) {
      if (/*showImageEdit*/ ctx[3]) return create_if_block_12
      return create_else_block_4
    }

    let current_block_type = select_block_type_5(ctx)
    let if_block = current_block_type(ctx)

    const block = {
      c: function create() {
        li = element('li')
        a = element('a')
        if_block.c()
        t = text('\n              Image References')
        attr_dev(a, 'href', '#top')
        attr_dev(a, 'class', 'svelte-1bw3apw')
        add_location(a, file$6, 1033, 12, 26772)
        attr_dev(li, 'class', 'pl svelte-1bw3apw')
        add_location(li, file$6, 1032, 10, 26744)
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor)
        append_dev(li, a)
        if_block.m(a, null)
        append_dev(a, t)

        if (!mounted) {
          dispose = listen_dev(
            a,
            'click',
            prevent_default(/*handleToggleImageEdit*/ ctx[37]),
            false,
            true,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          current_block_type !== (current_block_type = select_block_type_5(ctx))
        ) {
          if_block.d(1)
          if_block = current_block_type(ctx)

          if (if_block) {
            if_block.c()
            if_block.m(a, t)
          }
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li)
        if_block.d()
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_11.name,
      type: 'if',
      source: '(1032:8) {#if userrights && userrights.canEditMetadata}',
      ctx,
    })

    return block
  }

  // (1035:37) {:else}
  function create_else_block_4(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Show')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_4.name,
      type: 'else',
      source: '(1035:37) {:else}',
      ctx,
    })

    return block
  }

  // (1035:14) {#if showImageEdit}
  function create_if_block_12(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Hide')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_12.name,
      type: 'if',
      source: '(1035:14) {#if showImageEdit}',
      ctx,
    })

    return block
  }

  // (1075:40) {:else}
  function create_else_block_3(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Enable')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_3.name,
      type: 'else',
      source: '(1075:40) {:else}',
      ctx,
    })

    return block
  }

  // (1075:12) {#if showReadingLine}
  function create_if_block_10(ctx) {
    let t

    const block = {
      c: function create() {
        t = text('Disable')
      },
      m: function mount(target, anchor) {
        insert_dev(target, t, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(t)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_10.name,
      type: 'if',
      source: '(1075:12) {#if showReadingLine}',
      ctx,
    })

    return block
  }

  // (1096:6) {:else}
  function create_else_block_2$1(ctx) {
    let resizebarportrait
    let current
    resizebarportrait = new ResizeBarPortrait({ $$inline: true })
    resizebarportrait.$on('up', /*resizeUp*/ ctx[39])
    resizebarportrait.$on('down', /*resizeDown*/ ctx[40])
    resizebarportrait.$on('move', /*resizeMove*/ ctx[41])

    const block = {
      c: function create() {
        create_component(resizebarportrait.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(resizebarportrait, target, anchor)
        current = true
      },
      p: noop,
      i: function intro(local) {
        if (current) return
        transition_in(resizebarportrait.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(resizebarportrait.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(resizebarportrait, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_2$1.name,
      type: 'else',
      source: '(1096:6) {:else}',
      ctx,
    })

    return block
  }

  // (1091:6) {#if !isPortrait}
  function create_if_block_9(ctx) {
    let resizebarlandscape
    let current
    resizebarlandscape = new ResizeBarLanscape({ $$inline: true })
    resizebarlandscape.$on('up', /*resizeUp*/ ctx[39])
    resizebarlandscape.$on('down', /*resizeDown*/ ctx[40])
    resizebarlandscape.$on('move', /*resizeMove*/ ctx[41])

    const block = {
      c: function create() {
        create_component(resizebarlandscape.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(resizebarlandscape, target, anchor)
        current = true
      },
      p: noop,
      i: function intro(local) {
        if (current) return
        transition_in(resizebarlandscape.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(resizebarlandscape.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(resizebarlandscape, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_9.name,
      type: 'if',
      source: '(1091:6) {#if !isPortrait}',
      ctx,
    })

    return block
  }

  // (1132:14) {#if userrights && userrights.canEditTranscription}
  function create_if_block_6$1(ctx) {
    let t
    let if_block1_anchor
    let if_block0 =
      !(/*isBlockEditor*/ (ctx[5] || /*isLineEditor*/ ctx[4])) &&
      create_if_block_8(ctx)
    let if_block1 =
      /*isBlockEditor*/ (ctx[5] || /*isLineEditor*/ ctx[4]) &&
      create_if_block_7$1(ctx)

    const block = {
      c: function create() {
        if (if_block0) if_block0.c()
        t = space()
        if (if_block1) if_block1.c()
        if_block1_anchor = empty()
      },
      m: function mount(target, anchor) {
        if (if_block0) if_block0.m(target, anchor)
        insert_dev(target, t, anchor)
        if (if_block1) if_block1.m(target, anchor)
        insert_dev(target, if_block1_anchor, anchor)
      },
      p: function update(ctx, dirty) {
        if (!(/*isBlockEditor*/ (ctx[5] || /*isLineEditor*/ ctx[4]))) {
          if (if_block0) {
            if_block0.p(ctx, dirty)
          } else {
            if_block0 = create_if_block_8(ctx)
            if_block0.c()
            if_block0.m(t.parentNode, t)
          }
        } else if (if_block0) {
          if_block0.d(1)
          if_block0 = null
        }

        if (/*isBlockEditor*/ ctx[5] || /*isLineEditor*/ ctx[4]) {
          if (if_block1) {
            if_block1.p(ctx, dirty)
          } else {
            if_block1 = create_if_block_7$1(ctx)
            if_block1.c()
            if_block1.m(if_block1_anchor.parentNode, if_block1_anchor)
          }
        } else if (if_block1) {
          if_block1.d(1)
          if_block1 = null
        }
      },
      d: function destroy(detaching) {
        if (if_block0) if_block0.d(detaching)
        if (detaching) detach_dev(t)
        if (if_block1) if_block1.d(detaching)
        if (detaching) detach_dev(if_block1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_6$1.name,
      type: 'if',
      source: '(1132:14) {#if userrights && userrights.canEditTranscription}',
      ctx,
    })

    return block
  }

  // (1133:16) {#if !(isBlockEditor || isLineEditor)}
  function create_if_block_8(ctx) {
    let li0
    let button0
    let t0
    let button0_disabled_value
    let t1
    let li1
    let button1
    let t2
    let button1_disabled_value
    let mounted
    let dispose

    const block = {
      c: function create() {
        li0 = element('li')
        button0 = element('button')
        t0 = text('Line Editor')
        t1 = space()
        li1 = element('li')
        button1 = element('button')
        t2 = text('Block Editor')
        attr_dev(button0, 'type', 'button')
        attr_dev(button0, 'class', ' svelte-1bw3apw')
        button0.disabled = button0_disabled_value =
          /*isBlockEditor*/ ctx[5] && !(/*isLineEditor*/ ctx[4])
        add_location(button0, file$6, 1134, 20, 30218)
        attr_dev(li0, 'class', 'svelte-1bw3apw')
        add_location(li0, file$6, 1133, 18, 30193)
        attr_dev(button1, 'type', 'button')
        attr_dev(button1, 'class', ' svelte-1bw3apw')
        button1.disabled = button1_disabled_value =
          !(/*isBlockEditor*/ ctx[5]) && /*isLineEditor*/ ctx[4]
        add_location(button1, file$6, 1144, 20, 30545)
        attr_dev(li1, 'class', 'svelte-1bw3apw')
        add_location(li1, file$6, 1143, 18, 30520)
      },
      m: function mount(target, anchor) {
        insert_dev(target, li0, anchor)
        append_dev(li0, button0)
        append_dev(button0, t0)
        insert_dev(target, t1, anchor)
        insert_dev(target, li1, anchor)
        append_dev(li1, button1)
        append_dev(button1, t2)

        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              'click',
              /*handleLineEditorClick*/ ctx[44],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              'click',
              /*handleBlockEditorClick*/ ctx[43],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (
          dirty[0] & /*isBlockEditor, isLineEditor*/ 48 &&
          button0_disabled_value !==
            (button0_disabled_value =
              /*isBlockEditor*/ ctx[5] && !(/*isLineEditor*/ ctx[4]))
        ) {
          prop_dev(button0, 'disabled', button0_disabled_value)
        }

        if (
          dirty[0] & /*isBlockEditor, isLineEditor*/ 48 &&
          button1_disabled_value !==
            (button1_disabled_value =
              !(/*isBlockEditor*/ ctx[5]) && /*isLineEditor*/ ctx[4])
        ) {
          prop_dev(button1, 'disabled', button1_disabled_value)
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(li0)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(li1)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_8.name,
      type: 'if',
      source: '(1133:16) {#if !(isBlockEditor || isLineEditor)}',
      ctx,
    })

    return block
  }

  // (1154:16) {#if isBlockEditor || isLineEditor}
  function create_if_block_7$1(ctx) {
    let li0
    let button0
    let t1
    let li1
    let button1
    let mounted
    let dispose

    const block = {
      c: function create() {
        li0 = element('li')
        button0 = element('button')
        button0.textContent = 'Save'
        t1 = space()
        li1 = element('li')
        button1 = element('button')
        button1.textContent = 'Cancel'
        attr_dev(button0, 'type', 'button')
        attr_dev(button0, 'class', 'btn_save svelte-1bw3apw')
        add_location(button0, file$6, 1155, 20, 30947)
        attr_dev(li0, 'class', 'svelte-1bw3apw')
        add_location(li0, file$6, 1154, 18, 30922)
        attr_dev(button1, 'type', 'button')
        attr_dev(button1, 'class', 'btn_cancel svelte-1bw3apw')
        add_location(button1, file$6, 1163, 20, 31218)
        attr_dev(li1, 'class', 'svelte-1bw3apw')
        add_location(li1, file$6, 1162, 18, 31193)
      },
      m: function mount(target, anchor) {
        insert_dev(target, li0, anchor)
        append_dev(li0, button0)
        insert_dev(target, t1, anchor)
        insert_dev(target, li1, anchor)
        append_dev(li1, button1)

        if (!mounted) {
          dispose = [
            listen_dev(
              button0,
              'click',
              /*handleTranscriptionEditorSave*/ ctx[46],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              button1,
              'click',
              /*handleTranscriptionEditorCancel*/ ctx[45],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(li0)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(li1)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_7$1.name,
      type: 'if',
      source: '(1154:16) {#if isBlockEditor || isLineEditor}',
      ctx,
    })

    return block
  }

  // (1188:14) {:else}
  function create_else_block_1$1(ctx) {
    let lineeditor
    let current

    lineeditor = new LineEditor({
      props: {
        lineIndex: /*lineIndex*/ ctx[13],
        transcriptionEditNav: /*transcriptionEditNav*/ ctx[14],
        currentTranscriptionLines: /*currentTranscriptionLines*/ ctx[18],
        isLineEditor: /*isLineEditor*/ ctx[4],
        transcriptionFontSize: /*transcriptionFontSize*/ ctx[7],
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        create_component(lineeditor.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(lineeditor, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const lineeditor_changes = {}
        if (dirty[0] & /*lineIndex*/ 8192)
          lineeditor_changes.lineIndex = /*lineIndex*/ ctx[13]
        if (dirty[0] & /*transcriptionEditNav*/ 16384)
          lineeditor_changes.transcriptionEditNav =
            /*transcriptionEditNav*/ ctx[14]
        if (dirty[0] & /*currentTranscriptionLines*/ 262144)
          lineeditor_changes.currentTranscriptionLines =
            /*currentTranscriptionLines*/ ctx[18]
        if (dirty[0] & /*isLineEditor*/ 16)
          lineeditor_changes.isLineEditor = /*isLineEditor*/ ctx[4]
        if (dirty[0] & /*transcriptionFontSize*/ 128)
          lineeditor_changes.transcriptionFontSize =
            /*transcriptionFontSize*/ ctx[7]
        lineeditor.$set(lineeditor_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(lineeditor.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(lineeditor.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(lineeditor, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_1$1.name,
      type: 'else',
      source: '(1188:14) {:else}',
      ctx,
    })

    return block
  }

  // (1182:14) {#if isBlockEditor}
  function create_if_block_5$1(ctx) {
    let blockeditor
    let current

    blockeditor = new BlockEditor({
      props: {
        passagetext: /*passagetext*/ ctx[15],
        newpassagetext: /*newpassagetext*/ ctx[19],
        transcriptionFontSize: /*transcriptionFontSize*/ ctx[7],
      },
      $$inline: true,
    })

    blockeditor.$on('update', /*handleUpdateNewPassageText*/ ctx[42])

    const block = {
      c: function create() {
        create_component(blockeditor.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(blockeditor, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const blockeditor_changes = {}
        if (dirty[0] & /*passagetext*/ 32768)
          blockeditor_changes.passagetext = /*passagetext*/ ctx[15]
        if (dirty[0] & /*newpassagetext*/ 524288)
          blockeditor_changes.newpassagetext = /*newpassagetext*/ ctx[19]
        if (dirty[0] & /*transcriptionFontSize*/ 128)
          blockeditor_changes.transcriptionFontSize =
            /*transcriptionFontSize*/ ctx[7]
        blockeditor.$set(blockeditor_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(blockeditor.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(blockeditor.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(blockeditor, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_5$1.name,
      type: 'if',
      source: '(1182:14) {#if isBlockEditor}',
      ctx,
    })

    return block
  }

  // (1198:10) {#if showMetadata}
  function create_if_block_3$2(ctx) {
    let div1
    let ul
    let li0
    let label
    let t1
    let span
    let t2
    let t3
    let li1
    let a
    let t5
    let div0
    let metadataeditor
    let current
    let mounted
    let dispose
    let if_block =
      /*userrights*/ ctx[16] &&
      /*userrights*/ ctx[16].canEditMetadata &&
      create_if_block_4$2(ctx)

    metadataeditor = new MetadataEditor({
      props: {
        passage: /*passage*/ ctx[6],
        savedata: /*savedata*/ ctx[21],
        canEditMetadata: /*userrights*/ ctx[16].canEditMetadata,
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        div1 = element('div')
        ul = element('ul')
        li0 = element('li')
        label = element('label')
        label.textContent = 'Metadata'
        t1 = space()
        span = element('span')
        t2 = space()
        if (if_block) if_block.c()
        t3 = space()
        li1 = element('li')
        a = element('a')
        a.textContent = '×'
        t5 = space()
        div0 = element('div')
        create_component(metadataeditor.$$.fragment)
        attr_dev(label, 'for', 'metadata')
        attr_dev(label, 'class', 'svelte-1bw3apw')
        add_location(label, file$6, 1200, 20, 32461)
        attr_dev(li0, 'class', 'svelte-1bw3apw')
        add_location(li0, file$6, 1200, 16, 32457)
        set_style(span, 'flex-grow', '1')
        attr_dev(span, 'class', 'svelte-1bw3apw')
        add_location(span, file$6, 1201, 16, 32521)
        attr_dev(a, 'href', '#top')
        attr_dev(a, 'class', 'close-pane svelte-1bw3apw')
        add_location(a, file$6, 1206, 18, 32762)
        attr_dev(li1, 'class', 'fl svelte-1bw3apw')
        add_location(li1, file$6, 1205, 16, 32728)
        attr_dev(ul, 'class', 'toolbar svelte-1bw3apw')
        set_style(ul, 'display', 'flex')
        add_location(ul, file$6, 1199, 14, 32397)
        attr_dev(div0, 'class', 'metadata svelte-1bw3apw')
        add_location(div0, file$6, 1214, 14, 33003)
        attr_dev(div1, 'class', 'pane svelte-1bw3apw')
        add_location(div1, file$6, 1198, 12, 32364)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor)
        append_dev(div1, ul)
        append_dev(ul, li0)
        append_dev(li0, label)
        append_dev(ul, t1)
        append_dev(ul, span)
        append_dev(ul, t2)
        if (if_block) if_block.m(ul, null)
        append_dev(ul, t3)
        append_dev(ul, li1)
        append_dev(li1, a)
        append_dev(div1, t5)
        append_dev(div1, div0)
        mount_component(metadataeditor, div0, null)
        current = true

        if (!mounted) {
          dispose = listen_dev(
            a,
            'click',
            prevent_default(/*handleHideMetadata*/ ctx[34]),
            false,
            true,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (/*userrights*/ ctx[16] && /*userrights*/ ctx[16].canEditMetadata) {
          if (if_block) {
            if_block.p(ctx, dirty)
          } else {
            if_block = create_if_block_4$2(ctx)
            if_block.c()
            if_block.m(ul, t3)
          }
        } else if (if_block) {
          if_block.d(1)
          if_block = null
        }

        const metadataeditor_changes = {}
        if (dirty[0] & /*passage*/ 64)
          metadataeditor_changes.passage = /*passage*/ ctx[6]
        if (dirty[0] & /*savedata*/ 2097152)
          metadataeditor_changes.savedata = /*savedata*/ ctx[21]
        if (dirty[0] & /*userrights*/ 65536)
          metadataeditor_changes.canEditMetadata =
            /*userrights*/ ctx[16].canEditMetadata
        metadataeditor.$set(metadataeditor_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(metadataeditor.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(metadataeditor.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1)
        if (if_block) if_block.d()
        destroy_component(metadataeditor)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_3$2.name,
      type: 'if',
      source: '(1198:10) {#if showMetadata}',
      ctx,
    })

    return block
  }

  // (1203:16) {#if userrights && userrights.canEditMetadata}
  function create_if_block_4$2(ctx) {
    let button
    let mounted
    let dispose

    const block = {
      c: function create() {
        button = element('button')
        button.textContent = 'save'
        attr_dev(button, 'class', 'svelte-1bw3apw')
        add_location(button, file$6, 1203, 18, 32633)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*click_handler*/ ctx[61],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_4$2.name,
      type: 'if',
      source: '(1203:16) {#if userrights && userrights.canEditMetadata}',
      ctx,
    })

    return block
  }

  // (1223:10) {#if showImageEdit}
  function create_if_block_1$2(ctx) {
    let div1
    let ul
    let li0
    let label
    let t1
    let span
    let t2
    let t3
    let li1
    let a
    let t5
    let div0
    let imageeditor
    let current
    let mounted
    let dispose
    let if_block =
      /*userrights*/ ctx[16] &&
      /*userrights*/ ctx[16].canEditMetadata &&
      create_if_block_2$2(ctx)

    imageeditor = new ImageEditor({
      props: {
        passage: /*passage*/ ctx[6],
        colID: /*id_col*/ ctx[0],
        savedata: /*savedata*/ ctx[21],
      },
      $$inline: true,
    })

    imageeditor.$on('imageurlchange', /*handleImageUrlChange*/ ctx[25])

    const block = {
      c: function create() {
        div1 = element('div')
        ul = element('ul')
        li0 = element('li')
        label = element('label')
        label.textContent = 'Image Editor'
        t1 = space()
        span = element('span')
        t2 = space()
        if (if_block) if_block.c()
        t3 = space()
        li1 = element('li')
        a = element('a')
        a.textContent = '×'
        t5 = space()
        div0 = element('div')
        create_component(imageeditor.$$.fragment)
        attr_dev(label, 'for', 'imageeditor')
        attr_dev(label, 'class', 'svelte-1bw3apw')
        add_location(label, file$6, 1225, 20, 33376)
        attr_dev(li0, 'class', 'svelte-1bw3apw')
        add_location(li0, file$6, 1225, 16, 33372)
        set_style(span, 'flex-grow', '1')
        attr_dev(span, 'class', 'svelte-1bw3apw')
        add_location(span, file$6, 1226, 16, 33443)
        attr_dev(a, 'href', '#top')
        attr_dev(a, 'class', 'close-pane svelte-1bw3apw')
        add_location(a, file$6, 1231, 18, 33684)
        attr_dev(li1, 'class', 'fl svelte-1bw3apw')
        add_location(li1, file$6, 1230, 16, 33650)
        attr_dev(ul, 'class', 'toolbar svelte-1bw3apw')
        set_style(ul, 'display', 'flex')
        add_location(ul, file$6, 1224, 14, 33312)
        attr_dev(div0, 'class', 'imageeditor svelte-1bw3apw')
        add_location(div0, file$6, 1239, 14, 33926)
        attr_dev(div1, 'class', 'pane svelte-1bw3apw')
        add_location(div1, file$6, 1223, 12, 33279)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div1, anchor)
        append_dev(div1, ul)
        append_dev(ul, li0)
        append_dev(li0, label)
        append_dev(ul, t1)
        append_dev(ul, span)
        append_dev(ul, t2)
        if (if_block) if_block.m(ul, null)
        append_dev(ul, t3)
        append_dev(ul, li1)
        append_dev(li1, a)
        append_dev(div1, t5)
        append_dev(div1, div0)
        mount_component(imageeditor, div0, null)
        current = true

        if (!mounted) {
          dispose = listen_dev(
            a,
            'click',
            prevent_default(/*handleHideImageEdit*/ ctx[38]),
            false,
            true,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, dirty) {
        if (/*userrights*/ ctx[16] && /*userrights*/ ctx[16].canEditMetadata) {
          if (if_block) {
            if_block.p(ctx, dirty)
          } else {
            if_block = create_if_block_2$2(ctx)
            if_block.c()
            if_block.m(ul, t3)
          }
        } else if (if_block) {
          if_block.d(1)
          if_block = null
        }

        const imageeditor_changes = {}
        if (dirty[0] & /*passage*/ 64)
          imageeditor_changes.passage = /*passage*/ ctx[6]
        if (dirty[0] & /*id_col*/ 1)
          imageeditor_changes.colID = /*id_col*/ ctx[0]
        if (dirty[0] & /*savedata*/ 2097152)
          imageeditor_changes.savedata = /*savedata*/ ctx[21]
        imageeditor.$set(imageeditor_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(imageeditor.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(imageeditor.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div1)
        if (if_block) if_block.d()
        destroy_component(imageeditor)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$2.name,
      type: 'if',
      source: '(1223:10) {#if showImageEdit}',
      ctx,
    })

    return block
  }

  // (1228:16) {#if userrights && userrights.canEditMetadata}
  function create_if_block_2$2(ctx) {
    let button
    let mounted
    let dispose

    const block = {
      c: function create() {
        button = element('button')
        button.textContent = 'save'
        attr_dev(button, 'class', 'svelte-1bw3apw')
        add_location(button, file$6, 1228, 18, 33555)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*click_handler_1*/ ctx[62],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_2$2.name,
      type: 'if',
      source: '(1228:16) {#if userrights && userrights.canEditMetadata}',
      ctx,
    })

    return block
  }

  function create_fragment$7(ctx) {
    let div
    let current_block_type_index
    let if_block
    let current
    const if_block_creators = [create_if_block$3, create_else_block$2]
    const if_blocks = []

    function select_block_type(ctx, dirty) {
      if (/*err*/ ctx[11]) return 0
      return 1
    }

    current_block_type_index = select_block_type(ctx)
    if_block = if_blocks[current_block_type_index] =
      if_block_creators[current_block_type_index](ctx)

    const block = {
      c: function create() {
        div = element('div')
        if_block.c()
        attr_dev(div, 'class', 'flex fcol pheight scroll svelte-1bw3apw')
        toggle_class(div, 'wait-cursor', /*loading*/ ctx[20])
        add_location(div, file$6, 957, 0, 24097)
      },
      l: function claim(nodes) {
        throw new Error_1$3(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        if_blocks[current_block_type_index].m(div, null)
        current = true
      },
      p: function update(ctx, dirty) {
        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type(ctx)

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null
          })

          check_outros()
          if_block = if_blocks[current_block_type_index]

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] =
              if_block_creators[current_block_type_index](ctx)
            if_block.c()
          } else {
            if_block.p(ctx, dirty)
          }

          transition_in(if_block, 1)
          if_block.m(div, null)
        }

        if (!current || dirty[0] & /*loading*/ 1048576) {
          toggle_class(div, 'wait-cursor', /*loading*/ ctx[20])
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        if_blocks[current_block_type_index].d()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$7.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  async function getCollectionUserRights$1(id_col) {
    const res = await fetch(`/api/v1/collectionuserrights/${id_col}`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  async function getUser$2() {
    const res = await fetch(`/api/v1/user`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  function instance$7($$self, $$props, $$invalidate) {
    let validSource
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('CollectionOverview', slots, [])
    let { id_col, urn } = $$props
    let transcriptionFontSize = '1em'
    let tFontSize = 1

    let previewViewer = undefined,
      viewerOpts = undefined,
      previewVisible = false,
      previewFailed = false,
      selectedImageRef = undefined,
      didMount = false,
      selectedCatalogUrn,
      showMetadata = false,
      showImageEdit = false,
      showReadingLine = false,
      horizontalLine,
      previewContainer = undefined,
      previewHeight = 350,
      previewWidth = 500,
      err,
      isPortrait = false,
      newpassage,
      lineIndex,
      isLineEditor = false,
      isBlockEditor = false,
      transcriptionEditNav,
      passagetext,
      passage,
      user,
      userrights,
      passageId,
      currentTranscriptionLines = [],
      prevTranscriptionLines,
      newpassagetext,
      loading = true,
      savedata = false,
      protocol = 'static',
      images = [],
      schemes = [],
      imageURL,
      retryCount = 3,
      isFullyLoaded = false,
      isErrorLoading = false,
      hidePassageToolbar = false,
      hideTranscriptionToolbar = false,
      autoChangeOrientation = true,
      newUrn,
      sectionOpenSeaDragon,
      sectionTranscription,
      sectionOpenSeaDragonSize,
      sectionTranscriptionSize // = passage.catalog.urn,

    onMount(() => {
      sectionOpenSeaDragon = document.getElementById('openseadragon_sec')
      sectionTranscription = document.getElementById('transcription_sec')

      //await loadData();
      $$invalidate(53, (didMount = true))

      previewWidth = window.innerWidth / 2 - 6

      function updateFolioid() {
        const params = new URLSearchParams(window.location.search)
        const folioid = params.get('folioid')

        if (folioid) {
          // If a folioid exists in the query string, use it as the selected image ref
          $$invalidate(1, (selectedImageRef = folioid))
        } else if (
          passage &&
          passage.imageRefs &&
          passage.imageRefs.length > 0
        ) {
          // Otherwise, if there are image references, use the first one
          $$invalidate(1, (selectedImageRef = passage.imageRefs[0]))
        } else {
          // If no image references exist, set selectedImageRef to null or some default value
          $$invalidate(1, (selectedImageRef = null))
        }
      }

      // Update folioid when the component mounts
      updateFolioid()

      // And whenever the URL changes
      window.addEventListener('popstate', updateFolioid)

      return () => {
        // Clean up the event listener when the component is unmounted
        window.removeEventListener('popstate', updateFolioid)
      }
    })

    async function getPassage(id_col, urn) {
      $$invalidate(20, (loading = true))
      const res = await fetch(`/api/v1/passage/${id_col}/${urn}`)

      if (res.ok) {
        const d = await res.json()
        return d.data
      } else {
        throw new Error(res.body)
      }
    }

    async function getImages(id_col) {
      $$invalidate(20, (loading = true))
      const res = await fetch(`/api/v1/collectionimages/${id_col}`)

      if (res.ok) {
        const d = await res.json()
        return d.data
      } else {
        throw new Error(res.body)
      }
    }

    async function displayExternalMedia(imageUrl) {
      // console.log('displayExternalMedia', imageUrl)
      try {
        const [isManifest, imageManifest] = await isIIIFImage(imageUrl)

        if (isManifest) {
          $$invalidate(52, (viewerOpts = getIIIFOpts('preview', imageManifest)))
          protocol = 'iiif'
        } else {
          $$invalidate(52, (viewerOpts = getStaticOpts('preview', imageUrl)))
          protocol = 'static'
        }
      } catch (err) {
        if (!err.message.includes('NetworkError')) {
          console.error(err.message)
        }

        $$invalidate(52, (viewerOpts = getStaticOpts('preview', imageUrl)))
        protocol = 'static'
      }
    }

    function handleImageUrlChange(event) {
      //console.log('handleImageUrlChange imageURLiii:')
      $$invalidate(1, (selectedImageRef = event.detail.imageURL))

      getimageURLfromCollection()
    } //console.log('handleImageUrlChange imageURL:', selectedImageRef)
    // Update the OpenSeadragon viewer with the new imageURL

    function createViewer(opts) {
      opts.defaultZoomLevel = 1
      opts.preserveImageSizeOnResize = true
      opts.visibilityRatio = 1
      opts.constrainDuringPan = true
      const { tileSources, ...otherOpts } = opts
      document.getElementById('osd_buttons').innerHTML = ''
      $$invalidate(51, (previewViewer = openseadragon(otherOpts)))
      previewViewer.open(tileSources)
      createLine()

      previewViewer.addHandler('open-failed', (e) => {
        if (retryCount > 0) {
          retryCount--
          previewVisible = false
          previewViewer.destroy()
          previewFailed = true
          $$invalidate(
            52,
            (viewerOpts = getInternalOpts('preview', selectedImageRef))
          )
          createViewer(opts)
        } else {
          isErrorLoading = true //updateViewer(passage.imageRefs)
          isFullyLoaded = false
          updateLoadingIndicator()
          previewVisible = false
          previewViewer.destroy()
          previewFailed = true
        }
      })

      previewViewer.addHandler('open', (e) => {
        isFullyLoaded = false
        isErrorLoading = false
        updateLoadingIndicator()
        var x = previewViewer.source.dimensions.x
        var y = previewViewer.source.dimensions.y

        if (y >= x && autoChangeOrientation) {
          $$invalidate(12, (isPortrait = true))
        } else {
          $$invalidate(12, (isPortrait = false))
        }

        previewVisible = true
      })

      previewViewer.world.addHandler('add-item', function (event) {
        var tiledImage = event.item

        tiledImage.addHandler('fully-loaded-change', function () {
          var newFullyLoaded = areAllFullyLoaded()

          if (newFullyLoaded !== isFullyLoaded) {
            isFullyLoaded = newFullyLoaded
            updateLoadingIndicator()
          }
        })
      })

      previewViewer.open(tileSources)
      handleToggleLine()
      handleToggleLine()
    }

    function areAllFullyLoaded() {
      var tiledImage
      var count = previewViewer.world.getItemCount()

      for (var i = 0; i < count; i++) {
        tiledImage = previewViewer.world.getItemAt(i)

        if (!tiledImage.getFullyLoaded()) {
          return false
        }
      }

      return true
    }

    function updateLoadingIndicator() {
      if (!document.querySelector('.loading')) {
        return
      }

      if (!isFullyLoaded && !isErrorLoading) {
        document.querySelector('.loading').style.display = 'flex'
        document.querySelector('.loading').textContent = 'Loading image...'
      } else if (isFullyLoaded || !isErrorLoading) {
        document.querySelector('.loading').style.display = 'none'
      } else if (isErrorLoading) {
        document.querySelector('.loading').style.display = 'flex'
        document.querySelector('.loading').textContent =
          'Error loading image...'
      } else if (!isFullyLoaded) {
        document.querySelector('.loading').style.display = 'flex'
        document.querySelector('.loading').textContent = 'Loading image...'
      }
    }

    function getimageURLfromCollection() {
      // if selectedImageRef is in images.imagename array
      // get this images element from images array
      $$invalidate(54, (imageURL = undefined))

      for (const element of images) {
        // console.log('Element:', element, selectedImageRef);
        if (element.imagename === selectedImageRef) {
          $$invalidate(54, (imageURL = element.location))
          break
        }

        $$invalidate(54, (imageURL = selectedImageRef))
      }
    }

    function updateViewer(refs) {
      if (previewViewer) {
        previewViewer.destroy()
      }

      //  console.log('viewerOpts', viewerOpts)
      if (Array.isArray(refs) && refs.length > 0) {
        if (!selectedImageRef || !refs.includes(selectedImageRef)) {
          $$invalidate(1, (selectedImageRef = refs[0]))
        }

        // console.log('before getImageFromCollection', viewerOpts)
        getimageURLfromCollection()
      }
    }

    function handleSelect(event) {
      $$invalidate(55, (newUrn = selectedCatalogUrn + event.target.value))
    }

    function handleWitnessSelection() {
      $$invalidate(55, (newUrn = selectedCatalogUrn))
    }

    function handleFirstPassage() {
      $$invalidate(55, (newUrn = passage.firstPassage))
    }

    function handlePreviousPassage() {
      $$invalidate(55, (newUrn = passage.previousPassage))
    }

    function handleNextPassage() {
      if (passage.nextPassage !== '') {
        $$invalidate(55, (newUrn = passage.nextPassage))
      }
    }

    function handleLastPassage() {
      if (passage.lastPassage !== '') {
        $$invalidate(55, (newUrn = passage.lastPassage))
      }
    }

    function handleFolioSelection() {
      navigate(`/view/${id_col}/${newUrn}?folioid=${selectedImageRef}`)
    }

    function handleToggleMetadata() {
      $$invalidate(2, (showMetadata = !showMetadata))
    }

    function handleHideMetadata() {
      $$invalidate(2, (showMetadata = false))
    }

    function handleToggleLine() {
      $$invalidate(9, (showReadingLine = !showReadingLine))

      if (showReadingLine) {
        document.getElementById('lineOpts').style.display = 'flex'
        horizontalLine.style.display = 'block'
        updateLinePosition()
        return
      }

      document.getElementById('lineOpts').style.display = 'none'
      horizontalLine.style.display = 'none'
    }

    function createLine() {
      horizontalLine = document.createElement('div')
      horizontalLine.id = 'hline'
      horizontalLine.style.position = 'absolute'
      horizontalLine.style.width = '100%'
      horizontalLine.style.height = '3px'
      horizontalLine.style.backgroundColor = 'red'
      horizontalLine.style.pointerEvents = 'none'
      horizontalLine.style.display = 'none'
      previewViewer.canvas.appendChild(horizontalLine)
    }

    function updateLinePosition() {
      previewViewer.viewport.pixelFromPoint(
        previewViewer.viewport.getHomeBounds().getTopLeft()
      )
      const viewportY = previewViewer.viewport.getCenter(true).y
      var lineY = previewViewer.viewport.viewportToViewerElementCoordinates(
        new openseadragon.Point(0, viewportY)
      ).y
      lineY +=
        (parseFloat(document.getElementById('lineOffsetRange').value) * lineY) /
        100

      //horizontalLine.style.top = `${lineY - viewportOrigin.y}px`;
      horizontalLine.style.top = `${lineY}px`

      // add colorPicker
      horizontalLine.style.backgroundColor =
        document.getElementById('myColorPicker').value

      localStorage.setItem(
        'linecolor',
        document.getElementById('myColorPicker').value
      )
    }

    function handleToggleImageEdit() {
      $$invalidate(3, (showImageEdit = !showImageEdit))
      autoChangeOrientation = false
    }

    function handleHideImageEdit() {
      $$invalidate(3, (showImageEdit = false))
      autoChangeOrientation = true
    }

    function handleResize(e) {
      console.log(e.detail)

      if (isPortrait) {
        previewWidth = e.detail.x - previewContainer.offsetLeft
      } else {
        previewHeight = e.detail.y - previewContainer.offsetTop
      }
    }

    function resizeUp() {
      sectionOpenSeaDragonSize = null
      sectionTranscriptionSize = null
    }

    function resizeDown() {
      var osd = window.getComputedStyle(sectionOpenSeaDragon)

      sectionOpenSeaDragonSize = {
        width: parseFloat(osd.width),
        height: parseFloat(osd.height),
      }

      var trans = window.getComputedStyle(sectionTranscription)

      sectionTranscriptionSize = {
        width: parseFloat(trans.width),
        height: parseFloat(trans.height),
      }
    }

    function resizeMove(e) {
      if (sectionTranscriptionSize && sectionOpenSeaDragonSize) {
        if (isPortrait) {
          sectionOpenSeaDragon.style.width =
            sectionOpenSeaDragonSize.width + e.detail.x + 'px'
          sectionTranscription.style.width =
            sectionTranscriptionSize.width - e.detail.x + 'px'
        } else {
          sectionOpenSeaDragon.style.height =
            sectionOpenSeaDragonSize.height + e.detail.y + 'px'
          sectionTranscription.style.height =
            sectionTranscriptionSize.height - e.detail.y + 'px'
        }
      }
    }

    function handleUpdateNewPassageText(event) {
      $$invalidate(19, (newpassagetext = event.detail))
    }

    function handleBlockEditorClick() {
      $$invalidate(5, (isBlockEditor = !isBlockEditor))
      $$invalidate(15, (passagetext = passage.transcriptionLines.join('\r\n')))
    }

    function handleLineEditorClick() {
      $$invalidate(4, (isLineEditor = !isLineEditor))
      newpassage = passage
      prevTranscriptionLines = [...passage.transcriptionLines]
      $$invalidate(
        18,
        (currentTranscriptionLines = [...passage.transcriptionLines])
      )
      $$invalidate(13, (lineIndex = 0))
      const spans = document.querySelectorAll(
        '.transcription  span[contenteditable]'
      )

      spans.forEach((span) => {
        span.addEventListener('keydown', (event) => {
          if (event.key === 'Enter') {
            event.returnValue = false
          }
        })

        span.addEventListener('input', (event) => {
          const index = event.target.getAttribute('data-index')
          const newText = event.target.textContent
          $$invalidate(
            18,
            (currentTranscriptionLines[index] = newText),
            currentTranscriptionLines
          )
        })

        span.addEventListener('click', (event) => {
          const selectedLine = event.target.closest('[data-index]')

          if (selectedLine) {
            $$invalidate(
              13,
              (lineIndex = selectedLine.getAttribute('data-index'))
            )
            console.log('Selected line index:', lineIndex)
            $$invalidate(14, (transcriptionEditNav = true))
          }
        })
      })
    }

    function handleTranscriptionEditorCancel() {
      if (isBlockEditor) {
        $$invalidate(5, (isBlockEditor = false))
      }

      if (isLineEditor) {
        $$invalidate(4, (isLineEditor = false))
        $$invalidate(
          18,
          (currentTranscriptionLines = [...prevTranscriptionLines])
        )
      }
    } //location.reload(true)

    function handleTranscriptionEditorSave() {
      if (isBlockEditor) {
        SaveBlockEditorTrancription()
      }

      if (isLineEditor) {
        SaveLineEditorTrancription()
      }
    } //location.reload(true)

    async function SaveLineEditorTrancription() {
      // passage.transcriptionlines = currentTranscriptionLines.map(
      //   (obj) => obj.line
      // )
      // passagetext = passage.transcriptionLines.join('\r\n')
      newpassage.transcriptionlines = [...currentTranscriptionLines]

      await fetch('/api/v2/savepassage', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newpassage),
      }).then((res) => {
        window.location.href = `/view/${id_col}/${passage.passageid}`
      })
    }

    async function SaveBlockEditorTrancription() {
      if (newpassagetext == undefined) {
        console.log('newpassagetext empty')
        return
      }

      let data = {
        colid: passage.colid,
        passageid: passage.passageid,
        text: newpassagetext,
      }

      console.log('SaveBlockEditorTrancription data', data)
      document.body.style.cursor = 'wait'

      try {
        const response = await fetch('/api/v2/savepassagetext', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        })

        // If the fetch operation is successful, reload the page
        if (response.ok) {
          window.location.href = `/view/${id_col}/${passage.passageid}`
        } else {
          console.error('Failed to save data:', response)
        }
      } catch (error) {
        console.error('Error during fetch:', error)
      } finally {
        // Restore the cursor to its default style
        document.body.style.cursor = 'default'
      }
    }

    function setTranscriptionFontSize() {
      //var elem = document.getElementById("transcription")
      //elem.style.fontSize = transcriptionFontSize+"em"
      $$invalidate(7, (transcriptionFontSize = tFontSize + 'em'))
    }

    function fontDown() {
      if (tFontSize > 0.5) {
        tFontSize -= 0.1
      }

      setTranscriptionFontSize()
    }

    function fontReset() {
      tFontSize = 1
      setTranscriptionFontSize()
    }

    function fontUp() {
      if (tFontSize < 1.5) {
        tFontSize += 0.1
      }

      setTranscriptionFontSize()
    }

    $$self.$$.on_mount.push(function () {
      if (
        id_col === undefined &&
        !('id_col' in $$props || $$self.$$.bound[$$self.$$.props['id_col']])
      ) {
        console_1$3.warn(
          "<CollectionOverview> was created without expected prop 'id_col'"
        )
      }

      if (
        urn === undefined &&
        !('urn' in $$props || $$self.$$.bound[$$self.$$.props['urn']])
      ) {
        console_1$3.warn(
          "<CollectionOverview> was created without expected prop 'urn'"
        )
      }
    })

    const writable_props = ['id_col', 'urn']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$3.warn(
          `<CollectionOverview> was created with unknown prop '${key}'`
        )
    })

    function select0_change_handler() {
      selectedCatalogUrn = select_value(this)
      ;($$invalidate(8, selectedCatalogUrn), $$invalidate(0, id_col)),
        $$invalidate(50, urn)
      ;($$invalidate(6, passage), $$invalidate(0, id_col)),
        $$invalidate(50, urn)
    }

    function select1_change_handler() {
      passageId = select_value(this)
      ;(($$invalidate(17, passageId), $$invalidate(0, id_col)),
      $$invalidate(50, urn)),
        $$invalidate(6, passage)
      ;($$invalidate(22, schemes), $$invalidate(0, id_col)),
        $$invalidate(50, urn)
    }

    function select2_change_handler() {
      selectedImageRef = select_value(this)
      $$invalidate(1, selectedImageRef)
      ;($$invalidate(6, passage), $$invalidate(0, id_col)),
        $$invalidate(50, urn)
    }

    function div8_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        previewContainer = $$value
        $$invalidate(10, previewContainer)
      })
    }

    const click_handler = () => $$invalidate(21, (savedata = true))
    const click_handler_1 = () => $$invalidate(21, (savedata = true))

    $$self.$$set = ($$props) => {
      if ('id_col' in $$props) $$invalidate(0, (id_col = $$props.id_col))
      if ('urn' in $$props) $$invalidate(50, (urn = $$props.urn))
    }

    $$self.$capture_state = () => ({
      onMount,
      Link,
      navigate,
      OpenSeadragon: openseadragon,
      ResizeBarLandscape: ResizeBarLanscape,
      ResizeBarPortrait,
      LineEditor,
      BlockEditor,
      MetadataEditor,
      ImageEditor,
      validateUrn: ctsUrn_1,
      validateHttpUrl,
      isIIIFImage,
      getStaticOpts,
      getIIIFOpts,
      getInternalOpts,
      id_col,
      urn,
      transcriptionFontSize,
      tFontSize,
      previewViewer,
      viewerOpts,
      previewVisible,
      previewFailed,
      selectedImageRef,
      didMount,
      selectedCatalogUrn,
      showMetadata,
      showImageEdit,
      showReadingLine,
      horizontalLine,
      previewContainer,
      previewHeight,
      previewWidth,
      err,
      isPortrait,
      newpassage,
      lineIndex,
      isLineEditor,
      isBlockEditor,
      transcriptionEditNav,
      passagetext,
      passage,
      user,
      userrights,
      passageId,
      currentTranscriptionLines,
      prevTranscriptionLines,
      newpassagetext,
      loading,
      savedata,
      protocol,
      images,
      schemes,
      imageURL,
      retryCount,
      isFullyLoaded,
      isErrorLoading,
      hidePassageToolbar,
      hideTranscriptionToolbar,
      autoChangeOrientation,
      newUrn,
      sectionOpenSeaDragon,
      sectionTranscription,
      sectionOpenSeaDragonSize,
      sectionTranscriptionSize,
      getCollectionUserRights: getCollectionUserRights$1,
      getPassage,
      getImages,
      getUser: getUser$2,
      displayExternalMedia,
      handleImageUrlChange,
      createViewer,
      areAllFullyLoaded,
      updateLoadingIndicator,
      getimageURLfromCollection,
      updateViewer,
      handleSelect,
      handleWitnessSelection,
      handleFirstPassage,
      handlePreviousPassage,
      handleNextPassage,
      handleLastPassage,
      handleFolioSelection,
      handleToggleMetadata,
      handleHideMetadata,
      handleToggleLine,
      createLine,
      updateLinePosition,
      handleToggleImageEdit,
      handleHideImageEdit,
      handleResize,
      resizeUp,
      resizeDown,
      resizeMove,
      handleUpdateNewPassageText,
      handleBlockEditorClick,
      handleLineEditorClick,
      handleTranscriptionEditorCancel,
      handleTranscriptionEditorSave,
      SaveLineEditorTrancription,
      SaveBlockEditorTrancription,
      setTranscriptionFontSize,
      fontDown,
      fontReset,
      fontUp,
      validSource,
    })

    $$self.$inject_state = ($$props) => {
      if ('id_col' in $$props) $$invalidate(0, (id_col = $$props.id_col))
      if ('urn' in $$props) $$invalidate(50, (urn = $$props.urn))
      if ('transcriptionFontSize' in $$props)
        $$invalidate(7, (transcriptionFontSize = $$props.transcriptionFontSize))
      if ('tFontSize' in $$props) tFontSize = $$props.tFontSize
      if ('previewViewer' in $$props)
        $$invalidate(51, (previewViewer = $$props.previewViewer))
      if ('viewerOpts' in $$props)
        $$invalidate(52, (viewerOpts = $$props.viewerOpts))
      if ('previewVisible' in $$props) previewVisible = $$props.previewVisible
      if ('previewFailed' in $$props) previewFailed = $$props.previewFailed
      if ('selectedImageRef' in $$props)
        $$invalidate(1, (selectedImageRef = $$props.selectedImageRef))
      if ('didMount' in $$props) $$invalidate(53, (didMount = $$props.didMount))
      if ('selectedCatalogUrn' in $$props)
        $$invalidate(8, (selectedCatalogUrn = $$props.selectedCatalogUrn))
      if ('showMetadata' in $$props)
        $$invalidate(2, (showMetadata = $$props.showMetadata))
      if ('showImageEdit' in $$props)
        $$invalidate(3, (showImageEdit = $$props.showImageEdit))
      if ('showReadingLine' in $$props)
        $$invalidate(9, (showReadingLine = $$props.showReadingLine))
      if ('horizontalLine' in $$props) horizontalLine = $$props.horizontalLine
      if ('previewContainer' in $$props)
        $$invalidate(10, (previewContainer = $$props.previewContainer))
      if ('previewHeight' in $$props) previewHeight = $$props.previewHeight
      if ('previewWidth' in $$props) previewWidth = $$props.previewWidth
      if ('err' in $$props) $$invalidate(11, (err = $$props.err))
      if ('isPortrait' in $$props)
        $$invalidate(12, (isPortrait = $$props.isPortrait))
      if ('newpassage' in $$props) newpassage = $$props.newpassage
      if ('lineIndex' in $$props)
        $$invalidate(13, (lineIndex = $$props.lineIndex))
      if ('isLineEditor' in $$props)
        $$invalidate(4, (isLineEditor = $$props.isLineEditor))
      if ('isBlockEditor' in $$props)
        $$invalidate(5, (isBlockEditor = $$props.isBlockEditor))
      if ('transcriptionEditNav' in $$props)
        $$invalidate(14, (transcriptionEditNav = $$props.transcriptionEditNav))
      if ('passagetext' in $$props)
        $$invalidate(15, (passagetext = $$props.passagetext))
      if ('passage' in $$props) $$invalidate(6, (passage = $$props.passage))
      if ('user' in $$props) user = $$props.user
      if ('userrights' in $$props)
        $$invalidate(16, (userrights = $$props.userrights))
      if ('passageId' in $$props)
        $$invalidate(17, (passageId = $$props.passageId))
      if ('currentTranscriptionLines' in $$props)
        $$invalidate(
          18,
          (currentTranscriptionLines = $$props.currentTranscriptionLines)
        )
      if ('prevTranscriptionLines' in $$props)
        prevTranscriptionLines = $$props.prevTranscriptionLines
      if ('newpassagetext' in $$props)
        $$invalidate(19, (newpassagetext = $$props.newpassagetext))
      if ('loading' in $$props) $$invalidate(20, (loading = $$props.loading))
      if ('savedata' in $$props) $$invalidate(21, (savedata = $$props.savedata))
      if ('protocol' in $$props) protocol = $$props.protocol
      if ('images' in $$props) images = $$props.images
      if ('schemes' in $$props) $$invalidate(22, (schemes = $$props.schemes))
      if ('imageURL' in $$props) $$invalidate(54, (imageURL = $$props.imageURL))
      if ('retryCount' in $$props) retryCount = $$props.retryCount
      if ('isFullyLoaded' in $$props) isFullyLoaded = $$props.isFullyLoaded
      if ('isErrorLoading' in $$props) isErrorLoading = $$props.isErrorLoading
      if ('hidePassageToolbar' in $$props)
        $$invalidate(23, (hidePassageToolbar = $$props.hidePassageToolbar))
      if ('hideTranscriptionToolbar' in $$props)
        $$invalidate(
          24,
          (hideTranscriptionToolbar = $$props.hideTranscriptionToolbar)
        )
      if ('autoChangeOrientation' in $$props)
        autoChangeOrientation = $$props.autoChangeOrientation
      if ('newUrn' in $$props) $$invalidate(55, (newUrn = $$props.newUrn))
      if ('sectionOpenSeaDragon' in $$props)
        sectionOpenSeaDragon = $$props.sectionOpenSeaDragon
      if ('sectionTranscription' in $$props)
        sectionTranscription = $$props.sectionTranscription
      if ('sectionOpenSeaDragonSize' in $$props)
        sectionOpenSeaDragonSize = $$props.sectionOpenSeaDragonSize
      if ('sectionTranscriptionSize' in $$props)
        sectionTranscriptionSize = $$props.sectionTranscriptionSize
      if ('validSource' in $$props)
        $$invalidate(56, (validSource = $$props.validSource))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if (
        $$self.$$.dirty[0] &
        /*isBlockEditor, isLineEditor, showMetadata, showImageEdit*/ 60
      ) {
        $$invalidate(
          23,
          (hidePassageToolbar =
            isBlockEditor || isLineEditor || showMetadata || showImageEdit)
        )
      }

      if ($$self.$$.dirty[0] & /*showMetadata, showImageEdit*/ 12) {
        $$invalidate(
          24,
          (hideTranscriptionToolbar = showMetadata || showImageEdit)
        )
      }

      if (
        ($$self.$$.dirty[0] & /*id_col*/ 1) |
        ($$self.$$.dirty[1] & /*newUrn*/ 16777216)
      ) {
        //console.info('from components colid, passage: ', id_col, passage)
        // $: if (!validateUrn(urn, { nid: 'cts' })) {
        //   //  urn = 'urn:cts:sktlit:skt0001.nyaya002.M3D:5.1.1'
        //   console.log('!!!', urn, validateUrn(urn, { nid: 'cts' }))
        //   urn = 'undefined'
        //   //  err = new Error('Passage not found')
        // }
        if (newUrn) {
          navigate(`/view/${id_col}/${newUrn}`)
        }
      }

      if (
        ($$self.$$.dirty[0] & /*id_col*/ 1) |
        ($$self.$$.dirty[1] & /*urn*/ 524288)
      ) {
        Promise.all([
          getPassage(id_col, urn),
          getUser$2(),
          getCollectionUserRights$1(id_col),
          getImages(id_col),
        ])
          .then(([p, u, ur, ci]) => {
            $$invalidate(6, (passage = p))
            user = u
            $$invalidate(16, (userrights = ur))
            $$invalidate(17, (passageId = p.passageid.split(':').pop()))
            $$invalidate(8, (selectedCatalogUrn = p.catalog.urn))

            if (p.transcriptionLines) {
              $$invalidate(
                18,
                (currentTranscriptionLines = [...p.transcriptionLines])
              )
            }

            if (p.schemes) {
              $$invalidate(22, (schemes = [...p.schemes]))
            }

            images = [...ci]
            $$invalidate(20, (loading = false))
          })
          .catch((e) => $$invalidate(11, (err = e)))
      }

      if ($$self.$$.dirty[0] & /*passage*/ 64) {
        // FIXME: this is a pretty naive attempt to catch the passage ID
        if (!!passage) {
          $$invalidate(17, (passageId = passage.passageid.split(':').pop()))
        }
      }

      if (
        ($$self.$$.dirty[0] & /*passage*/ 64) |
        ($$self.$$.dirty[1] & /*didMount*/ 4194304)
      ) {
        /* this should update the folio viewer a) once after mounting and b) when `passage` changes due to reactivity.
         * this is just a lazy trick to trigger the viewer update in coordination with svelte's reactivity */
        if (!!passage && didMount) {
          updateViewer(passage.imageRefs)
        }
      }

      if (
        ($$self.$$.dirty[0] & /*selectedImageRef*/ 2) |
        ($$self.$$.dirty[1] & /*imageURL*/ 8388608)
      ) {
        $$invalidate(
          56,
          (validSource =
            ctsUrn_1(selectedImageRef) || validateHttpUrl(imageURL))
        )
      }

      if (
        ($$self.$$.dirty[0] & /*selectedImageRef*/ 2) |
        ($$self.$$.dirty[1] & /*validSource, imageURL*/ 41943040)
      ) {
        if (validSource) {
          previewFailed = false

          // console.log('imageURL', imageURL)
          if (validateHttpUrl(imageURL)) {
            // console.log('displayExternalMedia', imageURL, validateHttpUrl(imageURL))
            displayExternalMedia(imageURL)
          } else if (ctsUrn_1(selectedImageRef)) {
            //   console.log('validateUrn(selectedImageRef)', validateUrn(selectedImageRef), selectedImageRef)
            $$invalidate(
              52,
              (viewerOpts = getInternalOpts('preview', selectedImageRef))
            )

            protocol = 'localDZ'
            $$invalidate(52, (viewerOpts.defaultZoomLevel = 1), viewerOpts)
          }
        }
      }

      if (
        $$self.$$.dirty[1] & /*validSource, viewerOpts, previewViewer*/ 36700160
      ) {
        if (validSource && viewerOpts) {
          if (previewViewer) {
            previewVisible = false
            previewViewer.destroy()
          }

          createViewer(viewerOpts)
        }
      }
    }

    return [
      id_col,
      selectedImageRef,
      showMetadata,
      showImageEdit,
      isLineEditor,
      isBlockEditor,
      passage,
      transcriptionFontSize,
      selectedCatalogUrn,
      showReadingLine,
      previewContainer,
      err,
      isPortrait,
      lineIndex,
      transcriptionEditNav,
      passagetext,
      userrights,
      passageId,
      currentTranscriptionLines,
      newpassagetext,
      loading,
      savedata,
      schemes,
      hidePassageToolbar,
      hideTranscriptionToolbar,
      handleImageUrlChange,
      handleSelect,
      handleWitnessSelection,
      handleFirstPassage,
      handlePreviousPassage,
      handleNextPassage,
      handleLastPassage,
      handleFolioSelection,
      handleToggleMetadata,
      handleHideMetadata,
      handleToggleLine,
      updateLinePosition,
      handleToggleImageEdit,
      handleHideImageEdit,
      resizeUp,
      resizeDown,
      resizeMove,
      handleUpdateNewPassageText,
      handleBlockEditorClick,
      handleLineEditorClick,
      handleTranscriptionEditorCancel,
      handleTranscriptionEditorSave,
      fontDown,
      fontReset,
      fontUp,
      urn,
      previewViewer,
      viewerOpts,
      didMount,
      imageURL,
      newUrn,
      validSource,
      select0_change_handler,
      select1_change_handler,
      select2_change_handler,
      div8_binding,
      click_handler,
      click_handler_1,
    ]
  }

  class CollectionOverview extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(
        this,
        options,
        instance$7,
        create_fragment$7,
        safe_not_equal,
        { id_col: 0, urn: 50 },
        null,
        [-1, -1, -1, -1]
      )

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'CollectionOverview',
        options,
        id: create_fragment$7.name,
      })
    }

    get id_col() {
      throw new Error_1$3(
        "<CollectionOverview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_col(value) {
      throw new Error_1$3(
        "<CollectionOverview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get urn() {
      throw new Error_1$3(
        "<CollectionOverview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set urn(value) {
      throw new Error_1$3(
        "<CollectionOverview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/Collections.svelte generated by Svelte v3.58.0 */

  const file$5 = 'src/routes/Collections.svelte'

  function create_fragment$6(ctx) {
    let nav
    let ol
    let li0
    let a
    let t1
    let li1

    const block = {
      c: function create() {
        nav = element('nav')
        ol = element('ol')
        li0 = element('li')
        a = element('a')
        a.textContent = 'Home'
        t1 = space()
        li1 = element('li')
        li1.textContent = 'Collections'
        attr_dev(a, 'href', '/')
        add_location(a, file$5, 9, 32, 215)
        attr_dev(li0, 'class', 'breadcrumb-item')
        add_location(li0, file$5, 9, 4, 187)
        attr_dev(li1, 'class', 'breadcrumb-item active')
        attr_dev(li1, 'aria-current', 'page')
        add_location(li1, file$5, 10, 4, 245)
        attr_dev(ol, 'class', 'breadcrumb')
        add_location(ol, file$5, 8, 2, 159)
        attr_dev(nav, 'aria-label', 'breadcrumb')
        add_location(nav, file$5, 7, 0, 127)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, nav, anchor)
        append_dev(nav, ol)
        append_dev(ol, li0)
        append_dev(li0, a)
        append_dev(ol, t1)
        append_dev(ol, li1)
      },
      p: noop,
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(nav)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$6.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$6($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Collections', slots, [])
    let { id_auth } = $$props
    let { id_page } = $$props

    $$self.$$.on_mount.push(function () {
      if (
        id_auth === undefined &&
        !('id_auth' in $$props || $$self.$$.bound[$$self.$$.props['id_auth']])
      ) {
        console.warn(
          "<Collections> was created without expected prop 'id_auth'"
        )
      }

      if (
        id_page === undefined &&
        !('id_page' in $$props || $$self.$$.bound[$$self.$$.props['id_page']])
      ) {
        console.warn(
          "<Collections> was created without expected prop 'id_page'"
        )
      }
    })

    const writable_props = ['id_auth', 'id_page']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<Collections> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('id_auth' in $$props) $$invalidate(0, (id_auth = $$props.id_auth))
      if ('id_page' in $$props) $$invalidate(1, (id_page = $$props.id_page))
    }

    $$self.$capture_state = () => ({ id_auth, id_page })

    $$self.$inject_state = ($$props) => {
      if ('id_auth' in $$props) $$invalidate(0, (id_auth = $$props.id_auth))
      if ('id_page' in $$props) $$invalidate(1, (id_page = $$props.id_page))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [id_auth, id_page]
  }

  class Collections extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$6, create_fragment$6, safe_not_equal, {
        id_auth: 0,
        id_page: 1,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Collections',
        options,
        id: create_fragment$6.name,
      })
    }

    get id_auth() {
      throw new Error(
        "<Collections>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_auth(value) {
      throw new Error(
        "<Collections>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get id_page() {
      throw new Error(
        "<Collections>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_page(value) {
      throw new Error(
        "<Collections>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/NotFound.svelte generated by Svelte v3.58.0 */

  const { console: console_1$2 } = globals

  function create_fragment$5(ctx) {
    const block = {
      c: noop,
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: noop,
      p: noop,
      i: noop,
      o: noop,
      d: noop,
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$5.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$5($$self, $$props) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('NotFound', slots, [])
    console.log('from dispatcher: this path is not found')
    location.reload()
    const writable_props = []

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$2.warn(`<NotFound> was created with unknown prop '${key}'`)
    })

    return []
  }

  class NotFound extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$5, create_fragment$5, safe_not_equal, {})

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'NotFound',
        options,
        id: create_fragment$5.name,
      })
    }
  }

  /* src/components/Objects.svelte generated by Svelte v3.58.0 */

  const file$4 = 'src/components/Objects.svelte'

  function create_fragment$4(ctx) {
    let li
    let t
    let mounted
    let dispose

    const block = {
      c: function create() {
        li = element('li')
        t = text(/*object*/ ctx[0])
        attr_dev(li, 'class', 'typeahead-objects svelte-pac0ec')
        add_location(li, file$4, 19, 0, 311)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, li, anchor)
        append_dev(li, t)

        if (!mounted) {
          dispose = listen_dev(
            li,
            'mousedown',
            /*mousedown_handler*/ ctx[1],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (dirty & /*object*/ 1) set_data_dev(t, /*object*/ ctx[0])
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(li)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$4.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance$4($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('Objects', slots, [])
    let { object } = $$props

    $$self.$$.on_mount.push(function () {
      if (
        object === undefined &&
        !('object' in $$props || $$self.$$.bound[$$self.$$.props['object']])
      ) {
        console.warn("<Objects> was created without expected prop 'object'")
      }
    })

    const writable_props = ['object']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<Objects> was created with unknown prop '${key}'`)
    })

    function mousedown_handler(event) {
      bubble.call(this, $$self, event)
    }

    $$self.$$set = ($$props) => {
      if ('object' in $$props) $$invalidate(0, (object = $$props.object))
    }

    $$self.$capture_state = () => ({ object })

    $$self.$inject_state = ($$props) => {
      if ('object' in $$props) $$invalidate(0, (object = $$props.object))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [object, mousedown_handler]
  }

  class Objects extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$4, create_fragment$4, safe_not_equal, {
        object: 0,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'Objects',
        options,
        id: create_fragment$4.name,
      })
    }

    get object() {
      throw new Error(
        "<Objects>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set object(value) {
      throw new Error(
        "<Objects>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/ShareCollection.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1$2, console: console_1$1 } = globals
  const file$3 = 'src/routes/ShareCollection.svelte'

  function get_each_context$1(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[23] = list[i]
    return child_ctx
  }

  function get_each_context_2(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[26] = list[i]
    return child_ctx
  }

  function get_each_context_1$1(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[26] = list[i]
    return child_ctx
  }

  // (195:22)
  function create_if_block_7(ctx) {
    let h5
    let t0
    let t1

    const block = {
      c: function create() {
        h5 = element('h5')
        t0 = text('Error: ')
        t1 = text(/*err*/ ctx[10])
        add_location(h5, file$3, 195, 10, 4776)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h5, anchor)
        append_dev(h5, t0)
        append_dev(h5, t1)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*err*/ 1024) set_data_dev(t1, /*err*/ ctx[10])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h5)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_7.name,
      type: 'if',
      source: '(195:22) ',
      ctx,
    })

    return block
  }

  // (193:8) {#if collection && !err}
  function create_if_block_6(ctx) {
    let h3
    let t0
    let t1_value = /*collection*/ ctx[8].title + ''
    let t1
    let t2

    const block = {
      c: function create() {
        h3 = element('h3')
        t0 = text('Share collection "')
        t1 = text(t1_value)
        t2 = text('"')
        set_style(h3, 'width', '90%')
        add_location(h3, file$3, 193, 10, 4676)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t0)
        append_dev(h3, t1)
        append_dev(h3, t2)
      },
      p: function update(ctx, dirty) {
        if (
          dirty & /*collection*/ 256 &&
          t1_value !== (t1_value = /*collection*/ ctx[8].title + '')
        )
          set_data_dev(t1, t1_value)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_6.name,
      type: 'if',
      source: '(193:8) {#if collection && !err}',
      ctx,
    })

    return block
  }

  // (207:8) {:else}
  function create_else_block_2(ctx) {
    let button
    let mounted
    let dispose

    const block = {
      c: function create() {
        button = element('button')
        button.textContent = 'PRIVATE'
        attr_dev(button, 'class', 'tag tag-private mb-2 mx-right')
        attr_dev(button, 'id', 'tag-text')
        attr_dev(button, 'type', 'submit')
        add_location(button, file$3, 207, 10, 5059)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*handleSubmit*/ ctx[16],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_2.name,
      type: 'else',
      source: '(207:8) {:else}',
      ctx,
    })

    return block
  }

  // (199:8) {#if makePublic}
  function create_if_block_5(ctx) {
    let button
    let mounted
    let dispose

    const block = {
      c: function create() {
        button = element('button')
        button.textContent = 'PUBLIC'
        attr_dev(button, 'class', 'tag tag-public mb-2 mx-right')
        attr_dev(button, 'id', 'tag-text')
        attr_dev(button, 'type', 'submit')
        add_location(button, file$3, 199, 10, 4848)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*handleSubmit*/ ctx[16],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_5.name,
      type: 'if',
      source: '(199:8) {#if makePublic}',
      ctx,
    })

    return block
  }

  // (267:8) {#if isFocused === true}
  function create_if_block_3$1(ctx) {
    let current_block_type_index
    let if_block
    let if_block_anchor
    let current
    const if_block_creators = [create_if_block_4$1, create_else_block_1]
    const if_blocks = []

    function select_block_type_2(ctx, dirty) {
      if (/*searchInput*/ ctx[6].length === 0) return 0
      return 1
    }

    current_block_type_index = select_block_type_2(ctx)
    if_block = if_blocks[current_block_type_index] =
      if_block_creators[current_block_type_index](ctx)

    const block = {
      c: function create() {
        if_block.c()
        if_block_anchor = empty()
      },
      m: function mount(target, anchor) {
        if_blocks[current_block_type_index].m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type_2(ctx)

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null
          })

          check_outros()
          if_block = if_blocks[current_block_type_index]

          if (!if_block) {
            if_block = if_blocks[current_block_type_index] =
              if_block_creators[current_block_type_index](ctx)
            if_block.c()
          } else {
            if_block.p(ctx, dirty)
          }

          transition_in(if_block, 1)
          if_block.m(if_block_anchor.parentNode, if_block_anchor)
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if_blocks[current_block_type_index].d(detaching)
        if (detaching) detach_dev(if_block_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_3$1.name,
      type: 'if',
      source: '(267:8) {#if isFocused === true}',
      ctx,
    })

    return block
  }

  // (274:10) {:else}
  function create_else_block_1(ctx) {
    let each_1_anchor
    let current
    let each_value_2 = /*results*/ ctx[0]
    validate_each_argument(each_value_2)
    let each_blocks = []

    for (let i = 0; i < each_value_2.length; i += 1) {
      each_blocks[i] = create_each_block_2(
        get_each_context_2(ctx, each_value_2, i)
      )
    }

    const out = (i) =>
      transition_out(each_blocks[i], 1, 1, () => {
        each_blocks[i] = null
      })

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        if (dirty & /*results, newSearchInput*/ 16385) {
          each_value_2 = /*results*/ ctx[0]
          validate_each_argument(each_value_2)
          let i

          for (i = 0; i < each_value_2.length; i += 1) {
            const child_ctx = get_each_context_2(ctx, each_value_2, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
              transition_in(each_blocks[i], 1)
            } else {
              each_blocks[i] = create_each_block_2(child_ctx)
              each_blocks[i].c()
              transition_in(each_blocks[i], 1)
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          group_outros()

          for (i = each_value_2.length; i < each_blocks.length; i += 1) {
            out(i)
          }

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return

        for (let i = 0; i < each_value_2.length; i += 1) {
          transition_in(each_blocks[i])
        }

        current = true
      },
      o: function outro(local) {
        each_blocks = each_blocks.filter(Boolean)

        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i])
        }

        current = false
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block_1.name,
      type: 'else',
      source: '(274:10) {:else}',
      ctx,
    })

    return block
  }

  // (268:10) {#if searchInput.length === 0}
  function create_if_block_4$1(ctx) {
    let each_1_anchor
    let current
    let each_value_1 = /*possibleResults*/ ctx[1]
    validate_each_argument(each_value_1)
    let each_blocks = []

    for (let i = 0; i < each_value_1.length; i += 1) {
      each_blocks[i] = create_each_block_1$1(
        get_each_context_1$1(ctx, each_value_1, i)
      )
    }

    const out = (i) =>
      transition_out(each_blocks[i], 1, 1, () => {
        each_blocks[i] = null
      })

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        if (dirty & /*possibleResults, newSearchInput*/ 16386) {
          each_value_1 = /*possibleResults*/ ctx[1]
          validate_each_argument(each_value_1)
          let i

          for (i = 0; i < each_value_1.length; i += 1) {
            const child_ctx = get_each_context_1$1(ctx, each_value_1, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
              transition_in(each_blocks[i], 1)
            } else {
              each_blocks[i] = create_each_block_1$1(child_ctx)
              each_blocks[i].c()
              transition_in(each_blocks[i], 1)
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          group_outros()

          for (i = each_value_1.length; i < each_blocks.length; i += 1) {
            out(i)
          }

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return

        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i])
        }

        current = true
      },
      o: function outro(local) {
        each_blocks = each_blocks.filter(Boolean)

        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i])
        }

        current = false
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_4$1.name,
      type: 'if',
      source: '(268:10) {#if searchInput.length === 0}',
      ctx,
    })

    return block
  }

  // (275:12) {#each results as oneResult}
  function create_each_block_2(ctx) {
    let objects
    let current

    function mousedown_handler_1() {
      return /*mousedown_handler_1*/ ctx[21](/*oneResult*/ ctx[26])
    }

    objects = new Objects({
      props: { object: /*oneResult*/ ctx[26].user_name },
      $$inline: true,
    })

    objects.$on('mousedown', mousedown_handler_1)

    const block = {
      c: function create() {
        create_component(objects.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(objects, target, anchor)
        current = true
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        const objects_changes = {}
        if (dirty & /*results*/ 1)
          objects_changes.object = /*oneResult*/ ctx[26].user_name
        objects.$set(objects_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(objects.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(objects.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(objects, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_2.name,
      type: 'each',
      source: '(275:12) {#each results as oneResult}',
      ctx,
    })

    return block
  }

  // (269:12) {#each possibleResults as oneResult}
  function create_each_block_1$1(ctx) {
    let objects
    let current

    function mousedown_handler() {
      return /*mousedown_handler*/ ctx[20](/*oneResult*/ ctx[26])
    }

    objects = new Objects({
      props: { object: /*oneResult*/ ctx[26].user_name },
      $$inline: true,
    })

    objects.$on('mousedown', mousedown_handler)

    const block = {
      c: function create() {
        create_component(objects.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(objects, target, anchor)
        current = true
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        const objects_changes = {}
        if (dirty & /*possibleResults*/ 2)
          objects_changes.object = /*oneResult*/ ctx[26].user_name
        objects.$set(objects_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(objects.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(objects.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(objects, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_1$1.name,
      type: 'each',
      source: '(269:12) {#each possibleResults as oneResult}',
      ctx,
    })

    return block
  }

  // (303:22)
  function create_if_block_2$1(ctx) {
    let h5
    let t0
    let t1

    const block = {
      c: function create() {
        h5 = element('h5')
        t0 = text('Error: ')
        t1 = text(/*err*/ ctx[10])
        add_location(h5, file$3, 303, 10, 7821)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h5, anchor)
        append_dev(h5, t0)
        append_dev(h5, t1)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*err*/ 1024) set_data_dev(t1, /*err*/ ctx[10])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h5)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_2$1.name,
      type: 'if',
      source: '(303:22) ',
      ctx,
    })

    return block
  }

  // (286:8) {#if colUsers && !err}
  function create_if_block$2(ctx) {
    let h4
    let t1
    let div
    let each_value = /*peopleWithAccess*/ ctx[2]
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block$1(
        get_each_context$1(ctx, each_value, i)
      )
    }

    const block = {
      c: function create() {
        h4 = element('h4')
        h4.textContent = 'People with access'
        t1 = space()
        div = element('div')

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        add_location(h4, file$3, 286, 10, 7159)
        attr_dev(div, 'class', 'row')
        add_location(div, file$3, 287, 10, 7197)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h4, anchor)
        insert_dev(target, t1, anchor)
        insert_dev(target, div, anchor)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div, null)
          }
        }
      },
      p: function update(ctx, dirty) {
        if (dirty & /*handleDeleteColUser, peopleWithAccess*/ 32772) {
          each_value = /*peopleWithAccess*/ ctx[2]
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context$1(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
            } else {
              each_blocks[i] = create_each_block$1(child_ctx)
              each_blocks[i].c()
              each_blocks[i].m(div, null)
            }
          }

          for (; i < each_blocks.length; i += 1) {
            each_blocks[i].d(1)
          }

          each_blocks.length = each_value.length
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h4)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(div)
        destroy_each(each_blocks, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$2.name,
      type: 'if',
      source: '(286:8) {#if colUsers && !err}',
      ctx,
    })

    return block
  }

  // (294:14) {:else}
  function create_else_block$1(ctx) {
    let span

    const block = {
      c: function create() {
        span = element('span')
        span.textContent = 'READ ONLY'
        set_style(span, 'width', '20%')
        add_location(span, file$3, 293, 21, 7500)
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block$1.name,
      type: 'else',
      source: '(294:14) {:else}',
      ctx,
    })

    return block
  }

  // (292:14) {#if pWA.is_write}
  function create_if_block_1$1(ctx) {
    let span

    const block = {
      c: function create() {
        span = element('span')
        span.textContent = 'READ/WRITE'
        set_style(span, 'width', '20%')
        add_location(span, file$3, 292, 16, 7435)
      },
      m: function mount(target, anchor) {
        insert_dev(target, span, anchor)
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1$1.name,
      type: 'if',
      source: '(292:14) {#if pWA.is_write}',
      ctx,
    })

    return block
  }

  // (289:12) {#each peopleWithAccess as pWA}
  function create_each_block$1(ctx) {
    let span0
    let t0_value = /*pWA*/ ctx[23].user_name + ''
    let t0
    let t1
    let span1
    let t2_value = /*pWA*/ ctx[23].user_email + ''
    let t2
    let t3
    let t4
    let button
    let mounted
    let dispose

    function select_block_type_4(ctx, dirty) {
      if (/*pWA*/ ctx[23].is_write) return create_if_block_1$1
      return create_else_block$1
    }

    let current_block_type = select_block_type_4(ctx)
    let if_block = current_block_type(ctx)

    function click_handler() {
      return /*click_handler*/ ctx[22](/*pWA*/ ctx[23])
    }

    const block = {
      c: function create() {
        span0 = element('span')
        t0 = text(t0_value)
        t1 = space()
        span1 = element('span')
        t2 = text(t2_value)
        t3 = space()
        if_block.c()
        t4 = space()
        button = element('button')
        button.textContent = 'DEL\n              '
        set_style(span0, 'width', '20%')
        add_location(span0, file$3, 289, 14, 7273)
        set_style(span1, 'width', '50%')
        add_location(span1, file$3, 290, 14, 7336)
        attr_dev(button, 'type', 'submit')
        attr_dev(button, 'class', 'btn btn-primary')
        add_location(button, file$3, 294, 14, 7562)
      },
      m: function mount(target, anchor) {
        insert_dev(target, span0, anchor)
        append_dev(span0, t0)
        insert_dev(target, t1, anchor)
        insert_dev(target, span1, anchor)
        append_dev(span1, t2)
        insert_dev(target, t3, anchor)
        if_block.m(target, anchor)
        insert_dev(target, t4, anchor)
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            click_handler,
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        if (
          dirty & /*peopleWithAccess*/ 4 &&
          t0_value !== (t0_value = /*pWA*/ ctx[23].user_name + '')
        )
          set_data_dev(t0, t0_value)
        if (
          dirty & /*peopleWithAccess*/ 4 &&
          t2_value !== (t2_value = /*pWA*/ ctx[23].user_email + '')
        )
          set_data_dev(t2, t2_value)

        if (
          current_block_type !== (current_block_type = select_block_type_4(ctx))
        ) {
          if_block.d(1)
          if_block = current_block_type(ctx)

          if (if_block) {
            if_block.c()
            if_block.m(t4.parentNode, t4)
          }
        }
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(span0)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(span1)
        if (detaching) detach_dev(t3)
        if_block.d(detaching)
        if (detaching) detach_dev(t4)
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block$1.name,
      type: 'each',
      source: '(289:12) {#each peopleWithAccess as pWA}',
      ctx,
    })

    return block
  }

  function create_fragment$3(ctx) {
    let nav
    let ol
    let li0
    let a
    let t1
    let li1
    let t3
    let div6
    let div5
    let div4
    let div0
    let img
    let img_src_value
    let t4
    let br0
    let t5
    let div1
    let t6
    let t7
    let br1
    let t8
    let br2
    let t9
    let h4
    let t11
    let div2
    let input0
    let input0_value_value
    let t12
    let label0
    let input1
    let t13
    let t14
    let label1
    let input2
    let t15
    let t16
    let button
    let t17
    let button_disabled_value
    let t18
    let ul
    let t19
    let br3
    let t20
    let br4
    let t21
    let div3
    let current
    let mounted
    let dispose

    function select_block_type(ctx, dirty) {
      if (/*collection*/ ctx[8] && !(/*err*/ ctx[10])) return create_if_block_6
      if (/*err*/ ctx[10]) return create_if_block_7
    }

    let current_block_type = select_block_type(ctx)
    let if_block0 = current_block_type && current_block_type(ctx)

    function select_block_type_1(ctx, dirty) {
      if (/*makePublic*/ ctx[5]) return create_if_block_5
      return create_else_block_2
    }

    let current_block_type_1 = select_block_type_1(ctx)
    let if_block1 = current_block_type_1(ctx)
    let if_block2 = /*isFocused*/ ctx[7] === true && create_if_block_3$1(ctx)

    function select_block_type_3(ctx, dirty) {
      if (/*colUsers*/ ctx[9] && !(/*err*/ ctx[10])) return create_if_block$2
      if (/*err*/ ctx[10]) return create_if_block_2$1
    }

    let current_block_type_2 = select_block_type_3(ctx)
    let if_block3 = current_block_type_2 && current_block_type_2(ctx)

    const block = {
      c: function create() {
        nav = element('nav')
        ol = element('ol')
        li0 = element('li')
        a = element('a')
        a.textContent = 'Home'
        t1 = space()
        li1 = element('li')
        li1.textContent = 'Share Collection'
        t3 = space()
        div6 = element('div')
        div5 = element('div')
        div4 = element('div')
        div0 = element('div')
        img = element('img')
        t4 = space()
        br0 = element('br')
        t5 = space()
        div1 = element('div')
        if (if_block0) if_block0.c()
        t6 = space()
        if_block1.c()
        t7 = space()
        br1 = element('br')
        t8 = space()
        br2 = element('br')
        t9 = space()
        h4 = element('h4')
        h4.textContent = 'Select users to give access to:'
        t11 = space()
        div2 = element('div')
        input0 = element('input')
        t12 = space()
        label0 = element('label')
        input1 = element('input')
        t13 = text('\n          Full Access')
        t14 = space()
        label1 = element('label')
        input2 = element('input')
        t15 = text('\n          Read Only')
        t16 = space()
        button = element('button')
        t17 = text('Submit')
        t18 = space()
        ul = element('ul')
        if (if_block2) if_block2.c()
        t19 = space()
        br3 = element('br')
        t20 = space()
        br4 = element('br')
        t21 = space()
        div3 = element('div')
        if (if_block3) if_block3.c()
        attr_dev(a, 'href', '/')
        add_location(a, file$3, 176, 32, 4249)
        attr_dev(li0, 'class', 'breadcrumb-item')
        add_location(li0, file$3, 176, 4, 4221)
        attr_dev(li1, 'class', 'breadcrumb-item active')
        attr_dev(li1, 'aria-current', 'page')
        add_location(li1, file$3, 177, 4, 4279)
        attr_dev(ol, 'class', 'breadcrumb')
        add_location(ol, file$3, 175, 2, 4193)
        attr_dev(nav, 'aria-label', 'breadcrumb')
        add_location(nav, file$3, 174, 0, 4161)
        if (
          !src_url_equal(
            img.src,
            (img_src_value = '/files/img/CollectionImg.svg')
          )
        )
          attr_dev(img, 'src', img_src_value)
        attr_dev(img, 'class', 'img-thumbnail')
        attr_dev(img, 'alt', 'Profile')
        add_location(img, file$3, 185, 8, 4474)
        add_location(div0, file$3, 184, 6, 4460)
        add_location(br0, file$3, 190, 6, 4602)
        attr_dev(div1, 'class', 'row')
        add_location(div1, file$3, 191, 6, 4615)
        add_location(br1, file$3, 216, 6, 5279)
        add_location(br2, file$3, 226, 6, 5488)
        add_location(h4, file$3, 228, 6, 5502)
        attr_dev(input0, 'id', 'searchfield')
        attr_dev(input0, 'type', 'text')
        attr_dev(input0, 'name', 'searchfield')
        attr_dev(input0, 'placeholder', 'Search')
        attr_dev(input0, 'class', 'ip svelte-raulmi')
        input0.value = input0_value_value = /*searchInput*/ ctx[6].user_name
        set_style(input0, 'width', '40%')
        add_location(input0, file$3, 230, 8, 5585)
        attr_dev(input1, 'type', 'checkbox')
        attr_dev(input1, 'name', 'full access')
        input1.disabled = /*readOnly*/ ctx[4]
        add_location(input1, file$3, 242, 10, 5908)
        add_location(label0, file$3, 241, 8, 5890)
        attr_dev(input2, 'type', 'checkbox')
        attr_dev(input2, 'name', 'read only')
        input2.disabled = /*access*/ ctx[3]
        add_location(input2, file$3, 250, 10, 6108)
        add_location(label1, file$3, 249, 8, 6090)
        attr_dev(button, 'type', 'button')
        attr_dev(button, 'class', 'btn btn-primary')
        button.disabled = button_disabled_value = !(
          /*access*/ (ctx[3] || /*readOnly*/ ctx[4]) &&
          /*searchInput*/ ctx[6] != ''
        )
        add_location(button, file$3, 257, 8, 6286)
        attr_dev(div2, 'class', 'typeahead row svelte-raulmi')
        add_location(div2, file$3, 229, 6, 5549)
        attr_dev(ul, 'class', 'ulist typeahead-object-list svelte-raulmi')
        add_location(ul, file$3, 265, 6, 6507)
        add_location(br3, file$3, 282, 6, 7086)
        add_location(br4, file$3, 283, 6, 7099)
        add_location(div3, file$3, 284, 6, 7112)
        attr_dev(div4, 'class', 'col-5 mx-auto')
        add_location(div4, file$3, 183, 4, 4426)
        attr_dev(div5, 'class', 'row')
        add_location(div5, file$3, 182, 2, 4404)
        attr_dev(div6, 'class', 'container-fluid')
        add_location(div6, file$3, 181, 0, 4372)
      },
      l: function claim(nodes) {
        throw new Error_1$2(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, nav, anchor)
        append_dev(nav, ol)
        append_dev(ol, li0)
        append_dev(li0, a)
        append_dev(ol, t1)
        append_dev(ol, li1)
        insert_dev(target, t3, anchor)
        insert_dev(target, div6, anchor)
        append_dev(div6, div5)
        append_dev(div5, div4)
        append_dev(div4, div0)
        append_dev(div0, img)
        append_dev(div4, t4)
        append_dev(div4, br0)
        append_dev(div4, t5)
        append_dev(div4, div1)
        if (if_block0) if_block0.m(div1, null)
        append_dev(div1, t6)
        if_block1.m(div1, null)
        append_dev(div4, t7)
        append_dev(div4, br1)
        append_dev(div4, t8)
        append_dev(div4, br2)
        append_dev(div4, t9)
        append_dev(div4, h4)
        append_dev(div4, t11)
        append_dev(div4, div2)
        append_dev(div2, input0)
        append_dev(div2, t12)
        append_dev(div2, label0)
        append_dev(label0, input1)
        input1.checked = /*access*/ ctx[3]
        append_dev(label0, t13)
        append_dev(div2, t14)
        append_dev(div2, label1)
        append_dev(label1, input2)
        input2.checked = /*readOnly*/ ctx[4]
        append_dev(label1, t15)
        append_dev(div2, t16)
        append_dev(div2, button)
        append_dev(button, t17)
        append_dev(div4, t18)
        append_dev(div4, ul)
        if (if_block2) if_block2.m(ul, null)
        append_dev(div4, t19)
        append_dev(div4, br3)
        append_dev(div4, t20)
        append_dev(div4, br4)
        append_dev(div4, t21)
        append_dev(div4, div3)
        if (if_block3) if_block3.m(div3, null)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(
              input0,
              'input',
              /*typeahead*/ ctx[13],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input0,
              'focus',
              /*onFocus*/ ctx[11],
              false,
              false,
              false,
              false
            ),
            listen_dev(
              input0,
              'blur',
              /*onBlur*/ ctx[12],
              false,
              false,
              false,
              false
            ),
            listen_dev(input1, 'change', /*input1_change_handler*/ ctx[18]),
            listen_dev(input2, 'change', /*input2_change_handler*/ ctx[19]),
            listen_dev(
              button,
              'click',
              /*handleSubmit*/ ctx[16],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (
          current_block_type ===
            (current_block_type = select_block_type(ctx)) &&
          if_block0
        ) {
          if_block0.p(ctx, dirty)
        } else {
          if (if_block0) if_block0.d(1)
          if_block0 = current_block_type && current_block_type(ctx)

          if (if_block0) {
            if_block0.c()
            if_block0.m(div1, t6)
          }
        }

        if (
          current_block_type_1 ===
            (current_block_type_1 = select_block_type_1(ctx)) &&
          if_block1
        ) {
          if_block1.p(ctx, dirty)
        } else {
          if_block1.d(1)
          if_block1 = current_block_type_1(ctx)

          if (if_block1) {
            if_block1.c()
            if_block1.m(div1, null)
          }
        }

        if (
          !current ||
          (dirty & /*searchInput*/ 64 &&
            input0_value_value !==
              (input0_value_value = /*searchInput*/ ctx[6].user_name) &&
            input0.value !== input0_value_value)
        ) {
          prop_dev(input0, 'value', input0_value_value)
        }

        if (!current || dirty & /*readOnly*/ 16) {
          prop_dev(input1, 'disabled', /*readOnly*/ ctx[4])
        }

        if (dirty & /*access*/ 8) {
          input1.checked = /*access*/ ctx[3]
        }

        if (!current || dirty & /*access*/ 8) {
          prop_dev(input2, 'disabled', /*access*/ ctx[3])
        }

        if (dirty & /*readOnly*/ 16) {
          input2.checked = /*readOnly*/ ctx[4]
        }

        if (
          !current ||
          (dirty & /*access, readOnly, searchInput*/ 88 &&
            button_disabled_value !==
              (button_disabled_value = !(
                /*access*/ (ctx[3] || /*readOnly*/ ctx[4]) &&
                /*searchInput*/ ctx[6] != ''
              )))
        ) {
          prop_dev(button, 'disabled', button_disabled_value)
        }

        if (/*isFocused*/ ctx[7] === true) {
          if (if_block2) {
            if_block2.p(ctx, dirty)

            if (dirty & /*isFocused*/ 128) {
              transition_in(if_block2, 1)
            }
          } else {
            if_block2 = create_if_block_3$1(ctx)
            if_block2.c()
            transition_in(if_block2, 1)
            if_block2.m(ul, null)
          }
        } else if (if_block2) {
          group_outros()

          transition_out(if_block2, 1, 1, () => {
            if_block2 = null
          })

          check_outros()
        }

        if (
          current_block_type_2 ===
            (current_block_type_2 = select_block_type_3(ctx)) &&
          if_block3
        ) {
          if_block3.p(ctx, dirty)
        } else {
          if (if_block3) if_block3.d(1)
          if_block3 = current_block_type_2 && current_block_type_2(ctx)

          if (if_block3) {
            if_block3.c()
            if_block3.m(div3, null)
          }
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block2)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block2)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(nav)
        if (detaching) detach_dev(t3)
        if (detaching) detach_dev(div6)

        if (if_block0) {
          if_block0.d()
        }

        if_block1.d()
        if (if_block2) if_block2.d()

        if (if_block3) {
          if_block3.d()
        }

        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$3.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  async function getShareCollection(id_col) {
    const res = await fetch(`/api/v2/sharecollection/${id_col}`)

    if (res.ok) {
      const d = await res.json()
      console.log(d)
      return d
    } else {
      throw new Error(res.body)
    }
  }

  async function getUser$1() {
    const res = await fetch(`/api/v2/users/0`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  function instance$3($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('ShareCollection', slots, [])
    let { id_col } = $$props
    let results = []
    let possibleResults = []
    let peopleWithAccess = []
    let access = false
    let readOnly = false
    let makePublic = false
    let searchInput = { user_name: '' }
    let isFocused = false
    const onFocus = () => $$invalidate(7, (isFocused = true))
    const onBlur = () => $$invalidate(7, (isFocused = false))
    let collection, colUsers, err

    ;(async () => {
      const result = Promise.all([getShareCollection(id_col), getUser$1()])
        .then(([c, u]) => {
          $$invalidate(8, (collection = c.collection))
          $$invalidate(9, (colUsers = c.colusers))
          $$invalidate(1, (possibleResults = u))
          $$invalidate(5, (makePublic = collection.is_public))
        })
        .catch((e) => $$invalidate(10, (err = e)))

      await result
      console.log('!!!', colUsers)
      var cU = (colUsers ?? []).map((x) => x.user_id)
      $$invalidate(
        2,
        (peopleWithAccess = possibleResults.filter((x) =>
          cU.includes(x.user_id)
        ))
      )

      //mix colusers with user
      $$invalidate(
        2,
        (peopleWithAccess = peopleWithAccess.map((person) => {
          const colUser = colUsers.find((x) => x.user_id === person.user_id)

          if (colUser) {
            return { ...person, ...colUser }
          }

          return person
        }))
      )
    })()

    const typeahead = () => {
      let resultsIncludes = possibleResults.filter((possibleResults) =>
        possibleResults.user_name
          .toLowerCase()
          .includes(searchInput.user_name.toLowerCase())
      )
      let resultsStartWith = possibleResults.filter((possibleResults) =>
        possibleResults.user_name
          .toLowerCase()
          .startsWith(searchInput.user_name.toLowerCase())
      )
      $$invalidate(
        0,
        (results = resultsStartWith.sort().concat(resultsIncludes.sort()))
      )
      $$invalidate(0, (results = [...new Set(results)]))
    }

    const newSearchInput = (oneResult) => {
      $$invalidate(6, (searchInput = oneResult))
    }

    function handleDeleteColUser(userid) {
      let data = { colid: collection.id, userid }

      fetch('/api/v2/collectionsuser', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      }).then((res) => {
        // console.log('Request complete! response:', res)
        location.reload(true)
      })
    }

    function handleSubmit() {
      $$invalidate(5, (makePublic = !makePublic))
      $$invalidate(8, (collection.is_public = makePublic), collection)

      let selUser = {
        col_id: collection.id,
        user_id: searchInput.user_id,
        is_write: access,
      }

      $$invalidate(9, (colUsers = (colUsers ?? []).concat(selUser)))
      let data = { collection, colusers: colUsers }

      // console.log(data)
      fetch('/api/v2/sharecollection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      }).then((res) => {
        // console.log('Request complete! response:', res)
        location.reload(true)
      })
    }

    $$self.$$.on_mount.push(function () {
      if (
        id_col === undefined &&
        !('id_col' in $$props || $$self.$$.bound[$$self.$$.props['id_col']])
      ) {
        console_1$1.warn(
          "<ShareCollection> was created without expected prop 'id_col'"
        )
      }
    })

    const writable_props = ['id_col']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1$1.warn(
          `<ShareCollection> was created with unknown prop '${key}'`
        )
    })

    function input1_change_handler() {
      access = this.checked
      $$invalidate(3, access)
    }

    function input2_change_handler() {
      readOnly = this.checked
      $$invalidate(4, readOnly)
    }

    const mousedown_handler = (oneResult) => newSearchInput(oneResult)
    const mousedown_handler_1 = (oneResult) => newSearchInput(oneResult)
    const click_handler = (pWA) => handleDeleteColUser(pWA.user_id)

    $$self.$$set = ($$props) => {
      if ('id_col' in $$props) $$invalidate(17, (id_col = $$props.id_col))
    }

    $$self.$capture_state = () => ({
      Objects,
      jQuery: jQuery__default['default'],
      id_col,
      getShareCollection,
      getUser: getUser$1,
      results,
      possibleResults,
      peopleWithAccess,
      access,
      readOnly,
      makePublic,
      searchInput,
      isFocused,
      onFocus,
      onBlur,
      collection,
      colUsers,
      err,
      typeahead,
      newSearchInput,
      handleDeleteColUser,
      handleSubmit,
    })

    $$self.$inject_state = ($$props) => {
      if ('id_col' in $$props) $$invalidate(17, (id_col = $$props.id_col))
      if ('results' in $$props) $$invalidate(0, (results = $$props.results))
      if ('possibleResults' in $$props)
        $$invalidate(1, (possibleResults = $$props.possibleResults))
      if ('peopleWithAccess' in $$props)
        $$invalidate(2, (peopleWithAccess = $$props.peopleWithAccess))
      if ('access' in $$props) $$invalidate(3, (access = $$props.access))
      if ('readOnly' in $$props) $$invalidate(4, (readOnly = $$props.readOnly))
      if ('makePublic' in $$props)
        $$invalidate(5, (makePublic = $$props.makePublic))
      if ('searchInput' in $$props)
        $$invalidate(6, (searchInput = $$props.searchInput))
      if ('isFocused' in $$props)
        $$invalidate(7, (isFocused = $$props.isFocused))
      if ('collection' in $$props)
        $$invalidate(8, (collection = $$props.collection))
      if ('colUsers' in $$props) $$invalidate(9, (colUsers = $$props.colUsers))
      if ('err' in $$props) $$invalidate(10, (err = $$props.err))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [
      results,
      possibleResults,
      peopleWithAccess,
      access,
      readOnly,
      makePublic,
      searchInput,
      isFocused,
      collection,
      colUsers,
      err,
      onFocus,
      onBlur,
      typeahead,
      newSearchInput,
      handleDeleteColUser,
      handleSubmit,
      id_col,
      input1_change_handler,
      input2_change_handler,
      mousedown_handler,
      mousedown_handler_1,
      click_handler,
    ]
  }

  class ShareCollection extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$3, create_fragment$3, safe_not_equal, {
        id_col: 17,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'ShareCollection',
        options,
        id: create_fragment$3.name,
      })
    }

    get id_col() {
      throw new Error_1$2(
        "<ShareCollection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_col(value) {
      throw new Error_1$2(
        "<ShareCollection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  function isElementInViewport(el) {
    const rect = el.getBoundingClientRect()
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight
    const windowWidth =
      window.innerWidth || document.documentElement.clientWidth

    return (
      (rect.top >= 0 && rect.top <= windowHeight) || // Top edge is in viewport
      (rect.bottom <= windowHeight && rect.bottom >= 0) || // Bottom edge is in viewport
      (rect.top < 0 &&
        rect.bottom > windowHeight && // Middle section is in viewport
        rect.left >= 0 &&
        rect.right <= windowWidth) // Whole width is in viewport
    )
  }

  /* src/components/BlockEditor_self.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1$1, console: console_1 } = globals
  const file$2 = 'src/components/BlockEditor_self.svelte'

  // (129:0) {#if showModal}
  function create_if_block$1(ctx) {
    let modal
    let updating_showModal
    let current

    function modal_showModal_binding(value) {
      /*modal_showModal_binding*/ ctx[15](value)
    }

    let modal_props = {
      $$slots: {
        header: [create_header_slot],
        default: [create_default_slot$1],
      },
      $$scope: { ctx },
    }

    if (/*showModal*/ ctx[3] !== void 0) {
      modal_props.showModal = /*showModal*/ ctx[3]
    }

    modal = new Modal({ props: modal_props, $$inline: true })
    binding_callbacks.push(() =>
      bind(modal, 'showModal', modal_showModal_binding)
    )

    const block = {
      c: function create() {
        create_component(modal.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(modal, target, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        const modal_changes = {}

        if (dirty & /*$$scope, modalHeader, modalText*/ 2097200) {
          modal_changes.$$scope = { dirty, ctx }
        }

        if (!updating_showModal && dirty & /*showModal*/ 8) {
          updating_showModal = true
          modal_changes.showModal = /*showModal*/ ctx[3]
          add_flush_callback(() => (updating_showModal = false))
        }

        modal.$set(modal_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(modal.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(modal.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(modal, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block$1.name,
      type: 'if',
      source: '(129:0) {#if showModal}',
      ctx,
    })

    return block
  }

  // (130:2) <Modal bind:showModal>
  function create_default_slot$1(ctx) {
    let body
    let h4
    let t

    const block = {
      c: function create() {
        body = element('body')
        h4 = element('h4')
        t = text(/*modalText*/ ctx[5])
        add_location(h4, file$2, 133, 6, 3127)
        add_location(body, file$2, 132, 4, 3114)
      },
      m: function mount(target, anchor) {
        insert_dev(target, body, anchor)
        append_dev(body, h4)
        append_dev(h4, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalText*/ 32) set_data_dev(t, /*modalText*/ ctx[5])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(body)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot$1.name,
      type: 'slot',
      source: '(130:2) <Modal bind:showModal>',
      ctx,
    })

    return block
  }

  // (131:4)
  function create_header_slot(ctx) {
    let h3
    let t

    const block = {
      c: function create() {
        h3 = element('h3')
        t = text(/*modalHeader*/ ctx[4])
        attr_dev(h3, 'slot', 'header')
        add_location(h3, file$2, 130, 4, 3072)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h3, anchor)
        append_dev(h3, t)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*modalHeader*/ 16) set_data_dev(t, /*modalHeader*/ ctx[4])
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(h3)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_header_slot.name,
      type: 'slot',
      source: '(131:4) ',
      ctx,
    })

    return block
  }

  function create_fragment$2(ctx) {
    let textarea_1
    let textarea_1_class_value
    let t
    let if_block_anchor
    let current
    let mounted
    let dispose
    let if_block = /*showModal*/ ctx[3] && create_if_block$1(ctx)

    const block = {
      c: function create() {
        textarea_1 = element('textarea')
        t = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
        attr_dev(
          textarea_1,
          'class',
          (textarea_1_class_value =
            'dynamicTextarea specialKey ' +
            /*isLoading*/ (ctx[2] ? 'loading' : '') +
            ' svelte-bodgdu')
        )
        attr_dev(textarea_1, 'rows', /*textareaRows*/ ctx[6])
        attr_dev(textarea_1, 'name', 'transcription')
        add_location(textarea_1, file$2, 120, 0, 2810)
      },
      l: function claim(nodes) {
        throw new Error_1$1(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        insert_dev(target, textarea_1, anchor)
        /*textarea_1_binding*/ ctx[13](textarea_1)
        set_input_value(textarea_1, /*passagetext*/ ctx[0])
        insert_dev(target, t, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = [
            listen_dev(
              textarea_1,
              'input',
              /*textarea_1_input_handler*/ ctx[14]
            ),
            listen_dev(
              textarea_1,
              'change',
              /*SaveBlockEditorTrancription*/ ctx[7],
              false,
              false,
              false,
              false
            ),
          ]

          mounted = true
        }
      },
      p: function update(ctx, [dirty]) {
        if (
          !current ||
          (dirty & /*isLoading*/ 4 &&
            textarea_1_class_value !==
              (textarea_1_class_value =
                'dynamicTextarea specialKey ' +
                /*isLoading*/ (ctx[2] ? 'loading' : '') +
                ' svelte-bodgdu'))
        ) {
          attr_dev(textarea_1, 'class', textarea_1_class_value)
        }

        if (!current || dirty & /*textareaRows*/ 64) {
          attr_dev(textarea_1, 'rows', /*textareaRows*/ ctx[6])
        }

        if (dirty & /*passagetext*/ 1) {
          set_input_value(textarea_1, /*passagetext*/ ctx[0])
        }

        if (/*showModal*/ ctx[3]) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty & /*showModal*/ 8) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block$1(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(textarea_1)
        /*textarea_1_binding*/ ctx[13](null)
        if (detaching) detach_dev(t)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
        mounted = false
        run_all(dispose)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$2.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function countRows(text) {
    if (!text) {
      return 1
    }

    return text.split(/\n/).length
  }

  function instance$2($$self, $$props, $$invalidate) {
    let textareaRows
    let urn
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('BlockEditor_self', slots, [])
    let { id_col, bucket, citation } = $$props

    let err,
      passagetext = 'Loading transcription...',
      passage,
      textarea,
      dataloaded = false,
      isVisible = false

    let isLoading = true
    let showModal = false,
      modalHeader,
      modalText

    // $: console.log('!!!!!!!!!!!!!!', id_col, bucket, citation)
    async function getPassage(id_col, urn) {
      const res = await fetch(`/api/v1/passage/${id_col}/${urn}`)

      if (res.ok) {
        const d = await res.json()
        $$invalidate(0, (passagetext = d.data.transcriptionLines.join('\r\n')))
        $$invalidate(11, (dataloaded = true))
        return d.data
      } else {
        throw new Error(res.body)
      }
    }

    async function SaveBlockEditorTrancription() {
      //console.log('passagetext: ', passagetext)
      $$invalidate(2, (isLoading = true))

      let data = {
        colid: parseInt(id_col),
        passageid: urn,
        text: passagetext,
      }

      // console.log('passagetext: ', data)
      const res = await fetch('/api/v2/savepassagetext', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      })

      // .then((res) => {
      //   console.log('Request complete! response:', res)
      //   if (!textarea.disabled) {
      //     getPassage(id_col, urn)
      //   }
      //   isLoading = false
      //   // location.reload(true)
      // })
      if (res.ok) {
        $$invalidate(4, (modalHeader = 'Success'))
        $$invalidate(5, (modalText = 'Witness saved'))
        $$invalidate(3, (showModal = true))
      } else {
        // Handle error
        console.error(
          `Ingestion failed: HTTP ${res.status} ${await res.text()}`
        ) // showMetadata = false

        $$invalidate(4, (modalHeader = 'Error'))
        $$invalidate(
          5,
          (modalText = 'An error occurred in the save transcription process.')
        )
        $$invalidate(3, (showModal = true))
        return
      }

      if (!textarea.disabled) {
        getPassage(id_col, urn)
      }

      $$invalidate(2, (isLoading = false))
    }

    onMount(() => {
      updateTextareaState()
      window.addEventListener('scroll', updateTextareaState)
      window.addEventListener('resize', updateTextareaState)
    }) //getPassage(id_col, urn)

    function updateTextareaState() {
      if (textarea) {
        $$invalidate(12, (isVisible = isElementInViewport(textarea)))

        if (isVisible && !dataloaded) {
          getPassage(id_col, urn)
        }
      }
    }

    $$self.$$.on_mount.push(function () {
      if (
        id_col === undefined &&
        !('id_col' in $$props || $$self.$$.bound[$$self.$$.props['id_col']])
      ) {
        console_1.warn(
          "<BlockEditor_self> was created without expected prop 'id_col'"
        )
      }

      if (
        bucket === undefined &&
        !('bucket' in $$props || $$self.$$.bound[$$self.$$.props['bucket']])
      ) {
        console_1.warn(
          "<BlockEditor_self> was created without expected prop 'bucket'"
        )
      }

      if (
        citation === undefined &&
        !('citation' in $$props || $$self.$$.bound[$$self.$$.props['citation']])
      ) {
        console_1.warn(
          "<BlockEditor_self> was created without expected prop 'citation'"
        )
      }
    })

    const writable_props = ['id_col', 'bucket', 'citation']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console_1.warn(
          `<BlockEditor_self> was created with unknown prop '${key}'`
        )
    })

    function textarea_1_binding($$value) {
      binding_callbacks[$$value ? 'unshift' : 'push'](() => {
        textarea = $$value
        ;($$invalidate(1, textarea), $$invalidate(12, isVisible)),
          $$invalidate(11, dataloaded)
      })
    }

    function textarea_1_input_handler() {
      passagetext = this.value
      $$invalidate(0, passagetext)
    }

    function modal_showModal_binding(value) {
      showModal = value
      $$invalidate(3, showModal)
    }

    $$self.$$set = ($$props) => {
      if ('id_col' in $$props) $$invalidate(8, (id_col = $$props.id_col))
      if ('bucket' in $$props) $$invalidate(9, (bucket = $$props.bucket))
      if ('citation' in $$props) $$invalidate(10, (citation = $$props.citation))
    }

    $$self.$capture_state = () => ({
      onMount,
      isElementInViewport,
      Modal,
      id_col,
      bucket,
      citation,
      err,
      passagetext,
      passage,
      textarea,
      dataloaded,
      isVisible,
      isLoading,
      showModal,
      modalHeader,
      modalText,
      getPassage,
      SaveBlockEditorTrancription,
      countRows,
      updateTextareaState,
      urn,
      textareaRows,
    })

    $$self.$inject_state = ($$props) => {
      if ('id_col' in $$props) $$invalidate(8, (id_col = $$props.id_col))
      if ('bucket' in $$props) $$invalidate(9, (bucket = $$props.bucket))
      if ('citation' in $$props) $$invalidate(10, (citation = $$props.citation))
      if ('err' in $$props) err = $$props.err
      if ('passagetext' in $$props)
        $$invalidate(0, (passagetext = $$props.passagetext))
      if ('passage' in $$props) passage = $$props.passage
      if ('textarea' in $$props) $$invalidate(1, (textarea = $$props.textarea))
      if ('dataloaded' in $$props)
        $$invalidate(11, (dataloaded = $$props.dataloaded))
      if ('isVisible' in $$props)
        $$invalidate(12, (isVisible = $$props.isVisible))
      if ('isLoading' in $$props)
        $$invalidate(2, (isLoading = $$props.isLoading))
      if ('showModal' in $$props)
        $$invalidate(3, (showModal = $$props.showModal))
      if ('modalHeader' in $$props)
        $$invalidate(4, (modalHeader = $$props.modalHeader))
      if ('modalText' in $$props)
        $$invalidate(5, (modalText = $$props.modalText))
      if ('urn' in $$props) urn = $$props.urn
      if ('textareaRows' in $$props)
        $$invalidate(6, (textareaRows = $$props.textareaRows))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*passagetext*/ 1) {
        $$invalidate(6, (textareaRows = countRows(passagetext)))
      }

      if ($$self.$$.dirty & /*bucket, citation*/ 1536) {
        urn = bucket + citation
      }

      if ($$self.$$.dirty & /*textarea, isVisible, dataloaded*/ 6146) {
        if (!!textarea) {
          $$invalidate(
            1,
            (textarea.disabled = !isVisible || !dataloaded),
            textarea
          )
        }
      }
    }

    return [
      passagetext,
      textarea,
      isLoading,
      showModal,
      modalHeader,
      modalText,
      textareaRows,
      SaveBlockEditorTrancription,
      id_col,
      bucket,
      citation,
      dataloaded,
      isVisible,
      textarea_1_binding,
      textarea_1_input_handler,
      modal_showModal_binding,
    ]
  }

  class BlockEditor_self extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$2, create_fragment$2, safe_not_equal, {
        id_col: 8,
        bucket: 9,
        citation: 10,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'BlockEditor_self',
        options,
        id: create_fragment$2.name,
      })
    }

    get id_col() {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_col(value) {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get bucket() {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set bucket(value) {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    get citation() {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set citation(value) {
      throw new Error_1$1(
        "<BlockEditor_self>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/routes/CollectionBulkEdit.svelte generated by Svelte v3.58.0 */

  const { Error: Error_1 } = globals
  const file$1 = 'src/routes/CollectionBulkEdit.svelte'

  function get_each_context(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[14] = list[i].bucket
    child_ctx[15] = list[i].citations
    return child_ctx
  }

  function get_each_context_1(ctx, list, i) {
    const child_ctx = ctx.slice()
    child_ctx[18] = list[i]
    child_ctx[20] = i
    return child_ctx
  }

  // (150:2) {#if !!collection}
  function create_if_block_1(ctx) {
    let div0
    let h2
    let t0_value = /*collection*/ ctx[1].title + ''
    let t0
    let t1
    let t2
    let div1
    let current_block_type_index
    let if_block1
    let current
    let if_block0 = /*nonEmptyCollection*/ ctx[3] && create_if_block_4(ctx)
    const if_block_creators = [create_if_block_2, create_else_block]
    const if_blocks = []

    function select_block_type_1(ctx, dirty) {
      if (/*nonEmptyCollection*/ ctx[3]) return 0
      return 1
    }

    current_block_type_index = select_block_type_1(ctx)
    if_block1 = if_blocks[current_block_type_index] =
      if_block_creators[current_block_type_index](ctx)

    const block = {
      c: function create() {
        div0 = element('div')
        h2 = element('h2')
        t0 = text(t0_value)
        t1 = space()
        if (if_block0) if_block0.c()
        t2 = space()
        div1 = element('div')
        if_block1.c()
        set_style(h2, 'margin-left', '10px')
        add_location(h2, file$1, 151, 6, 3561)
        attr_dev(div0, 'class', 'header svelte-v9zqy2')
        add_location(div0, file$1, 150, 4, 3534)
        attr_dev(div1, 'class', 'pane svelte-v9zqy2')
        add_location(div1, file$1, 156, 4, 3745)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div0, anchor)
        append_dev(div0, h2)
        append_dev(h2, t0)
        append_dev(div0, t1)
        if (if_block0) if_block0.m(div0, null)
        insert_dev(target, t2, anchor)
        insert_dev(target, div1, anchor)
        if_blocks[current_block_type_index].m(div1, null)
        current = true
      },
      p: function update(ctx, dirty) {
        if (
          (!current || dirty & /*collection*/ 2) &&
          t0_value !== (t0_value = /*collection*/ ctx[1].title + '')
        )
          set_data_dev(t0, t0_value)

        if (/*nonEmptyCollection*/ ctx[3]) {
          if (if_block0) {
            if_block0.p(ctx, dirty)
          } else {
            if_block0 = create_if_block_4(ctx)
            if_block0.c()
            if_block0.m(div0, null)
          }
        } else if (if_block0) {
          if_block0.d(1)
          if_block0 = null
        }

        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type_1(ctx)

        if (current_block_type_index === previous_block_index) {
          if_blocks[current_block_type_index].p(ctx, dirty)
        } else {
          group_outros()

          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null
          })

          check_outros()
          if_block1 = if_blocks[current_block_type_index]

          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] =
              if_block_creators[current_block_type_index](ctx)
            if_block1.c()
          } else {
            if_block1.p(ctx, dirty)
          }

          transition_in(if_block1, 1)
          if_block1.m(div1, null)
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block1)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block1)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div0)
        if (if_block0) if_block0.d()
        if (detaching) detach_dev(t2)
        if (detaching) detach_dev(div1)
        if_blocks[current_block_type_index].d()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_1.name,
      type: 'if',
      source: '(150:2) {#if !!collection}',
      ctx,
    })

    return block
  }

  // (141:0) {#if err}
  function create_if_block(ctx) {
    let h5
    let t1
    let h6
    let t2
    let a
    let t4
    let span
    let t5

    const block = {
      c: function create() {
        h5 = element('h5')
        h5.textContent =
          'Error: You do not have permission to view this collection'
        t1 = space()
        h6 = element('h6')
        t2 = text('You can return to the\n    ')
        a = element('a')
        a.textContent = 'Brucheion home page'
        t4 = text('\n    to see all available collections\n    ')
        span = element('span')
        t5 = text(/*err*/ ctx[2])
        add_location(h5, file$1, 141, 2, 3293)
        attr_dev(a, 'href', '/')
        add_location(a, file$1, 144, 4, 3397)
        add_location(span, file$1, 146, 4, 3474)
        add_location(h6, file$1, 142, 2, 3362)
      },
      m: function mount(target, anchor) {
        insert_dev(target, h5, anchor)
        insert_dev(target, t1, anchor)
        insert_dev(target, h6, anchor)
        append_dev(h6, t2)
        append_dev(h6, a)
        append_dev(h6, t4)
        append_dev(h6, span)
        append_dev(span, t5)
      },
      p: function update(ctx, dirty) {
        if (dirty & /*err*/ 4) set_data_dev(t5, /*err*/ ctx[2])
      },
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(h5)
        if (detaching) detach_dev(t1)
        if (detaching) detach_dev(h6)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block.name,
      type: 'if',
      source: '(141:0) {#if err}',
      ctx,
    })

    return block
  }

  // (153:6) {#if nonEmptyCollection}
  function create_if_block_4(ctx) {
    let button
    let mounted
    let dispose

    const block = {
      c: function create() {
        button = element('button')
        button.textContent = 'Toggle All Editors'
        add_location(button, file$1, 153, 8, 3654)
      },
      m: function mount(target, anchor) {
        insert_dev(target, button, anchor)

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            /*toggleAllEditors*/ ctx[7],
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(button)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_4.name,
      type: 'if',
      source: '(153:6) {#if nonEmptyCollection}',
      ctx,
    })

    return block
  }

  // (187:6) {:else}
  function create_else_block(ctx) {
    let p

    const block = {
      c: function create() {
        p = element('p')
        p.textContent = 'No witness found.'
        add_location(p, file$1, 187, 8, 4824)
      },
      m: function mount(target, anchor) {
        insert_dev(target, p, anchor)
      },
      p: noop,
      i: noop,
      o: noop,
      d: function destroy(detaching) {
        if (detaching) detach_dev(p)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_else_block.name,
      type: 'else',
      source: '(187:6) {:else}',
      ctx,
    })

    return block
  }

  // (158:6) {#if nonEmptyCollection}
  function create_if_block_2(ctx) {
    let each_1_anchor
    let current
    let each_value = /*collection*/ ctx[1].buckets
    validate_each_argument(each_value)
    let each_blocks = []

    for (let i = 0; i < each_value.length; i += 1) {
      each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i))
    }

    const out = (i) =>
      transition_out(each_blocks[i], 1, 1, () => {
        each_blocks[i] = null
      })

    const block = {
      c: function create() {
        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        each_1_anchor = empty()
      },
      m: function mount(target, anchor) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(target, anchor)
          }
        }

        insert_dev(target, each_1_anchor, anchor)
        current = true
      },
      p: function update(ctx, dirty) {
        if (
          dirty &
          /*collection, id_col, showAllEditors, visibleEditorIndex, toggleEditor*/ 115
        ) {
          each_value = /*collection*/ ctx[1].buckets
          validate_each_argument(each_value)
          let i

          for (i = 0; i < each_value.length; i += 1) {
            const child_ctx = get_each_context(ctx, each_value, i)

            if (each_blocks[i]) {
              each_blocks[i].p(child_ctx, dirty)
              transition_in(each_blocks[i], 1)
            } else {
              each_blocks[i] = create_each_block(child_ctx)
              each_blocks[i].c()
              transition_in(each_blocks[i], 1)
              each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor)
            }
          }

          group_outros()

          for (i = each_value.length; i < each_blocks.length; i += 1) {
            out(i)
          }

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return

        for (let i = 0; i < each_value.length; i += 1) {
          transition_in(each_blocks[i])
        }

        current = true
      },
      o: function outro(local) {
        each_blocks = each_blocks.filter(Boolean)

        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i])
        }

        current = false
      },
      d: function destroy(detaching) {
        destroy_each(each_blocks, detaching)
        if (detaching) detach_dev(each_1_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_2.name,
      type: 'if',
      source: '(158:6) {#if nonEmptyCollection}',
      ctx,
    })

    return block
  }

  // (179:14) {#if showAllEditors || visibleEditorIndex === i}
  function create_if_block_3(ctx) {
    let div
    let blockeditor
    let current

    blockeditor = new BlockEditor_self({
      props: {
        id_col: /*id_col*/ ctx[0],
        bucket: /*bucket*/ ctx[14],
        citation: /*citation*/ ctx[18],
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        div = element('div')
        create_component(blockeditor.$$.fragment)
        attr_dev(div, 'class', 'pane1')
        add_location(div, file$1, 179, 16, 4623)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        mount_component(blockeditor, div, null)
        current = true
      },
      p: function update(ctx, dirty) {
        const blockeditor_changes = {}
        if (dirty & /*id_col*/ 1) blockeditor_changes.id_col = /*id_col*/ ctx[0]
        if (dirty & /*collection*/ 2)
          blockeditor_changes.bucket = /*bucket*/ ctx[14]
        if (dirty & /*collection*/ 2)
          blockeditor_changes.citation = /*citation*/ ctx[18]
        blockeditor.$set(blockeditor_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(blockeditor.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(blockeditor.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        destroy_component(blockeditor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_if_block_3.name,
      type: 'if',
      source: '(179:14) {#if showAllEditors || visibleEditorIndex === i}',
      ctx,
    })

    return block
  }

  // (167:12) {#each citations as citation, i (citation)}
  function create_each_block_1(key_1, ctx) {
    let div
    let button
    let t1
    let a
    let t2_value =
      /*bucket*/ ctx[14].split(':')[/*bucket*/ ctx[14].split(':').length - 2] +
      ''
    let t2
    let t3
    let t4_value = /*citation*/ ctx[18] + ''
    let t4
    let a_href_value
    let t5
    let if_block_anchor
    let current
    let mounted
    let dispose

    function click_handler() {
      return /*click_handler*/ ctx[11](/*i*/ ctx[20])
    }

    let if_block =
      /*showAllEditors*/ (ctx[5] ||
        /*visibleEditorIndex*/ ctx[4] === /*i*/ ctx[20]) &&
      create_if_block_3(ctx)

    const block = {
      key: key_1,
      first: null,
      c: function create() {
        div = element('div')
        button = element('button')
        button.textContent = '>'
        t1 = space()
        a = element('a')
        t2 = text(t2_value)
        t3 = text(':')
        t4 = text(t4_value)
        t5 = space()
        if (if_block) if_block.c()
        if_block_anchor = empty()
        attr_dev(button, 'class', 'toggle-button svelte-v9zqy2')
        add_location(button, file$1, 168, 16, 4157)
        attr_dev(
          a,
          'href',
          (a_href_value = `/view/${/*id_col*/ ctx[0]}/${
            /*bucket*/ ctx[14] + /*citation*/ ctx[18]
          }`)
        )
        attr_dev(a, 'target', '_blank')
        attr_dev(a, 'rel', 'noreferrer')
        add_location(a, file$1, 171, 16, 4286)
        attr_dev(div, 'class', 'pane1')
        add_location(div, file$1, 167, 14, 4121)
        this.first = div
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, button)
        append_dev(div, t1)
        append_dev(div, a)
        append_dev(a, t2)
        append_dev(a, t3)
        append_dev(a, t4)
        insert_dev(target, t5, anchor)
        if (if_block) if_block.m(target, anchor)
        insert_dev(target, if_block_anchor, anchor)
        current = true

        if (!mounted) {
          dispose = listen_dev(
            button,
            'click',
            click_handler,
            false,
            false,
            false,
            false
          )
          mounted = true
        }
      },
      p: function update(new_ctx, dirty) {
        ctx = new_ctx
        if (
          (!current || dirty & /*collection*/ 2) &&
          t2_value !==
            (t2_value =
              /*bucket*/ ctx[14].split(':')[
                /*bucket*/ ctx[14].split(':').length - 2
              ] + '')
        )
          set_data_dev(t2, t2_value)
        if (
          (!current || dirty & /*collection*/ 2) &&
          t4_value !== (t4_value = /*citation*/ ctx[18] + '')
        )
          set_data_dev(t4, t4_value)

        if (
          !current ||
          (dirty & /*id_col, collection*/ 3 &&
            a_href_value !==
              (a_href_value = `/view/${/*id_col*/ ctx[0]}/${
                /*bucket*/ ctx[14] + /*citation*/ ctx[18]
              }`))
        ) {
          attr_dev(a, 'href', a_href_value)
        }

        if (
          /*showAllEditors*/ ctx[5] ||
          /*visibleEditorIndex*/ ctx[4] === /*i*/ ctx[20]
        ) {
          if (if_block) {
            if_block.p(ctx, dirty)

            if (dirty & /*showAllEditors, visibleEditorIndex, collection*/ 50) {
              transition_in(if_block, 1)
            }
          } else {
            if_block = create_if_block_3(ctx)
            if_block.c()
            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          }
        } else if (if_block) {
          group_outros()

          transition_out(if_block, 1, 1, () => {
            if_block = null
          })

          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)
        if (detaching) detach_dev(t5)
        if (if_block) if_block.d(detaching)
        if (detaching) detach_dev(if_block_anchor)
        mounted = false
        dispose()
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block_1.name,
      type: 'each',
      source: '(167:12) {#each citations as citation, i (citation)}',
      ctx,
    })

    return block
  }

  // (159:8) {#each collection.buckets as { bucket, citations }}
  function create_each_block(ctx) {
    let div
    let a
    let t0_value = /*bucket*/ ctx[14] + ''
    let t0
    let a_href_value
    let t1
    let each_blocks = []
    let each_1_lookup = new Map()
    let t2
    let current
    let each_value_1 = /*citations*/ ctx[15]
    validate_each_argument(each_value_1)
    const get_key = (ctx) => /*citation*/ ctx[18]
    validate_each_keys(ctx, each_value_1, get_each_context_1, get_key)

    for (let i = 0; i < each_value_1.length; i += 1) {
      let child_ctx = get_each_context_1(ctx, each_value_1, i)
      let key = get_key(child_ctx)
      each_1_lookup.set(
        key,
        (each_blocks[i] = create_each_block_1(key, child_ctx))
      )
    }

    const block = {
      c: function create() {
        div = element('div')
        a = element('a')
        t0 = text(t0_value)
        t1 = space()

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].c()
        }

        t2 = space()
        attr_dev(
          a,
          'href',
          (a_href_value = `/view/${/*id_col*/ ctx[0]}/${/*bucket*/ ctx[14]}`)
        )
        attr_dev(a, 'target', '_blank')
        attr_dev(a, 'rel', 'noreferrer')
        add_location(a, file$1, 160, 12, 3897)
        attr_dev(div, 'class', 'pane1')
        add_location(div, file$1, 159, 10, 3865)
      },
      m: function mount(target, anchor) {
        insert_dev(target, div, anchor)
        append_dev(div, a)
        append_dev(a, t0)
        append_dev(div, t1)

        for (let i = 0; i < each_blocks.length; i += 1) {
          if (each_blocks[i]) {
            each_blocks[i].m(div, null)
          }
        }

        append_dev(div, t2)
        current = true
      },
      p: function update(ctx, dirty) {
        if (
          (!current || dirty & /*collection*/ 2) &&
          t0_value !== (t0_value = /*bucket*/ ctx[14] + '')
        )
          set_data_dev(t0, t0_value)

        if (
          !current ||
          (dirty & /*id_col, collection*/ 3 &&
            a_href_value !==
              (a_href_value = `/view/${/*id_col*/ ctx[0]}/${
                /*bucket*/ ctx[14]
              }`))
        ) {
          attr_dev(a, 'href', a_href_value)
        }

        if (
          dirty &
          /*id_col, collection, showAllEditors, visibleEditorIndex, toggleEditor*/ 115
        ) {
          each_value_1 = /*citations*/ ctx[15]
          validate_each_argument(each_value_1)
          group_outros()
          validate_each_keys(ctx, each_value_1, get_each_context_1, get_key)
          each_blocks = update_keyed_each(
            each_blocks,
            dirty,
            get_key,
            1,
            ctx,
            each_value_1,
            each_1_lookup,
            div,
            outro_and_destroy_block,
            create_each_block_1,
            t2,
            get_each_context_1
          )
          check_outros()
        }
      },
      i: function intro(local) {
        if (current) return

        for (let i = 0; i < each_value_1.length; i += 1) {
          transition_in(each_blocks[i])
        }

        current = true
      },
      o: function outro(local) {
        for (let i = 0; i < each_blocks.length; i += 1) {
          transition_out(each_blocks[i])
        }

        current = false
      },
      d: function destroy(detaching) {
        if (detaching) detach_dev(div)

        for (let i = 0; i < each_blocks.length; i += 1) {
          each_blocks[i].d()
        }
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_each_block.name,
      type: 'each',
      source: '(159:8) {#each collection.buckets as { bucket, citations }}',
      ctx,
    })

    return block
  }

  function create_fragment$1(ctx) {
    let current_block_type_index
    let if_block
    let if_block_anchor
    let current
    const if_block_creators = [create_if_block, create_if_block_1]
    const if_blocks = []

    function select_block_type(ctx, dirty) {
      if (/*err*/ ctx[2]) return 0
      if (!!(/*collection*/ ctx[1])) return 1
      return -1
    }

    if (~(current_block_type_index = select_block_type(ctx))) {
      if_block = if_blocks[current_block_type_index] =
        if_block_creators[current_block_type_index](ctx)
    }

    const block = {
      c: function create() {
        if (if_block) if_block.c()
        if_block_anchor = empty()
      },
      l: function claim(nodes) {
        throw new Error_1(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].m(target, anchor)
        }

        insert_dev(target, if_block_anchor, anchor)
        current = true
      },
      p: function update(ctx, [dirty]) {
        let previous_block_index = current_block_type_index
        current_block_type_index = select_block_type(ctx)

        if (current_block_type_index === previous_block_index) {
          if (~current_block_type_index) {
            if_blocks[current_block_type_index].p(ctx, dirty)
          }
        } else {
          if (if_block) {
            group_outros()

            transition_out(if_blocks[previous_block_index], 1, 1, () => {
              if_blocks[previous_block_index] = null
            })

            check_outros()
          }

          if (~current_block_type_index) {
            if_block = if_blocks[current_block_type_index]

            if (!if_block) {
              if_block = if_blocks[current_block_type_index] =
                if_block_creators[current_block_type_index](ctx)
              if_block.c()
            } else {
              if_block.p(ctx, dirty)
            }

            transition_in(if_block, 1)
            if_block.m(if_block_anchor.parentNode, if_block_anchor)
          } else {
            if_block = null
          }
        }
      },
      i: function intro(local) {
        if (current) return
        transition_in(if_block)
        current = true
      },
      o: function outro(local) {
        transition_out(if_block)
        current = false
      },
      d: function destroy(detaching) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].d(detaching)
        }

        if (detaching) detach_dev(if_block_anchor)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment$1.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  async function getCollectionUserRights(id_col) {
    const res = await fetch(`/api/v1/collectionuserrights/${id_col}`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  async function getCollection(id_col) {
    const res = await fetch(`/api/v1/collection/${id_col}`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  async function getUser() {
    const res = await fetch(`/api/v1/user`)

    if (res.ok) {
      const d = await res.json()
      return d.data
    } else {
      throw new Error(res.body)
    }
  }

  function instance$1($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('CollectionBulkEdit', slots, [])
    let { id_col } = $$props
    let err, collection, user, userrights, headerHeight, header, pane
    let nonEmptyCollection = false

    afterUpdate(async () => {
      // Get the height of the header element
      $$invalidate(9, (header = document.querySelector('.header')))

      $$invalidate(10, (pane = document.querySelector('.pane')))
    })

    let visibleEditorIndex = -1

    function toggleEditor(index) {
      if (visibleEditorIndex === index) {
        $$invalidate(4, (visibleEditorIndex = -1)) // Hide the BlockEditor if it's already visible
      } else {
        $$invalidate(4, (visibleEditorIndex = index)) // Show the BlockEditor
      }
    }

    let showAllEditors = false

    function toggleAllEditors() {
      $$invalidate(5, (showAllEditors = !showAllEditors))
    }

    $$self.$$.on_mount.push(function () {
      if (
        id_col === undefined &&
        !('id_col' in $$props || $$self.$$.bound[$$self.$$.props['id_col']])
      ) {
        console.warn(
          "<CollectionBulkEdit> was created without expected prop 'id_col'"
        )
      }
    })

    const writable_props = ['id_col']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(
          `<CollectionBulkEdit> was created with unknown prop '${key}'`
        )
    })

    const click_handler = (i) => toggleEditor(i)

    $$self.$$set = ($$props) => {
      if ('id_col' in $$props) $$invalidate(0, (id_col = $$props.id_col))
    }

    $$self.$capture_state = () => ({
      afterUpdate,
      BlockEditor: BlockEditor_self,
      id_col,
      err,
      collection,
      user,
      userrights,
      headerHeight,
      header,
      pane,
      nonEmptyCollection,
      getCollectionUserRights,
      getCollection,
      getUser,
      visibleEditorIndex,
      toggleEditor,
      showAllEditors,
      toggleAllEditors,
    })

    $$self.$inject_state = ($$props) => {
      if ('id_col' in $$props) $$invalidate(0, (id_col = $$props.id_col))
      if ('err' in $$props) $$invalidate(2, (err = $$props.err))
      if ('collection' in $$props)
        $$invalidate(1, (collection = $$props.collection))
      if ('user' in $$props) user = $$props.user
      if ('userrights' in $$props) userrights = $$props.userrights
      if ('headerHeight' in $$props)
        $$invalidate(8, (headerHeight = $$props.headerHeight))
      if ('header' in $$props) $$invalidate(9, (header = $$props.header))
      if ('pane' in $$props) $$invalidate(10, (pane = $$props.pane))
      if ('nonEmptyCollection' in $$props)
        $$invalidate(3, (nonEmptyCollection = $$props.nonEmptyCollection))
      if ('visibleEditorIndex' in $$props)
        $$invalidate(4, (visibleEditorIndex = $$props.visibleEditorIndex))
      if ('showAllEditors' in $$props)
        $$invalidate(5, (showAllEditors = $$props.showAllEditors))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    $$self.$$.update = () => {
      if ($$self.$$.dirty & /*id_col*/ 1) {
        Promise.all([
          getCollection(id_col),
          getUser(),
          getCollectionUserRights(id_col),
        ])
          .then(([c, u, ur]) => {
            $$invalidate(1, (collection = c))
            user = u
            userrights = ur
          })
          .catch((e) => $$invalidate(2, (err = e)))
      }

      if ($$self.$$.dirty & /*collection*/ 2) {
        if (collection && collection.buckets) {
          collection.buckets.sort((a, b) =>
            a.bucket.toLowerCase().localeCompare(b.bucket.toLowerCase())
          )

          collection.buckets.forEach((bucket) => {
            bucket.citations.sort((a, b) => {
              const aParts = a
                .replace(/[-+/_|].*/, '')
                .split('.')
                .map(Number)
              const bParts = b
                .replace(/[-+/_|].*/, '')
                .split('.')
                .map(Number)

              for (let i = 0; i < Math.min(aParts.length, bParts.length); i++) {
                if (aParts[i] < bParts[i]) {
                  return -1
                } else if (aParts[i] > bParts[i]) {
                  return 1
                }
              }

              // If all parts compared are equal, sort by length
              return aParts.length - bParts.length
            })
          })
        }
      }

      if ($$self.$$.dirty & /*collection*/ 2) {
        if (collection && Array.isArray(collection.buckets)) {
          $$invalidate(3, (nonEmptyCollection = true))
        }
      }

      if ($$self.$$.dirty & /*header*/ 512) {
        $$invalidate(8, (headerHeight = header ? header.clientHeight : 0))
      }

      if ($$self.$$.dirty & /*pane, headerHeight*/ 1280) {
        // Set the padding-top for the pane element
        if (pane) {
          $$invalidate(
            10,
            (pane.style.paddingTop = `${headerHeight + 10}px`),
            pane
          )
        }
      }
    }

    return [
      id_col,
      collection,
      err,
      nonEmptyCollection,
      visibleEditorIndex,
      showAllEditors,
      toggleEditor,
      toggleAllEditors,
      headerHeight,
      header,
      pane,
      click_handler,
    ]
  }

  class CollectionBulkEdit extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance$1, create_fragment$1, safe_not_equal, {
        id_col: 0,
      })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'CollectionBulkEdit',
        options,
        id: create_fragment$1.name,
      })
    }

    get id_col() {
      throw new Error_1(
        "<CollectionBulkEdit>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set id_col(value) {
      throw new Error_1(
        "<CollectionBulkEdit>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  /* src/App.svelte generated by Svelte v3.58.0 */
  const file = 'src/App.svelte'

  // (30:0) <Router {url}>
  function create_default_slot(ctx) {
    let route0
    let t0
    let route1
    let t1
    let route2
    let t2
    let route3
    let t3
    let route4
    let t4
    let route5
    let t5
    let route6
    let t6
    let route7
    let current

    route0 = new Route({
      props: {
        path: '/collections/:id_auth/:id_page',
        component: Collections,
      },
      $$inline: true,
    })

    route1 = new Route({
      props: {
        path: '/view/:id_col/:urn',
        component: CollectionOverview,
      },
      $$inline: true,
    })

    route2 = new Route({
      props: {
        path: '/tools/bulkedit/:id_col',
        component: CollectionBulkEdit,
      },
      $$inline: true,
    })

    route3 = new Route({
      props: {
        path: '/tools/sharecollection/:id_col',
        component: ShareCollection,
      },
      $$inline: true,
    })

    route4 = new Route({
      props: {
        path: '/tools/ingestcex',
        component: IngestCex,
      },
      $$inline: true,
    })

    route5 = new Route({
      props: {
        path: '/tools/addcollection',
        component: AddCollection,
      },
      $$inline: true,
    })

    route6 = new Route({
      props: {
        path: '/tools/ingestimage/:id_col',
        component: IngestImage,
      },
      $$inline: true,
    })

    route7 = new Route({
      props: { path: '*', component: NotFound },
      $$inline: true,
    })

    const block = {
      c: function create() {
        create_component(route0.$$.fragment)
        t0 = space()
        create_component(route1.$$.fragment)
        t1 = space()
        create_component(route2.$$.fragment)
        t2 = space()
        create_component(route3.$$.fragment)
        t3 = space()
        create_component(route4.$$.fragment)
        t4 = space()
        create_component(route5.$$.fragment)
        t5 = space()
        create_component(route6.$$.fragment)
        t6 = space()
        create_component(route7.$$.fragment)
      },
      m: function mount(target, anchor) {
        mount_component(route0, target, anchor)
        insert_dev(target, t0, anchor)
        mount_component(route1, target, anchor)
        insert_dev(target, t1, anchor)
        mount_component(route2, target, anchor)
        insert_dev(target, t2, anchor)
        mount_component(route3, target, anchor)
        insert_dev(target, t3, anchor)
        mount_component(route4, target, anchor)
        insert_dev(target, t4, anchor)
        mount_component(route5, target, anchor)
        insert_dev(target, t5, anchor)
        mount_component(route6, target, anchor)
        insert_dev(target, t6, anchor)
        mount_component(route7, target, anchor)
        current = true
      },
      p: noop,
      i: function intro(local) {
        if (current) return
        transition_in(route0.$$.fragment, local)
        transition_in(route1.$$.fragment, local)
        transition_in(route2.$$.fragment, local)
        transition_in(route3.$$.fragment, local)
        transition_in(route4.$$.fragment, local)
        transition_in(route5.$$.fragment, local)
        transition_in(route6.$$.fragment, local)
        transition_in(route7.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(route0.$$.fragment, local)
        transition_out(route1.$$.fragment, local)
        transition_out(route2.$$.fragment, local)
        transition_out(route3.$$.fragment, local)
        transition_out(route4.$$.fragment, local)
        transition_out(route5.$$.fragment, local)
        transition_out(route6.$$.fragment, local)
        transition_out(route7.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        destroy_component(route0, detaching)
        if (detaching) detach_dev(t0)
        destroy_component(route1, detaching)
        if (detaching) detach_dev(t1)
        destroy_component(route2, detaching)
        if (detaching) detach_dev(t2)
        destroy_component(route3, detaching)
        if (detaching) detach_dev(t3)
        destroy_component(route4, detaching)
        if (detaching) detach_dev(t4)
        destroy_component(route5, detaching)
        if (detaching) detach_dev(t5)
        destroy_component(route6, detaching)
        if (detaching) detach_dev(t6)
        destroy_component(route7, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_default_slot.name,
      type: 'slot',
      source: '(30:0) <Router {url}>',
      ctx,
    })

    return block
  }

  function create_fragment(ctx) {
    let style
    let t1
    let router
    let current

    router = new Router({
      props: {
        url: /*url*/ ctx[0],
        $$slots: { default: [create_default_slot] },
        $$scope: { ctx },
      },
      $$inline: true,
    })

    const block = {
      c: function create() {
        style = element('style')
        style.textContent =
          ':root {\n      --toolbar-bg-color: rgb(240, 240, 240);\n      --toolbar-text-color: rgb(50, 50, 50);\n      --toolbar-border-color: rgb(200, 200, 200);\n      --pane-bg-color: rgba(248, 248, 248);\n    }'
        t1 = space()
        create_component(router.$$.fragment)
        add_location(style, file, 18, 2, 700)
      },
      l: function claim(nodes) {
        throw new Error(
          'options.hydrate only works if the component was compiled with the `hydratable: true` option'
        )
      },
      m: function mount(target, anchor) {
        append_dev(document.head, style)
        insert_dev(target, t1, anchor)
        mount_component(router, target, anchor)
        current = true
      },
      p: function update(ctx, [dirty]) {
        const router_changes = {}
        if (dirty & /*url*/ 1) router_changes.url = /*url*/ ctx[0]

        if (dirty & /*$$scope*/ 2) {
          router_changes.$$scope = { dirty, ctx }
        }

        router.$set(router_changes)
      },
      i: function intro(local) {
        if (current) return
        transition_in(router.$$.fragment, local)
        current = true
      },
      o: function outro(local) {
        transition_out(router.$$.fragment, local)
        current = false
      },
      d: function destroy(detaching) {
        detach_dev(style)
        if (detaching) detach_dev(t1)
        destroy_component(router, detaching)
      },
    }

    dispatch_dev('SvelteRegisterBlock', {
      block,
      id: create_fragment.name,
      type: 'component',
      source: '',
      ctx,
    })

    return block
  }

  function instance($$self, $$props, $$invalidate) {
    let { $$slots: slots = {}, $$scope } = $$props
    validate_slots('App', slots, [])
    let { url = location.pathname } = $$props
    const writable_props = ['url']

    Object.keys($$props).forEach((key) => {
      if (
        !~writable_props.indexOf(key) &&
        key.slice(0, 2) !== '$$' &&
        key !== 'slot'
      )
        console.warn(`<App> was created with unknown prop '${key}'`)
    })

    $$self.$$set = ($$props) => {
      if ('url' in $$props) $$invalidate(0, (url = $$props.url))
    }

    $$self.$capture_state = () => ({
      Router,
      Route,
      IngestCex,
      AddCollection,
      IngestImage,
      CollectionOverview,
      CollectionList: Collections,
      NotFound,
      ShareCollection,
      CollectionBulkEdit,
      url,
    })

    $$self.$inject_state = ($$props) => {
      if ('url' in $$props) $$invalidate(0, (url = $$props.url))
    }

    if ($$props && '$$inject' in $$props) {
      $$self.$inject_state($$props.$$inject)
    }

    return [url]
  }

  class App extends SvelteComponentDev {
    constructor(options) {
      super(options)
      init(this, options, instance, create_fragment, safe_not_equal, { url: 0 })

      dispatch_dev('SvelteRegisterComponent', {
        component: this,
        tagName: 'App',
        options,
        id: create_fragment.name,
      })
    }

    get url() {
      throw new Error(
        "<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }

    set url(value) {
      throw new Error(
        "<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'"
      )
    }
  }

  AWS__namespace.config.region = 'eu-west-1' // Region
  AWS__namespace.config.credentials =
    new AWS__namespace.CognitoIdentityCredentials({
      IdentityPoolId: 'eu-west-1:7b929dbf-6831-4a5c-977c-e4ca4ddc7d8b',
    })

  const app = new App({
    target: document.getElementById('app'),
  })

  return app
})(AWS, jQuery)
//# sourceMappingURL=bundle.js.map
